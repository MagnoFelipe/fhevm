/**

Generated by the following Solidity interface...
```solidity
interface CoprocessorContexts {
    type ContextStatus is uint8;
    struct Coprocessor {
        string name;
        address txSenderAddress;
        address signerAddress;
        string s3BucketUrl;
    }
    struct CoprocessorContext {
        uint256 contextId;
        uint256 previousContextId;
        uint256 featureSet;
        Coprocessor[] coprocessors;
    }
    struct CoprocessorContextTimePeriods {
        uint256 preActivationTimePeriod;
        uint256 suspendedTimePeriod;
    }

    error AddressEmptyCode(address target);
    error ContextAlreadyExists(uint256 contextId);
    error ContextDoesNotExist(uint256 contextId);
    error ContextIsActive(uint256 contextId);
    error ContextIsGenerating(uint256 contextId);
    error ContextNotActive(uint256 contextId);
    error ContextNotActiveOrSuspended(uint256 contextId);
    error ContextNotGenerated(uint256 contextId);
    error ContextNotPreActivatedOrSuspended(uint256 contextId);
    error CoprocessorContextNotInitialized(uint256 contextId);
    error ERC1967InvalidImplementation(address implementation);
    error ERC1967NonPayable();
    error EmptyCoprocessors();
    error EnforcedPause();
    error ExpectedPause();
    error FailedCall();
    error InvalidInitialization();
    error InvalidNullContextId();
    error NoActiveCoprocessorContext();
    error NoPreActivationCoprocessorContext();
    error NoSuspendedCoprocessorContext();
    error NotCoprocessorFromContext(uint256 contextId, address coprocessorTxSenderAddress);
    error NotCoprocessorSignerFromContext(uint256 contextId, address signerAddress);
    error NotCoprocessorTxSenderFromContext(uint256 contextId, address txSenderAddress);
    error NotInitializing();
    error NotInitializingFromEmptyProxy();
    error NotOwnerOrPauser(address notOwnerOrPauser);
    error NullCoprocessorSignerAddress(uint256 contextId, uint256 coprocessorIndex);
    error NullCoprocessorTxSenderAddress(uint256 contextId, uint256 coprocessorIndex);
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error PreActivationContextOngoing(uint256 preActivationContextId);
    error SuspendedContextOngoing(uint256 suspendedContextId);
    error UUPSUnauthorizedCallContext();
    error UUPSUnsupportedProxiableUUID(bytes32 slot);

    event ActivateCoprocessorContext(uint256 contextId);
    event CompromiseCoprocessorContext(uint256 contextId);
    event DeactivateCoprocessorContext(uint256 contextId);
    event DestroyCoprocessorContext(uint256 contextId);
    event InitializeCoprocessorContexts(uint256 featureSet, Coprocessor[] coprocessors);
    event Initialized(uint64 version);
    event NewCoprocessorContext(CoprocessorContext activeCoprocessorContext, CoprocessorContext newCoprocessorContext, CoprocessorContextTimePeriods timePeriods);
    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event Paused(address account);
    event PreActivateCoprocessorContext(CoprocessorContext newCoprocessorContext, uint256 activationBlockTimestamp);
    event SuspendCoprocessorContext(uint256 contextId, uint256 deactivatedBlockTimestamp);
    event Unpaused(address account);
    event Upgraded(address indexed implementation);

    constructor();

    function UPGRADE_INTERFACE_VERSION() external view returns (string memory);
    function acceptOwnership() external;
    function addCoprocessorContext(uint256 featureSet, Coprocessor[] memory coprocessors, CoprocessorContextTimePeriods memory timePeriods) external;
    function checkIsCoprocessorSignerFromContext(uint256 contextId, address signerAddress) external view;
    function checkIsCoprocessorTxSenderFromContext(uint256 contextId, address txSenderAddress) external view;
    function compromiseCoprocessorContext(uint256 contextId) external;
    function destroyCoprocessorContext(uint256 contextId) external;
    function getActiveCoprocessorContext() external view returns (CoprocessorContext memory);
    function getActiveCoprocessorContextId() external view returns (uint256);
    function getCoprocessorActivationBlockTimestampFromContext(uint256 contextId) external view returns (uint256);
    function getCoprocessorContextStatus(uint256 contextId) external view returns (ContextStatus);
    function getCoprocessorDeactivatedBlockTimestampFromContext(uint256 contextId) external view returns (uint256);
    function getCoprocessorFromContext(uint256 contextId, address coprocessorTxSenderAddress) external view returns (Coprocessor memory);
    function getCoprocessorMajorityThresholdFromContext(uint256 contextId) external view returns (uint256);
    function getCoprocessorSignersFromContext(uint256 contextId) external view returns (address[] memory);
    function getCoprocessorTxSendersFromContext(uint256 contextId) external view returns (address[] memory);
    function getPreActivationCoprocessorContextId() external view returns (uint256);
    function getSuspendedCoprocessorContextId() external view returns (uint256);
    function getVersion() external pure returns (string memory);
    function initializeFromEmptyProxy(uint256 initialFeatureSet, Coprocessor[] memory initialCoprocessors) external;
    function isCoprocessorContextActiveOrSuspended(uint256 contextId) external view returns (bool);
    function moveSuspendedCoprocessorContextToActive() external;
    function owner() external view returns (address);
    function pause() external;
    function paused() external view returns (bool);
    function pendingOwner() external view returns (address);
    function proxiableUUID() external view returns (bytes32);
    function refreshCoprocessorContextStatuses() external;
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function unpause() external;
    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "UPGRADE_INTERFACE_VERSION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "acceptOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "addCoprocessorContext",
    "inputs": [
      {
        "name": "featureSet",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "internalType": "struct Coprocessor[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "s3BucketUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      },
      {
        "name": "timePeriods",
        "type": "tuple",
        "internalType": "struct CoprocessorContextTimePeriods",
        "components": [
          {
            "name": "preActivationTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "suspendedTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "checkIsCoprocessorSignerFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "signerAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "checkIsCoprocessorTxSenderFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "txSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "compromiseCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "destroyCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getActiveCoprocessorContext",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "featureSet",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct Coprocessor[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "s3BucketUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getActiveCoprocessorContextId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorActivationBlockTimestampFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorContextStatus",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "enum ContextStatus"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorDeactivatedBlockTimestampFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessorTxSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct Coprocessor",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "s3BucketUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorMajorityThresholdFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorSignersFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCoprocessorTxSendersFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getPreActivationCoprocessorContextId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getSuspendedCoprocessorContextId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getVersion",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "initializeFromEmptyProxy",
    "inputs": [
      {
        "name": "initialFeatureSet",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "initialCoprocessors",
        "type": "tuple[]",
        "internalType": "struct Coprocessor[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "s3BucketUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isCoprocessorContextActiveOrSuspended",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "moveSuspendedCoprocessorContextToActive",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pause",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "paused",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pendingOwner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proxiableUUID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "refreshCoprocessorContextStatuses",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "unpause",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "upgradeToAndCall",
    "inputs": [
      {
        "name": "newImplementation",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "event",
    "name": "ActivateCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CompromiseCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DeactivateCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DestroyCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "InitializeCoprocessorContexts",
    "inputs": [
      {
        "name": "featureSet",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "coprocessors",
        "type": "tuple[]",
        "indexed": false,
        "internalType": "struct Coprocessor[]",
        "components": [
          {
            "name": "name",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "txSenderAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "signerAddress",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "s3BucketUrl",
            "type": "string",
            "internalType": "string"
          }
        ]
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "NewCoprocessorContext",
    "inputs": [
      {
        "name": "activeCoprocessorContext",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "featureSet",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct Coprocessor[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "s3BucketUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      },
      {
        "name": "newCoprocessorContext",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "featureSet",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct Coprocessor[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "s3BucketUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      },
      {
        "name": "timePeriods",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContextTimePeriods",
        "components": [
          {
            "name": "preActivationTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "suspendedTimePeriod",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferStarted",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Paused",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PreActivateCoprocessorContext",
    "inputs": [
      {
        "name": "newCoprocessorContext",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct CoprocessorContext",
        "components": [
          {
            "name": "contextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "previousContextId",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "featureSet",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "coprocessors",
            "type": "tuple[]",
            "internalType": "struct Coprocessor[]",
            "components": [
              {
                "name": "name",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "txSenderAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "signerAddress",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "s3BucketUrl",
                "type": "string",
                "internalType": "string"
              }
            ]
          }
        ]
      },
      {
        "name": "activationBlockTimestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SuspendCoprocessorContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "deactivatedBlockTimestamp",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Unpaused",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Upgraded",
    "inputs": [
      {
        "name": "implementation",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "AddressEmptyCode",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextAlreadyExists",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextDoesNotExist",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextIsActive",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextIsGenerating",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextNotActive",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextNotActiveOrSuspended",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextNotGenerated",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ContextNotPreActivatedOrSuspended",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "CoprocessorContextNotInitialized",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967InvalidImplementation",
    "inputs": [
      {
        "name": "implementation",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967NonPayable",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EmptyCoprocessors",
    "inputs": []
  },
  {
    "type": "error",
    "name": "EnforcedPause",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ExpectedPause",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FailedCall",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidNullContextId",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoActiveCoprocessorContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoPreActivationCoprocessorContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NoSuspendedCoprocessorContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotCoprocessorFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessorTxSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotCoprocessorSignerFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "signerAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotCoprocessorTxSenderFromContext",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "txSenderAddress",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotInitializingFromEmptyProxy",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotOwnerOrPauser",
    "inputs": [
      {
        "name": "notOwnerOrPauser",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "NullCoprocessorSignerAddress",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessorIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "NullCoprocessorTxSenderAddress",
    "inputs": [
      {
        "name": "contextId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "coprocessorIndex",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "PreActivationContextOngoing",
    "inputs": [
      {
        "name": "preActivationContextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "SuspendedContextOngoing",
    "inputs": [
      {
        "name": "suspendedContextId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "UUPSUnauthorizedCallContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UUPSUnsupportedProxiableUUID",
    "inputs": [
      {
        "name": "slot",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod CoprocessorContexts {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801562000043575f80fd5b50620000546200005a60201b60201c565b620001c4565b5f6200006b6200015e60201b60201c565b9050805f0160089054906101000a900460ff1615620000b6576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff8016815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff16146200015b5767ffffffffffffffff815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff604051620001529190620001a9565b60405180910390a15b50565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f67ffffffffffffffff82169050919050565b620001a38162000185565b82525050565b5f602082019050620001be5f83018462000198565b92915050565b60805161532a620001eb5f395f81816123af0152818161240401526125be015261532a5ff3fe6080604052600436106101e2575f3560e01c8063888b99e011610101578063be91187b11610094578063eec168fb11610063578063eec168fb14610680578063f192cf68146106a8578063f2fde38b146106d0578063fed9716b146106f8576101e2565b8063be91187b146105c8578063d1841dd3146105f2578063d740e4021461062e578063e30c397814610656576101e2565b8063991dc36d116100d0578063991dc36d146105105780639efb484e1461053a578063a94a02ad14610562578063ad3cb1cc1461059e576101e2565b8063888b99e0146104585780638da5cb5b1461049457806390218748146104be578063957b2abe146104fa576101e2565b806360b2546511610179578063715018a611610148578063715018a6146103ee57806379ba5097146104045780638456cb591461041a57806384cae18714610430576101e2565b806360b25465146103125780636b3174e51461034e5780636ba818e11461038a578063703c3b2e146103c6576101e2565b80633f4ba83a116101b55780633f4ba83a1461028c5780634f1ef286146102a257806352d1902d146102be5780635c975abb146102e8576101e2565b8063086e4e1c146101e65780630d8e6e2c1461021057806318b7214d1461023a5780633a5162e614610276575b5f80fd5b3480156101f1575f80fd5b506101fa610722565b6040516102079190613e8a565b60405180910390f35b34801561021b575f80fd5b5061022461076e565b6040516102319190613f2d565b60405180910390f35b348015610245575f80fd5b50610260600480360381019061025b9190613f88565b6107e9565b60405161026d919061409a565b60405180910390f35b348015610281575f80fd5b5061028a610893565b005b348015610297575f80fd5b506102a0610a24565b005b6102bc60048036038101906102b79190614210565b610a36565b005b3480156102c9575f80fd5b506102d2610a55565b6040516102df9190614282565b60405180910390f35b3480156102f3575f80fd5b506102fc610a86565b60405161030991906142b5565b60405180910390f35b34801561031d575f80fd5b5061033860048036038101906103339190613f88565b610aa8565b60405161034591906142b5565b60405180910390f35b348015610359575f80fd5b50610374600480360381019061036f9190613f88565b610b32565b604051610381919061409a565b60405180910390f35b348015610395575f80fd5b506103b060048036038101906103ab9190613f88565b610bdc565b6040516103bd9190613e8a565b60405180910390f35b3480156103d1575f80fd5b506103ec60048036038101906103e7919061432b565b610c7d565b005b3480156103f9575f80fd5b50610402610e6e565b005b34801561040f575f80fd5b50610418610e81565b005b348015610425575f80fd5b5061042e610f0f565b005b34801561043b575f80fd5b50610456600480360381019061045191906143aa565b61104a565b005b348015610463575f80fd5b5061047e60048036038101906104799190613f88565b611162565b60405161048b919061448e565b60405180910390f35b34801561049f575f80fd5b506104a8611182565b6040516104b591906144b6565b60405180910390f35b3480156104c9575f80fd5b506104e460048036038101906104df9190613f88565b6111b7565b6040516104f19190613e8a565b60405180910390f35b348015610505575f80fd5b5061050e611246565b005b34801561051b575f80fd5b506105246112fa565b6040516105319190613e8a565b60405180910390f35b348015610545575f80fd5b50610560600480360381019061055b91906144cf565b611346565b005b34801561056d575f80fd5b5061058860048036038101906105839190613f88565b61145b565b6040516105959190613e8a565b60405180910390f35b3480156105a9575f80fd5b506105b26114ea565b6040516105bf9190613f2d565b60405180910390f35b3480156105d3575f80fd5b506105dc611523565b6040516105e99190613e8a565b60405180910390f35b3480156105fd575f80fd5b50610618600480360381019061061391906144cf565b61156f565b60405161062591906145bc565b60405180910390f35b348015610639575f80fd5b50610654600480360381019061064f9190613f88565b61188f565b005b348015610661575f80fd5b5061066a611950565b60405161067791906144b6565b60405180910390f35b34801561068b575f80fd5b506106a660048036038101906106a19190613f88565b611985565b005b3480156106b3575f80fd5b506106ce60048036038101906106c991906144cf565b611a46565b005b3480156106db575f80fd5b506106f660048036038101906106f191906145dc565b611b5b565b005b348015610703575f80fd5b5061070c611c14565b6040516107199190614798565b60405180910390f35b5f8061072c611e99565b90505f8103610767576040517f21fb08f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b60606040518060400160405280601381526020017f436f70726f636573736f72436f6e7465787473000000000000000000000000008152506107af5f611eb2565b6107b96001611eb2565b6107c25f611eb2565b6040516020016107d59493929190614886565b604051602081830303815290604052905090565b60605f6107f4611f7c565b9050806009015f8481526020019081526020015f2080548060200260200160405190810160405280929190818152602001828054801561088657602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161083d575b5050505050915050919050565b61089b611fa3565b5f6108a4611f7c565b90505f815f016002015490505f81141580156108d3575081600c015f8281526020019081526020015f20544210155b156109a8575f6108e16112fa565b90505f83600e015f8381526020019081526020015f2054426109039190614911565b90508084600d015f8481526020019081526020015f2081905550610929845f0183611fe4565b7f3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc828260405161095a929190614944565b60405180910390a161096e845f01846120ba565b7f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be718360405161099d9190613e8a565b60405180910390a150505b5f6109b1611e99565b90505f81141580156109d6575082600d015f8281526020019081526020015f20544210155b15610a1f576109e7835f01826121b5565b7f1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a5289881604051610a169190613e8a565b60405180910390a15b505050565b610a2c6122b8565b610a3461233f565b565b610a3e6123ad565b610a4782612493565b610a51828261249e565b5050565b5f610a5e6125bc565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f80610a90612643565b9050805f015f9054906101000a900460ff1691505090565b5f815f610ab3611f7c565b90505f816005015f8481526020019081526020015f205f015403610b0e57816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401610b059190613e8a565b60405180910390fd5b610b166112fa565b841480610b295750610b26611e99565b84145b92505050919050565b60605f610b3d611f7c565b905080600b015f8481526020019081526020015f20805480602002602001604051908101604052809291908181526020018280548015610bcf57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b86575b5050505050915050919050565b5f815f610be7611f7c565b90505f816005015f8481526020019081526020015f205f015403610c4257816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401610c399190613e8a565b60405180910390fd5b5f610c4b611f7c565b9050600180826009015f8881526020019081526020015f2080549050901c610c739190614911565b9350505050919050565b6001610c8761266a565b67ffffffffffffffff1614610cc8576040517f6f4f731f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f610cd361268e565b9050805f0160089054906101000a900460ff1680610d1b57508167ffffffffffffffff16815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1610155b15610d52576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001815f0160086101000a81548160ff021916908315150217905550610da7610da2611182565b6126b5565b610daf6126c9565b5f610dbc5f8787876126db565b90505f610dc7611f7c565b9050610dd8815f01835f01516120ba565b7f13c5fd631ca031552fe9e38d911910a5980f6608eea323696e04db0fec0c9557878787604051610e0b93929190614b77565b60405180910390a150505f815f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d282604051610e5f9190614bc9565b60405180910390a15050505050565b610e766122b8565b610e7f5f612f3a565b565b5f610e8a612f77565b90508073ffffffffffffffffffffffffffffffffffffffff16610eab611950565b73ffffffffffffffffffffffffffffffffffffffff1614610f0357806040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610efa91906144b6565b60405180910390fd5b610f0c81612f3a565b50565b610f17611182565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610ffe575073c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff16637008b5486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610faa573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fce9190614bf6565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561104057336040517f46c0d9af00000000000000000000000000000000000000000000000000000000815260040161103791906144b6565b60405180910390fd5b611048612f7e565b565b6110526122b8565b5f61105b611f7c565b90505f611066611c14565b90505f611078825f01518888886126db565b90507faf58a18a4e4159fa706c0d4e0fdab0930f97679319cddbc9c9199b0cd104b6ef8282866040516110ad93929190614c74565b60405180910390a16110c4835f01825f0151612fed565b6110d3835f01825f0151613152565b5f845f0135426110e39190614911565b90508084600c015f845f015181526020019081526020015f2081905550846020013584600e015f855f015181526020019081526020015f20819055507f2b0188fc4bed471ee216dc6cb9650beb288892034ebee7301b32391add2a66b88282604051611150929190614cb7565b60405180910390a15050505050505050565b5f8061116c611f7c565b905061117a815f0184613228565b915050919050565b5f8061118c613250565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b5f815f6111c2611f7c565b90505f816005015f8481526020019081526020015f205f01540361121d57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016112149190613e8a565b60405180910390fd5b5f611226611f7c565b905080600d015f8681526020019081526020015f20549350505050919050565b61124e6122b8565b5f611257610722565b90505f611262611f7c565b90505f61126d613277565b905061127b825f01826121b5565b7f1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a52898816040516112aa9190613e8a565b60405180910390a16112be825f01846120ba565b7f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be71836040516112ed9190613e8a565b60405180910390a1505050565b5f80611304613277565b90505f810361133f576040517f046593ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b815f611350611f7c565b90505f816005015f8481526020019081526020015f205f0154036113ab57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016113a29190613e8a565b60405180910390fd5b5f6113b4611f7c565b905080600a015f8681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166114545784846040517f554f8c5f00000000000000000000000000000000000000000000000000000000815260040161144b929190614ce5565b60405180910390fd5b5050505050565b5f815f611466611f7c565b90505f816005015f8481526020019081526020015f205f0154036114c157816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016114b89190613e8a565b60405180910390fd5b5f6114ca611f7c565b905080600c015f8681526020019081526020015f20549350505050919050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b5f8061152d613290565b90505f8103611568576040517fb9e861b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b611577613dfb565b825f611581611f7c565b90505f816005015f8481526020019081526020015f205f0154036115dc57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016115d39190613e8a565b60405180910390fd5b5f6115e5611f7c565b90505f816007015f8881526020019081526020015f205f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f8201805461165090614d39565b80601f016020809104026020016040519081016040528092919081815260200182805461167c90614d39565b80156116c75780601f1061169e576101008083540402835291602001916116c7565b820191905f5260205f20905b8154815290600101906020018083116116aa57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805461178a90614d39565b80601f01602080910402602001604051908101604052809291908181526020018280546117b690614d39565b80156118015780601f106117d857610100808354040283529160200191611801565b820191905f5260205f20905b8154815290600101906020018083116117e457829003601f168201915b50505050508152505090505f73ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16036118825786866040517fc312e73e000000000000000000000000000000000000000000000000000000008152600401611879929190614ce5565b60405180910390fd5b8094505050505092915050565b6118976122b8565b805f6118a1611f7c565b90505f816005015f8481526020019081526020015f205f0154036118fc57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016118f39190613e8a565b60405180910390fd5b5f611905611f7c565b9050611913815f01856132a9565b7ff20b299804c9c1d6da3b82414c7aa0a845cdbabae2d90e46e360a379a77b7be5846040516119429190613e8a565b60405180910390a150505050565b5f8061195a613412565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b61198d6122b8565b805f611997611f7c565b90505f816005015f8481526020019081526020015f205f0154036119f257816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016119e99190613e8a565b60405180910390fd5b5f6119fb611f7c565b9050611a09815f0185613439565b7fee7ef83963417125d27430789fc6e94194381e82c3cda68260d0e7cfc31eaf2184604051611a389190613e8a565b60405180910390a150505050565b815f611a50611f7c565b90505f816005015f8481526020019081526020015f205f015403611aab57816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401611aa29190613e8a565b60405180910390fd5b5f611ab4611f7c565b9050806008015f8681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16611b545784846040517f29a993c1000000000000000000000000000000000000000000000000000000008152600401611b4b929190614ce5565b60405180910390fd5b5050505050565b611b636122b8565b5f611b6c613412565b905081815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16611bce611182565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b611c1c613e4d565b5f611c256112fa565b90505f611c30611f7c565b9050806005015f8381526020019081526020015f206040518060800160405290815f8201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020015f905b82821015611e8a578382905f5260205f2090600402016040518060800160405290815f82018054611cc190614d39565b80601f0160208091040260200160405190810160405280929190818152602001828054611ced90614d39565b8015611d385780601f10611d0f57610100808354040283529160200191611d38565b820191905f5260205f20905b815481529060010190602001808311611d1b57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054611dfb90614d39565b80601f0160208091040260200160405190810160405280929190818152602001828054611e2790614d39565b8015611e725780601f10611e4957610100808354040283529160200191611e72565b820191905f5260205f20905b815481529060010190602001808311611e5557829003601f168201915b50505050508152505081526020019060010190611c91565b50505050815250509250505090565b5f80611ea3611f7c565b9050805f016004015491505090565b60605f6001611ec0846135d9565b0190505f8167ffffffffffffffff811115611ede57611edd6140ec565b5b6040519080825280601f01601f191660200182016040528015611f105781602001600182028036833780820191505090505b5090505f82602001820190505b600115611f71578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611f6657611f65614d69565b5b0494505f8503611f1d575b819350505050919050565b5f7f1da8a9a065a2f0a895c457065eddd3cf4a4d0d5340aaa0ca54d3cd5b4a6aaf00905090565b611fab610a86565b15611fe2576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b805f810361201e576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612028838361372a565b61206957816040517f331486b30000000000000000000000000000000000000000000000000000000081526004016120609190613e8a565b60405180910390fd5b6004835f015f8481526020019081526020015f205f6101000a81548160ff0219169083600781111561209e5761209d61441b565b5b02179055508183600401819055505f8360030181905550505050565b805f81036120f4576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6120fe8383613779565b158015612112575061211083836137c8565b155b801561212257505f836003015414155b1561216457816040517f12b49e3d00000000000000000000000000000000000000000000000000000000815260040161215b9190613e8a565b60405180910390fd5b6003835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156121995761219861441b565b5b02179055508183600301819055505f8360020181905550505050565b805f81036121ef576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6121f9838361372a565b15801561220d575061220b83836137c8565b155b1561224f57816040517f2b3652d10000000000000000000000000000000000000000000000000000000081526004016122469190613e8a565b60405180910390fd5b6005835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156122845761228361441b565b5b02179055508183600301540361229e575f83600301819055505b818360040154036122b3575f83600401819055505b505050565b6122c0612f77565b73ffffffffffffffffffffffffffffffffffffffff166122de611182565b73ffffffffffffffffffffffffffffffffffffffff161461233d57612301612f77565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161233491906144b6565b60405180910390fd5b565b612347613817565b5f612350612643565b90505f815f015f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612395612f77565b6040516123a291906144b6565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061245a57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612441613857565b73ffffffffffffffffffffffffffffffffffffffff1614155b15612491576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61249b6122b8565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561250657506040513d601f19601f820116820180604052508101906125039190614dc0565b60015b61254757816040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815260040161253e91906144b6565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b81146125ad57806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016125a49190614282565b60405180910390fd5b6125b783836138aa565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612641576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300905090565b5f61267361268e565b5f015f9054906101000a900467ffffffffffffffff16905090565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6126bd61391c565b6126c68161395c565b50565b6126d161391c565b6126d96139e0565b565b6126e3613e4d565b5f838390500361271f576040517f8af082ef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f612728611f7c565b9050806006015f81548092919061273e90614deb565b91905055505f8160060154905080826005015f8381526020019081526020015f205f018190555086826005015f8381526020019081526020015f206001018190555085826005015f8381526020019081526020015f20600201819055505f5b8585905081101561282457826005015f8381526020019081526020015f206003018686838181106127d1576127d0614e32565b5b90506020028101906127e39190614e6b565b908060018154018082558091505060019003905f5260205f2090600402015f90919091909150818161281591906152c2565b5050808060010191505061279d565b505f5b85859050811015612ccd575f73ffffffffffffffffffffffffffffffffffffffff1686868381811061285c5761285b614e32565b5b905060200281019061286e9190614e6b565b602001602081019061288091906145dc565b73ffffffffffffffffffffffffffffffffffffffff16036128da5781816040517f4c1006f30000000000000000000000000000000000000000000000000000000081526004016128d1929190614944565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff1686868381811061290457612903614e32565b5b90506020028101906129169190614e6b565b604001602081019061292891906145dc565b73ffffffffffffffffffffffffffffffffffffffff16036129825781816040517f8a7488f4000000000000000000000000000000000000000000000000000000008152600401612979929190614944565b60405180910390fd5b85858281811061299557612994614e32565b5b90506020028101906129a79190614e6b565b836007015f8481526020019081526020015f205f8888858181106129ce576129cd614e32565b5b90506020028101906129e09190614e6b565b60200160208101906129f291906145dc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208181612a3791906152c2565b9050506001836008015f8481526020019081526020015f205f888885818110612a6357612a62614e32565b5b9050602002810190612a759190614e6b565b6020016020810190612a8791906145dc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550826009015f8381526020019081526020015f20868683818110612afc57612afb614e32565b5b9050602002810190612b0e9190614e6b565b6020016020810190612b2091906145dc565b908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183600a015f8481526020019081526020015f205f888885818110612ba657612ba5614e32565b5b9050602002810190612bb89190614e6b565b6040016020810190612bca91906145dc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555082600b015f8381526020019081526020015f20868683818110612c3f57612c3e614e32565b5b9050602002810190612c519190614e6b565b6040016020810190612c6391906145dc565b908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080600101915050612827565b50816005015f8281526020019081526020015f206040518060800160405290815f8201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020015f905b82821015612f26578382905f5260205f2090600402016040518060800160405290815f82018054612d5d90614d39565b80601f0160208091040260200160405190810160405280929190818152602001828054612d8990614d39565b8015612dd45780601f10612dab57610100808354040283529160200191612dd4565b820191905f5260205f20905b815481529060010190602001808311612db757829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054612e9790614d39565b80601f0160208091040260200160405190810160405280929190818152602001828054612ec390614d39565b8015612f0e5780601f10612ee557610100808354040283529160200191612f0e565b820191905f5260205f20905b815481529060010190602001808311612ef157829003601f168201915b50505050508152505081526020019060010190612d2d565b505050508152505092505050949350505050565b5f612f43613412565b9050805f015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055612f7382613a10565b5050565b5f33905090565b612f86611fa3565b5f612f8f612643565b90506001815f015f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612fd5612f77565b604051612fe291906144b6565b60405180910390a150565b805f8103613027576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6130318383613ae1565b61307257816040517f6653f6d70000000000000000000000000000000000000000000000000000000081526004016130699190613e8a565b60405180910390fd5b5f8360020154146130be5782600201546040517fc470c0220000000000000000000000000000000000000000000000000000000081526004016130b59190613e8a565b60405180910390fd5b5f83600401541461310a5782600401546040517f7022ec410000000000000000000000000000000000000000000000000000000081526004016131019190613e8a565b60405180910390fd5b6001835f015f8481526020019081526020015f205f6101000a81548160ff0219169083600781111561313f5761313e61441b565b5b0217905550818360010181905550505050565b805f810361318c576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6131968383613b2f565b6131d757816040517fc0b5ee660000000000000000000000000000000000000000000000000000000081526004016131ce9190613e8a565b60405180910390fd5b6002835f015f8481526020019081526020015f205f6101000a81548160ff0219169083600781111561320c5761320b61441b565b5b02179055508183600201819055505f8360010181905550505050565b5f825f015f8381526020019081526020015f205f9054906101000a900460ff16905092915050565b5f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b5f80613281611f7c565b9050805f016003015491505090565b5f8061329a611f7c565b9050805f016002015491505090565b805f81036132e3576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82826132ef8282613ae1565b1561333157806040517f61544cfc0000000000000000000000000000000000000000000000000000000081526004016133289190613e8a565b60405180910390fd5b61333b858561372a565b1561337d57836040517fcd494e490000000000000000000000000000000000000000000000000000000081526004016133749190613e8a565b60405180910390fd5b6007855f015f8681526020019081526020015f205f6101000a81548160ff021916908360078111156133b2576133b161441b565b5b0217905550838560010154036133cc575f85600101819055505b838560020154036133e1575f85600201819055505b838560030154036133f6575f85600301819055505b8385600401540361340b575f85600401819055505b5050505050565b5f7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00905090565b805f8103613473576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828261347f8282613ae1565b156134c157806040517f61544cfc0000000000000000000000000000000000000000000000000000000081526004016134b89190613e8a565b60405180910390fd5b6134cb8585613b2f565b1561350d57836040517f0ddd14ca0000000000000000000000000000000000000000000000000000000081526004016135049190613e8a565b60405180910390fd5b613517858561372a565b1561355957836040517fcd494e490000000000000000000000000000000000000000000000000000000081526004016135509190613e8a565b60405180910390fd5b6006855f015f8681526020019081526020015f205f6101000a81548160ff0219169083600781111561358e5761358d61441b565b5b0217905550838560020154036135a8575f85600201819055505b838560030154036135bd575f85600301819055505b838560040154036135d2575f85600401819055505b5050505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613635577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161362b5761362a614d69565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310613672576d04ee2d6d415b85acef8100000000838161366857613667614d69565b5b0492506020810190505b662386f26fc1000083106136a157662386f26fc10000838161369757613696614d69565b5b0492506010810190505b6305f5e10083106136ca576305f5e10083816136c0576136bf614d69565b5b0492506008810190505b61271083106136ef5761271083816136e5576136e4614d69565b5b0492506004810190505b60648310613712576064838161370857613707614d69565b5b0492506002810190505b600a8310613721576001810190505b80915050919050565b5f6003600781111561373f5761373e61441b565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff1660078111156137705761376f61441b565b5b14905092915050565b5f6002600781111561378e5761378d61441b565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff1660078111156137bf576137be61441b565b5b14905092915050565b5f600460078111156137dd576137dc61441b565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff16600781111561380e5761380d61441b565b5b14905092915050565b61381f610a86565b613855576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f6138837f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613b7e565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6138b382613b87565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f8151111561390f576139098282613c50565b50613918565b613917613cd0565b5b5050565b613924613d0c565b61395a576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61396461391c565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036139d4575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016139cb91906144b6565b60405180910390fd5b6139dd81612f3a565b50565b6139e861391c565b5f6139f1612643565b90505f815f015f6101000a81548160ff02191690831515021790555050565b5f613a19613250565b90505f815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082825f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b5f806007811115613af557613af461441b565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613b2657613b2561441b565b5b14905092915050565b5f60016007811115613b4457613b4361441b565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613b7557613b7461441b565b5b14905092915050565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b03613be257806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401613bd991906144b6565b60405180910390fd5b80613c0e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613b7e565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808473ffffffffffffffffffffffffffffffffffffffff1684604051613c799190615314565b5f60405180830381855af49150503d805f8114613cb1576040519150601f19603f3d011682016040523d82523d5f602084013e613cb6565b606091505b5091509150613cc6858383613d2a565b9250505092915050565b5f341115613d0a576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f613d1561268e565b5f0160089054906101000a900460ff16905090565b606082613d3f57613d3a82613db7565b613daf565b5f8251148015613d6557505f8473ffffffffffffffffffffffffffffffffffffffff163b145b15613da757836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401613d9e91906144b6565b60405180910390fd5b819050613db0565b5b9392505050565b5f81511115613dc95780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060800160405280606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60405180608001604052805f81526020015f81526020015f8152602001606081525090565b5f819050919050565b613e8481613e72565b82525050565b5f602082019050613e9d5f830184613e7b565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015613eda578082015181840152602081019050613ebf565b5f8484015250505050565b5f601f19601f8301169050919050565b5f613eff82613ea3565b613f098185613ead565b9350613f19818560208601613ebd565b613f2281613ee5565b840191505092915050565b5f6020820190508181035f830152613f458184613ef5565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b613f6781613e72565b8114613f71575f80fd5b50565b5f81359050613f8281613f5e565b92915050565b5f60208284031215613f9d57613f9c613f56565b5b5f613faa84828501613f74565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61400582613fdc565b9050919050565b61401581613ffb565b82525050565b5f614026838361400c565b60208301905092915050565b5f602082019050919050565b5f61404882613fb3565b6140528185613fbd565b935061405d83613fcd565b805f5b8381101561408d578151614074888261401b565b975061407f83614032565b925050600181019050614060565b5085935050505092915050565b5f6020820190508181035f8301526140b2818461403e565b905092915050565b6140c381613ffb565b81146140cd575f80fd5b50565b5f813590506140de816140ba565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61412282613ee5565b810181811067ffffffffffffffff82111715614141576141406140ec565b5b80604052505050565b5f614153613f4d565b905061415f8282614119565b919050565b5f67ffffffffffffffff82111561417e5761417d6140ec565b5b61418782613ee5565b9050602081019050919050565b828183375f83830152505050565b5f6141b46141af84614164565b61414a565b9050828152602081018484840111156141d0576141cf6140e8565b5b6141db848285614194565b509392505050565b5f82601f8301126141f7576141f66140e4565b5b81356142078482602086016141a2565b91505092915050565b5f806040838503121561422657614225613f56565b5b5f614233858286016140d0565b925050602083013567ffffffffffffffff81111561425457614253613f5a565b5b614260858286016141e3565b9150509250929050565b5f819050919050565b61427c8161426a565b82525050565b5f6020820190506142955f830184614273565b92915050565b5f8115159050919050565b6142af8161429b565b82525050565b5f6020820190506142c85f8301846142a6565b92915050565b5f80fd5b5f80fd5b5f8083601f8401126142eb576142ea6140e4565b5b8235905067ffffffffffffffff811115614308576143076142ce565b5b602083019150836020820283011115614324576143236142d2565b5b9250929050565b5f805f6040848603121561434257614341613f56565b5b5f61434f86828701613f74565b935050602084013567ffffffffffffffff8111156143705761436f613f5a565b5b61437c868287016142d6565b92509250509250925092565b5f80fd5b5f604082840312156143a1576143a0614388565b5b81905092915050565b5f805f80608085870312156143c2576143c1613f56565b5b5f6143cf87828801613f74565b945050602085013567ffffffffffffffff8111156143f0576143ef613f5a565b5b6143fc878288016142d6565b9350935050604061440f8782880161438c565b91505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600881106144595761445861441b565b5b50565b5f81905061446982614448565b919050565b5f6144788261445c565b9050919050565b6144888161446e565b82525050565b5f6020820190506144a15f83018461447f565b92915050565b6144b081613ffb565b82525050565b5f6020820190506144c95f8301846144a7565b92915050565b5f80604083850312156144e5576144e4613f56565b5b5f6144f285828601613f74565b9250506020614503858286016140d0565b9150509250929050565b5f82825260208201905092915050565b5f61452782613ea3565b614531818561450d565b9350614541818560208601613ebd565b61454a81613ee5565b840191505092915050565b5f608083015f8301518482035f86015261456f828261451d565b9150506020830151614584602086018261400c565b506040830151614597604086018261400c565b50606083015184820360608601526145af828261451d565b9150508091505092915050565b5f6020820190508181035f8301526145d48184614555565b905092915050565b5f602082840312156145f1576145f0613f56565b5b5f6145fe848285016140d0565b91505092915050565b61461081613e72565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f608083015f8301518482035f860152614659828261451d565b915050602083015161466e602086018261400c565b506040830151614681604086018261400c565b5060608301518482036060860152614699828261451d565b9150508091505092915050565b5f6146b1838361463f565b905092915050565b5f602082019050919050565b5f6146cf82614616565b6146d98185614620565b9350836020820285016146eb85614630565b805f5b85811015614726578484038952815161470785826146a6565b9450614712836146b9565b925060208a019950506001810190506146ee565b50829750879550505050505092915050565b5f608083015f83015161474d5f860182614607565b5060208301516147606020860182614607565b5060408301516147736040860182614607565b506060830151848203606086015261478b82826146c5565b9150508091505092915050565b5f6020820190508181035f8301526147b08184614738565b905092915050565b5f81905092915050565b5f6147cc82613ea3565b6147d681856147b8565b93506147e6818560208601613ebd565b80840191505092915050565b7f20760000000000000000000000000000000000000000000000000000000000005f82015250565b5f6148266002836147b8565b9150614831826147f2565b600282019050919050565b7f2e000000000000000000000000000000000000000000000000000000000000005f82015250565b5f6148706001836147b8565b915061487b8261483c565b600182019050919050565b5f61489182876147c2565b915061489c8261481a565b91506148a882866147c2565b91506148b382614864565b91506148bf82856147c2565b91506148ca82614864565b91506148d682846147c2565b915081905095945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61491b82613e72565b915061492683613e72565b925082820190508082111561493e5761493d6148e4565b5b92915050565b5f6040820190506149575f830185613e7b565b6149646020830184613e7b565b9392505050565b5f82825260208201905092915050565b5f819050919050565b5f80fd5b5f80fd5b5f80fd5b5f80833560016020038436030381126149ac576149ab61498c565b5b83810192508235915060208301925067ffffffffffffffff8211156149d4576149d3614984565b5b6001820236038313156149ea576149e9614988565b5b509250929050565b5f6149fd838561450d565b9350614a0a838584614194565b614a1383613ee5565b840190509392505050565b5f614a2c60208401846140d0565b905092915050565b5f60808301614a455f840184614990565b8583035f870152614a578382846149f2565b92505050614a686020840184614a1e565b614a75602086018261400c565b50614a836040840184614a1e565b614a90604086018261400c565b50614a9e6060840184614990565b8583036060870152614ab18382846149f2565b925050508091505092915050565b5f614aca8383614a34565b905092915050565b5f82356001608003833603038112614aed57614aec61498c565b5b82810191505092915050565b5f602082019050919050565b5f614b10838561496b565b935083602084028501614b228461497b565b805f5b87811015614b65578484038952614b3c8284614ad2565b614b468582614abf565b9450614b5183614af9565b925060208a01995050600181019050614b25565b50829750879450505050509392505050565b5f604082019050614b8a5f830186613e7b565b8181036020830152614b9d818486614b05565b9050949350505050565b5f67ffffffffffffffff82169050919050565b614bc381614ba7565b82525050565b5f602082019050614bdc5f830184614bba565b92915050565b5f81519050614bf0816140ba565b92915050565b5f60208284031215614c0b57614c0a613f56565b5b5f614c1884828501614be2565b91505092915050565b5f614c2f6020840184613f74565b905092915050565b60408201614c475f830183614c21565b614c535f850182614607565b50614c616020830183614c21565b614c6e6020850182614607565b50505050565b5f6080820190508181035f830152614c8c8186614738565b90508181036020830152614ca08185614738565b9050614caf6040830184614c37565b949350505050565b5f6040820190508181035f830152614ccf8185614738565b9050614cde6020830184613e7b565b9392505050565b5f604082019050614cf85f830185613e7b565b614d0560208301846144a7565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680614d5057607f821691505b602082108103614d6357614d62614d0c565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b614d9f8161426a565b8114614da9575f80fd5b50565b5f81519050614dba81614d96565b92915050565b5f60208284031215614dd557614dd4613f56565b5b5f614de284828501614dac565b91505092915050565b5f614df582613e72565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614e2757614e266148e4565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b5f82356001608003833603038112614e8657614e85614e5f565b5b80830191505092915050565b5f8083356001602003843603038112614eae57614ead614e5f565b5b80840192508235915067ffffffffffffffff821115614ed057614ecf614e63565b5b602083019250600182023603831315614eec57614eeb614e67565b5b509250929050565b5f82905092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302614f5a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614f1f565b614f648683614f1f565b95508019841693508086168417925050509392505050565b5f819050919050565b5f614f9f614f9a614f9584613e72565b614f7c565b613e72565b9050919050565b5f819050919050565b614fb883614f85565b614fcc614fc482614fa6565b848454614f2b565b825550505050565b5f90565b614fe0614fd4565b614feb818484614faf565b505050565b5b8181101561500e576150035f82614fd8565b600181019050614ff1565b5050565b601f8211156150535761502481614efe565b61502d84614f10565b8101602085101561503c578190505b61505061504885614f10565b830182614ff0565b50505b505050565b5f82821c905092915050565b5f6150735f1984600802615058565b1980831691505092915050565b5f61508b8383615064565b9150826002028217905092915050565b6150a58383614ef4565b67ffffffffffffffff8111156150be576150bd6140ec565b5b6150c88254614d39565b6150d3828285615012565b5f601f831160018114615100575f84156150ee578287013590505b6150f88582615080565b86555061515f565b601f19841661510e86614efe565b5f5b8281101561513557848901358255600182019150602085019450602081019050615110565b86831015615152578489013561514e601f891682615064565b8355505b6001600288020188555050505b50505050505050565b61517383838361509b565b505050565b5f8135615184816140ba565b80915050919050565b5f815f1b9050919050565b5f73ffffffffffffffffffffffffffffffffffffffff6151b78461518d565b9350801983169250808416831791505092915050565b5f6151e76151e26151dd84613fdc565b614f7c565b613fdc565b9050919050565b5f6151f8826151cd565b9050919050565b5f615209826151ee565b9050919050565b5f819050919050565b615222826151ff565b61523561522e82615210565b8354615198565b8255505050565b5f81015f830161524c8185614e92565b615257818386615168565b5050505060018101602083018061526d81615178565b90506152798184615219565b50505060028101604083018061528e81615178565b905061529a8184615219565b50505060038101606083016152af8185614e92565b6152ba818386615168565b505050505050565b6152cc828261523c565b5050565b5f81519050919050565b5f81905092915050565b5f6152ee826152d0565b6152f881856152da565b9350615308818560208601613ebd565b80840191505092915050565b5f61531f82846152e4565b91508190509291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP4\x80\x15b\0\0CW_\x80\xFD[Pb\0\0Tb\0\0Z` \x1B` \x1CV[b\0\x01\xC4V[_b\0\0kb\0\x01^` \x1B` \x1CV[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15b\0\0\xB6W`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14b\0\x01[Wg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Qb\0\x01R\x91\x90b\0\x01\xA9V[`@Q\x80\x91\x03\x90\xA1[PV[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[b\0\x01\xA3\x81b\0\x01\x85V[\x82RPPV[_` \x82\x01\x90Pb\0\x01\xBE_\x83\x01\x84b\0\x01\x98V[\x92\x91PPV[`\x80QaS*b\0\x01\xEB_9_\x81\x81a#\xAF\x01R\x81\x81a$\x04\x01Ra%\xBE\x01RaS*_\xF3\xFE`\x80`@R`\x046\x10a\x01\xE2W_5`\xE0\x1C\x80c\x88\x8B\x99\xE0\x11a\x01\x01W\x80c\xBE\x91\x18{\x11a\0\x94W\x80c\xEE\xC1h\xFB\x11a\0cW\x80c\xEE\xC1h\xFB\x14a\x06\x80W\x80c\xF1\x92\xCFh\x14a\x06\xA8W\x80c\xF2\xFD\xE3\x8B\x14a\x06\xD0W\x80c\xFE\xD9qk\x14a\x06\xF8Wa\x01\xE2V[\x80c\xBE\x91\x18{\x14a\x05\xC8W\x80c\xD1\x84\x1D\xD3\x14a\x05\xF2W\x80c\xD7@\xE4\x02\x14a\x06.W\x80c\xE3\x0C9x\x14a\x06VWa\x01\xE2V[\x80c\x99\x1D\xC3m\x11a\0\xD0W\x80c\x99\x1D\xC3m\x14a\x05\x10W\x80c\x9E\xFBHN\x14a\x05:W\x80c\xA9J\x02\xAD\x14a\x05bW\x80c\xAD<\xB1\xCC\x14a\x05\x9EWa\x01\xE2V[\x80c\x88\x8B\x99\xE0\x14a\x04XW\x80c\x8D\xA5\xCB[\x14a\x04\x94W\x80c\x90!\x87H\x14a\x04\xBEW\x80c\x95{*\xBE\x14a\x04\xFAWa\x01\xE2V[\x80c`\xB2Te\x11a\x01yW\x80cqP\x18\xA6\x11a\x01HW\x80cqP\x18\xA6\x14a\x03\xEEW\x80cy\xBAP\x97\x14a\x04\x04W\x80c\x84V\xCBY\x14a\x04\x1AW\x80c\x84\xCA\xE1\x87\x14a\x040Wa\x01\xE2V[\x80c`\xB2Te\x14a\x03\x12W\x80ck1t\xE5\x14a\x03NW\x80ck\xA8\x18\xE1\x14a\x03\x8AW\x80cp<;.\x14a\x03\xC6Wa\x01\xE2V[\x80c?K\xA8:\x11a\x01\xB5W\x80c?K\xA8:\x14a\x02\x8CW\x80cO\x1E\xF2\x86\x14a\x02\xA2W\x80cR\xD1\x90-\x14a\x02\xBEW\x80c\\\x97Z\xBB\x14a\x02\xE8Wa\x01\xE2V[\x80c\x08nN\x1C\x14a\x01\xE6W\x80c\r\x8En,\x14a\x02\x10W\x80c\x18\xB7!M\x14a\x02:W\x80c:Qb\xE6\x14a\x02vW[_\x80\xFD[4\x80\x15a\x01\xF1W_\x80\xFD[Pa\x01\xFAa\x07\"V[`@Qa\x02\x07\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x1BW_\x80\xFD[Pa\x02$a\x07nV[`@Qa\x021\x91\x90a?-V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02EW_\x80\xFD[Pa\x02``\x04\x806\x03\x81\x01\x90a\x02[\x91\x90a?\x88V[a\x07\xE9V[`@Qa\x02m\x91\x90a@\x9AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x81W_\x80\xFD[Pa\x02\x8Aa\x08\x93V[\0[4\x80\x15a\x02\x97W_\x80\xFD[Pa\x02\xA0a\n$V[\0[a\x02\xBC`\x04\x806\x03\x81\x01\x90a\x02\xB7\x91\x90aB\x10V[a\n6V[\0[4\x80\x15a\x02\xC9W_\x80\xFD[Pa\x02\xD2a\nUV[`@Qa\x02\xDF\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xF3W_\x80\xFD[Pa\x02\xFCa\n\x86V[`@Qa\x03\t\x91\x90aB\xB5V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x1DW_\x80\xFD[Pa\x038`\x04\x806\x03\x81\x01\x90a\x033\x91\x90a?\x88V[a\n\xA8V[`@Qa\x03E\x91\x90aB\xB5V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03YW_\x80\xFD[Pa\x03t`\x04\x806\x03\x81\x01\x90a\x03o\x91\x90a?\x88V[a\x0B2V[`@Qa\x03\x81\x91\x90a@\x9AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x95W_\x80\xFD[Pa\x03\xB0`\x04\x806\x03\x81\x01\x90a\x03\xAB\x91\x90a?\x88V[a\x0B\xDCV[`@Qa\x03\xBD\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\xD1W_\x80\xFD[Pa\x03\xEC`\x04\x806\x03\x81\x01\x90a\x03\xE7\x91\x90aC+V[a\x0C}V[\0[4\x80\x15a\x03\xF9W_\x80\xFD[Pa\x04\x02a\x0EnV[\0[4\x80\x15a\x04\x0FW_\x80\xFD[Pa\x04\x18a\x0E\x81V[\0[4\x80\x15a\x04%W_\x80\xFD[Pa\x04.a\x0F\x0FV[\0[4\x80\x15a\x04;W_\x80\xFD[Pa\x04V`\x04\x806\x03\x81\x01\x90a\x04Q\x91\x90aC\xAAV[a\x10JV[\0[4\x80\x15a\x04cW_\x80\xFD[Pa\x04~`\x04\x806\x03\x81\x01\x90a\x04y\x91\x90a?\x88V[a\x11bV[`@Qa\x04\x8B\x91\x90aD\x8EV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\x9FW_\x80\xFD[Pa\x04\xA8a\x11\x82V[`@Qa\x04\xB5\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xC9W_\x80\xFD[Pa\x04\xE4`\x04\x806\x03\x81\x01\x90a\x04\xDF\x91\x90a?\x88V[a\x11\xB7V[`@Qa\x04\xF1\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\x05W_\x80\xFD[Pa\x05\x0Ea\x12FV[\0[4\x80\x15a\x05\x1BW_\x80\xFD[Pa\x05$a\x12\xFAV[`@Qa\x051\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05EW_\x80\xFD[Pa\x05``\x04\x806\x03\x81\x01\x90a\x05[\x91\x90aD\xCFV[a\x13FV[\0[4\x80\x15a\x05mW_\x80\xFD[Pa\x05\x88`\x04\x806\x03\x81\x01\x90a\x05\x83\x91\x90a?\x88V[a\x14[V[`@Qa\x05\x95\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\xA9W_\x80\xFD[Pa\x05\xB2a\x14\xEAV[`@Qa\x05\xBF\x91\x90a?-V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\xD3W_\x80\xFD[Pa\x05\xDCa\x15#V[`@Qa\x05\xE9\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\xFDW_\x80\xFD[Pa\x06\x18`\x04\x806\x03\x81\x01\x90a\x06\x13\x91\x90aD\xCFV[a\x15oV[`@Qa\x06%\x91\x90aE\xBCV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x069W_\x80\xFD[Pa\x06T`\x04\x806\x03\x81\x01\x90a\x06O\x91\x90a?\x88V[a\x18\x8FV[\0[4\x80\x15a\x06aW_\x80\xFD[Pa\x06ja\x19PV[`@Qa\x06w\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x06\x8BW_\x80\xFD[Pa\x06\xA6`\x04\x806\x03\x81\x01\x90a\x06\xA1\x91\x90a?\x88V[a\x19\x85V[\0[4\x80\x15a\x06\xB3W_\x80\xFD[Pa\x06\xCE`\x04\x806\x03\x81\x01\x90a\x06\xC9\x91\x90aD\xCFV[a\x1AFV[\0[4\x80\x15a\x06\xDBW_\x80\xFD[Pa\x06\xF6`\x04\x806\x03\x81\x01\x90a\x06\xF1\x91\x90aE\xDCV[a\x1B[V[\0[4\x80\x15a\x07\x03W_\x80\xFD[Pa\x07\x0Ca\x1C\x14V[`@Qa\x07\x19\x91\x90aG\x98V[`@Q\x80\x91\x03\x90\xF3[_\x80a\x07,a\x1E\x99V[\x90P_\x81\x03a\x07gW`@Q\x7F!\xFB\x08\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[```@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FCoprocessorContexts\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x07\xAF_a\x1E\xB2V[a\x07\xB9`\x01a\x1E\xB2V[a\x07\xC2_a\x1E\xB2V[`@Q` \x01a\x07\xD5\x94\x93\x92\x91\x90aH\x86V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x90V[``_a\x07\xF4a\x1F|V[\x90P\x80`\t\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\x08\x86W` \x02\x82\x01\x91\x90_R` _ \x90[\x81_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x08=W[PPPPP\x91PP\x91\x90PV[a\x08\x9Ba\x1F\xA3V[_a\x08\xA4a\x1F|V[\x90P_\x81_\x01`\x02\x01T\x90P_\x81\x14\x15\x80\x15a\x08\xD3WP\x81`\x0C\x01_\x82\x81R` \x01\x90\x81R` \x01_ TB\x10\x15[\x15a\t\xA8W_a\x08\xE1a\x12\xFAV[\x90P_\x83`\x0E\x01_\x83\x81R` \x01\x90\x81R` \x01_ TBa\t\x03\x91\x90aI\x11V[\x90P\x80\x84`\r\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UPa\t)\x84_\x01\x83a\x1F\xE4V[\x7F0\x80\xF2\xB8\r\xDAGH\xCA)&\xA6A\xFAP\x07sPX\xDC_Z\xB2YN\xEC\xA7A\x97\xA3\xAC\xCC\x82\x82`@Qa\tZ\x92\x91\x90aIDV[`@Q\x80\x91\x03\x90\xA1a\tn\x84_\x01\x84a \xBAV[\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x83`@Qa\t\x9D\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xA1PP[_a\t\xB1a\x1E\x99V[\x90P_\x81\x14\x15\x80\x15a\t\xD6WP\x82`\r\x01_\x82\x81R` \x01\x90\x81R` \x01_ TB\x10\x15[\x15a\n\x1FWa\t\xE7\x83_\x01\x82a!\xB5V[\x7F\x1B\xAA\x08\xD8\xDE\x18\xE8\xE2(v\x91\xB10\x97H\x01\t\x81\xEB\xDF\xD1*\x17=\x85teuH\xA5(\x98\x81`@Qa\n\x16\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xA1[PPPV[a\n,a\"\xB8V[a\n4a#?V[V[a\n>a#\xADV[a\nG\x82a$\x93V[a\nQ\x82\x82a$\x9EV[PPV[_a\n^a%\xBCV[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x90P\x90V[_\x80a\n\x90a&CV[\x90P\x80_\x01_\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x91PP\x90V[_\x81_a\n\xB3a\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x0B\x0EW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0B\x05\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[a\x0B\x16a\x12\xFAV[\x84\x14\x80a\x0B)WPa\x0B&a\x1E\x99V[\x84\x14[\x92PPP\x91\x90PV[``_a\x0B=a\x1F|V[\x90P\x80`\x0B\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\x0B\xCFW` \x02\x82\x01\x91\x90_R` _ \x90[\x81_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x0B\x86W[PPPPP\x91PP\x91\x90PV[_\x81_a\x0B\xE7a\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x0CBW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0C9\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x0CKa\x1F|V[\x90P`\x01\x80\x82`\t\x01_\x88\x81R` \x01\x90\x81R` \x01_ \x80T\x90P\x90\x1Ca\x0Cs\x91\x90aI\x11V[\x93PPPP\x91\x90PV[`\x01a\x0C\x87a&jV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0C\xC8W`@Q\x7FoOs\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02_a\x0C\xD3a&\x8EV[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x80a\r\x1BWP\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15[\x15a\rRW`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPa\r\xA7a\r\xA2a\x11\x82V[a&\xB5V[a\r\xAFa&\xC9V[_a\r\xBC_\x87\x87\x87a&\xDBV[\x90P_a\r\xC7a\x1F|V[\x90Pa\r\xD8\x81_\x01\x83_\x01Qa \xBAV[\x7F\x13\xC5\xFDc\x1C\xA01U/\xE9\xE3\x8D\x91\x19\x10\xA5\x98\x0Ff\x08\xEE\xA3#in\x04\xDB\x0F\xEC\x0C\x95W\x87\x87\x87`@Qa\x0E\x0B\x93\x92\x91\x90aKwV[`@Q\x80\x91\x03\x90\xA1PP_\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x82`@Qa\x0E_\x91\x90aK\xC9V[`@Q\x80\x91\x03\x90\xA1PPPPPV[a\x0Eva\"\xB8V[a\x0E\x7F_a/:V[V[_a\x0E\x8Aa/wV[\x90P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0E\xABa\x19PV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0F\x03W\x80`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0E\xFA\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xFD[a\x0F\x0C\x81a/:V[PV[a\x0F\x17a\x11\x82V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15\x80\x15a\x0F\xFEWPs\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\x08\xB5H`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\xAAW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F\xCE\x91\x90aK\xF6V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a\x10@W3`@Q\x7FF\xC0\xD9\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x107\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xFD[a\x10Ha/~V[V[a\x10Ra\"\xB8V[_a\x10[a\x1F|V[\x90P_a\x10fa\x1C\x14V[\x90P_a\x10x\x82_\x01Q\x88\x88\x88a&\xDBV[\x90P\x7F\xAFX\xA1\x8ANAY\xFApl\rN\x0F\xDA\xB0\x93\x0F\x97g\x93\x19\xCD\xDB\xC9\xC9\x19\x9B\x0C\xD1\x04\xB6\xEF\x82\x82\x86`@Qa\x10\xAD\x93\x92\x91\x90aLtV[`@Q\x80\x91\x03\x90\xA1a\x10\xC4\x83_\x01\x82_\x01Qa/\xEDV[a\x10\xD3\x83_\x01\x82_\x01Qa1RV[_\x84_\x015Ba\x10\xE3\x91\x90aI\x11V[\x90P\x80\x84`\x0C\x01_\x84_\x01Q\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x84` \x015\x84`\x0E\x01_\x85_\x01Q\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F+\x01\x88\xFCK\xEDG\x1E\xE2\x16\xDCl\xB9e\x0B\xEB(\x88\x92\x03N\xBE\xE70\x1B29\x1A\xDD*f\xB8\x82\x82`@Qa\x11P\x92\x91\x90aL\xB7V[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[_\x80a\x11la\x1F|V[\x90Pa\x11z\x81_\x01\x84a2(V[\x91PP\x91\x90PV[_\x80a\x11\x8Ca2PV[\x90P\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91PP\x90V[_\x81_a\x11\xC2a\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x12\x1DW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x12\x14\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x12&a\x1F|V[\x90P\x80`\r\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x93PPPP\x91\x90PV[a\x12Na\"\xB8V[_a\x12Wa\x07\"V[\x90P_a\x12ba\x1F|V[\x90P_a\x12ma2wV[\x90Pa\x12{\x82_\x01\x82a!\xB5V[\x7F\x1B\xAA\x08\xD8\xDE\x18\xE8\xE2(v\x91\xB10\x97H\x01\t\x81\xEB\xDF\xD1*\x17=\x85teuH\xA5(\x98\x81`@Qa\x12\xAA\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xA1a\x12\xBE\x82_\x01\x84a \xBAV[\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x83`@Qa\x12\xED\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xA1PPPV[_\x80a\x13\x04a2wV[\x90P_\x81\x03a\x13?W`@Q\x7F\x04e\x93\xEA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[\x81_a\x13Pa\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x13\xABW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x13\xA2\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x13\xB4a\x1F|V[\x90P\x80`\n\x01_\x86\x81R` \x01\x90\x81R` \x01_ _\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x14TW\x84\x84`@Q\x7FUO\x8C_\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x14K\x92\x91\x90aL\xE5V[`@Q\x80\x91\x03\x90\xFD[PPPPPV[_\x81_a\x14fa\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x14\xC1W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x14\xB8\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x14\xCAa\x1F|V[\x90P\x80`\x0C\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x93PPPP\x91\x90PV[`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01\x7F5.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81V[_\x80a\x15-a2\x90V[\x90P_\x81\x03a\x15hW`@Q\x7F\xB9\xE8a\xB2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[a\x15wa=\xFBV[\x82_a\x15\x81a\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x15\xDCW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x15\xD3\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x15\xE5a\x1F|V[\x90P_\x81`\x07\x01_\x88\x81R` \x01\x90\x81R` \x01_ _\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta\x16P\x90aM9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x16|\x90aM9V[\x80\x15a\x16\xC7W\x80`\x1F\x10a\x16\x9EWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x16\xC7V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x16\xAAW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta\x17\x8A\x90aM9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x17\xB6\x90aM9V[\x80\x15a\x18\x01W\x80`\x1F\x10a\x17\xD8Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x18\x01V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x17\xE4W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81` \x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x18\x82W\x86\x86`@Q\x7F\xC3\x12\xE7>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x18y\x92\x91\x90aL\xE5V[`@Q\x80\x91\x03\x90\xFD[\x80\x94PPPPP\x92\x91PPV[a\x18\x97a\"\xB8V[\x80_a\x18\xA1a\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x18\xFCW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x18\xF3\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x19\x05a\x1F|V[\x90Pa\x19\x13\x81_\x01\x85a2\xA9V[\x7F\xF2\x0B)\x98\x04\xC9\xC1\xD6\xDA;\x82ALz\xA0\xA8E\xCD\xBA\xBA\xE2\xD9\x0EF\xE3`\xA3y\xA7{{\xE5\x84`@Qa\x19B\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xA1PPPPV[_\x80a\x19Za4\x12V[\x90P\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91PP\x90V[a\x19\x8Da\"\xB8V[\x80_a\x19\x97a\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x19\xF2W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x19\xE9\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x19\xFBa\x1F|V[\x90Pa\x1A\t\x81_\x01\x85a49V[\x7F\xEE~\xF89cAq%\xD2t0x\x9F\xC6\xE9A\x948\x1E\x82\xC3\xCD\xA6\x82`\xD0\xE7\xCF\xC3\x1E\xAF!\x84`@Qa\x1A8\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xA1PPPPV[\x81_a\x1APa\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x1A\xABW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1A\xA2\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x1A\xB4a\x1F|V[\x90P\x80`\x08\x01_\x86\x81R` \x01\x90\x81R` \x01_ _\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x1BTW\x84\x84`@Q\x7F)\xA9\x93\xC1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1BK\x92\x91\x90aL\xE5V[`@Q\x80\x91\x03\x90\xFD[PPPPPV[a\x1Bca\"\xB8V[_a\x1Bla4\x12V[\x90P\x81\x81_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x1B\xCEa\x11\x82V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F8\xD1k\x8C\xAC\"\xD9\x9F\xC7\xC1$\xB9\xCD\r\xE2\xD3\xFA\x1F\xAE\xF4 \xBF\xE7\x91\xD8\xC3b\xD7e\xE2'\0`@Q`@Q\x80\x91\x03\x90\xA3PPV[a\x1C\x1Ca>MV[_a\x1C%a\x12\xFAV[\x90P_a\x1C0a\x1F|V[\x90P\x80`\x05\x01_\x83\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01_\x90[\x82\x82\x10\x15a\x1E\x8AW\x83\x82\x90_R` _ \x90`\x04\x02\x01`@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta\x1C\xC1\x90aM9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1C\xED\x90aM9V[\x80\x15a\x1D8W\x80`\x1F\x10a\x1D\x0FWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1D8V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1D\x1BW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta\x1D\xFB\x90aM9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1E'\x90aM9V[\x80\x15a\x1ErW\x80`\x1F\x10a\x1EIWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1ErV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1EUW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90a\x1C\x91V[PPPP\x81RPP\x92PPP\x90V[_\x80a\x1E\xA3a\x1F|V[\x90P\x80_\x01`\x04\x01T\x91PP\x90V[``_`\x01a\x1E\xC0\x84a5\xD9V[\x01\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E\xDEWa\x1E\xDDa@\xECV[[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x1F\x10W\x81` \x01`\x01\x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P_\x82` \x01\x82\x01\x90P[`\x01\x15a\x1FqW\x80\x80`\x01\x90\x03\x91PP\x7F0123456789abcdef\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\n\x86\x06\x1A\x81S`\n\x85\x81a\x1FfWa\x1FeaMiV[[\x04\x94P_\x85\x03a\x1F\x1DW[\x81\x93PPPP\x91\x90PV[_\x7F\x1D\xA8\xA9\xA0e\xA2\xF0\xA8\x95\xC4W\x06^\xDD\xD3\xCFJM\rS@\xAA\xA0\xCAT\xD3\xCD[Jj\xAF\0\x90P\x90V[a\x1F\xABa\n\x86V[\x15a\x1F\xE2W`@Q\x7F\xD9<\x06e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[\x80_\x81\x03a \x1EW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a (\x83\x83a7*V[a iW\x81`@Q\x7F3\x14\x86\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a `\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[`\x04\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a \x9EWa \x9DaD\x1BV[[\x02\x17\x90UP\x81\x83`\x04\x01\x81\x90UP_\x83`\x03\x01\x81\x90UPPPPV[\x80_\x81\x03a \xF4W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a \xFE\x83\x83a7yV[\x15\x80\x15a!\x12WPa!\x10\x83\x83a7\xC8V[\x15[\x80\x15a!\"WP_\x83`\x03\x01T\x14\x15[\x15a!dW\x81`@Q\x7F\x12\xB4\x9E=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a![\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[`\x03\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a!\x99Wa!\x98aD\x1BV[[\x02\x17\x90UP\x81\x83`\x03\x01\x81\x90UP_\x83`\x02\x01\x81\x90UPPPPV[\x80_\x81\x03a!\xEFW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a!\xF9\x83\x83a7*V[\x15\x80\x15a\"\rWPa\"\x0B\x83\x83a7\xC8V[\x15[\x15a\"OW\x81`@Q\x7F+6R\xD1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"F\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[`\x05\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a\"\x84Wa\"\x83aD\x1BV[[\x02\x17\x90UP\x81\x83`\x03\x01T\x03a\"\x9EW_\x83`\x03\x01\x81\x90UP[\x81\x83`\x04\x01T\x03a\"\xB3W_\x83`\x04\x01\x81\x90UP[PPPV[a\"\xC0a/wV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\"\xDEa\x11\x82V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a#=Wa#\x01a/wV[`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a#4\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xFD[V[a#Ga8\x17V[_a#Pa&CV[\x90P_\x81_\x01_a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F]\xB9\xEE\nI[\xF2\xE6\xFF\x9C\x91\xA7\x83L\x1B\xA4\xFD\xD2D\xA5\xE8\xAANS{\xD3\x8A\xEA\xE4\xB0s\xAAa#\x95a/wV[`@Qa#\xA2\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xA1PV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x80a$ZWP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a$Aa8WV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a$\x91W`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[a$\x9Ba\"\xB8V[PV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cR\xD1\x90-`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a%\x06WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a%\x03\x91\x90aM\xC0V[`\x01[a%GW\x81`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%>\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xFD[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x81\x14a%\xADW\x80`@Q\x7F\xAA\x1DI\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%\xA4\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[a%\xB7\x83\x83a8\xAAV[PPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a&AW`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_\x7F\xCD^\xD1\\n\x18~w\xE9\xAE\xE8\x81\x84\xC2\x1FO!\x82\xABX'\xCB;~\x07\xFB\xED\xCDc\xF03\0\x90P\x90V[_a&sa&\x8EV[_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[a&\xBDa9\x1CV[a&\xC6\x81a9\\V[PV[a&\xD1a9\x1CV[a&\xD9a9\xE0V[V[a&\xE3a>MV[_\x83\x83\x90P\x03a'\x1FW`@Q\x7F\x8A\xF0\x82\xEF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a'(a\x1F|V[\x90P\x80`\x06\x01_\x81T\x80\x92\x91\x90a'>\x90aM\xEBV[\x91\x90PUP_\x81`\x06\x01T\x90P\x80\x82`\x05\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x01\x81\x90UP\x86\x82`\x05\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x01\x01\x81\x90UP\x85\x82`\x05\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x02\x01\x81\x90UP_[\x85\x85\x90P\x81\x10\x15a($W\x82`\x05\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x03\x01\x86\x86\x83\x81\x81\x10a'\xD1Wa'\xD0aN2V[[\x90P` \x02\x81\x01\x90a'\xE3\x91\x90aNkV[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x90`\x04\x02\x01_\x90\x91\x90\x91\x90\x91P\x81\x81a(\x15\x91\x90aR\xC2V[PP\x80\x80`\x01\x01\x91PPa'\x9DV[P_[\x85\x85\x90P\x81\x10\x15a,\xCDW_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86\x83\x81\x81\x10a(\\Wa([aN2V[[\x90P` \x02\x81\x01\x90a(n\x91\x90aNkV[` \x01` \x81\x01\x90a(\x80\x91\x90aE\xDCV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a(\xDAW\x81\x81`@Q\x7FL\x10\x06\xF3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a(\xD1\x92\x91\x90aIDV[`@Q\x80\x91\x03\x90\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86\x83\x81\x81\x10a)\x04Wa)\x03aN2V[[\x90P` \x02\x81\x01\x90a)\x16\x91\x90aNkV[`@\x01` \x81\x01\x90a)(\x91\x90aE\xDCV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a)\x82W\x81\x81`@Q\x7F\x8At\x88\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a)y\x92\x91\x90aIDV[`@Q\x80\x91\x03\x90\xFD[\x85\x85\x82\x81\x81\x10a)\x95Wa)\x94aN2V[[\x90P` \x02\x81\x01\x90a)\xA7\x91\x90aNkV[\x83`\x07\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a)\xCEWa)\xCDaN2V[[\x90P` \x02\x81\x01\x90a)\xE0\x91\x90aNkV[` \x01` \x81\x01\x90a)\xF2\x91\x90aE\xDCV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ \x81\x81a*7\x91\x90aR\xC2V[\x90PP`\x01\x83`\x08\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a*cWa*baN2V[[\x90P` \x02\x81\x01\x90a*u\x91\x90aNkV[` \x01` \x81\x01\x90a*\x87\x91\x90aE\xDCV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x82`\t\x01_\x83\x81R` \x01\x90\x81R` \x01_ \x86\x86\x83\x81\x81\x10a*\xFCWa*\xFBaN2V[[\x90P` \x02\x81\x01\x90a+\x0E\x91\x90aNkV[` \x01` \x81\x01\x90a+ \x91\x90aE\xDCV[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x83`\n\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a+\xA6Wa+\xA5aN2V[[\x90P` \x02\x81\x01\x90a+\xB8\x91\x90aNkV[`@\x01` \x81\x01\x90a+\xCA\x91\x90aE\xDCV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x82`\x0B\x01_\x83\x81R` \x01\x90\x81R` \x01_ \x86\x86\x83\x81\x81\x10a,?Wa,>aN2V[[\x90P` \x02\x81\x01\x90a,Q\x91\x90aNkV[`@\x01` \x81\x01\x90a,c\x91\x90aE\xDCV[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa('V[P\x81`\x05\x01_\x82\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01_\x90[\x82\x82\x10\x15a/&W\x83\x82\x90_R` _ \x90`\x04\x02\x01`@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta-]\x90aM9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta-\x89\x90aM9V[\x80\x15a-\xD4W\x80`\x1F\x10a-\xABWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a-\xD4V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a-\xB7W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta.\x97\x90aM9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta.\xC3\x90aM9V[\x80\x15a/\x0EW\x80`\x1F\x10a.\xE5Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a/\x0EV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a.\xF1W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90a--V[PPPP\x81RPP\x92PPP\x94\x93PPPPV[_a/Ca4\x12V[\x90P\x80_\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90Ua/s\x82a:\x10V[PPV[_3\x90P\x90V[a/\x86a\x1F\xA3V[_a/\x8Fa&CV[\x90P`\x01\x81_\x01_a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7Fb\xE7\x8C\xEA\x01\xBE\xE3 \xCDNB\x02p\xB5\xEAt\0\r\x11\xB0\xC9\xF7GT\xEB\xDB\xFCTK\x05\xA2Xa/\xD5a/wV[`@Qa/\xE2\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xA1PV[\x80_\x81\x03a0'W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a01\x83\x83a:\xE1V[a0rW\x81`@Q\x7FfS\xF6\xD7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a0i\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_\x83`\x02\x01T\x14a0\xBEW\x82`\x02\x01T`@Q\x7F\xC4p\xC0\"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a0\xB5\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_\x83`\x04\x01T\x14a1\nW\x82`\x04\x01T`@Q\x7Fp\"\xECA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a1\x01\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[`\x01\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a1?Wa1>aD\x1BV[[\x02\x17\x90UP\x81\x83`\x01\x01\x81\x90UPPPPV[\x80_\x81\x03a1\x8CW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a1\x96\x83\x83a;/V[a1\xD7W\x81`@Q\x7F\xC0\xB5\xEEf\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a1\xCE\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[`\x02\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a2\x0CWa2\x0BaD\x1BV[[\x02\x17\x90UP\x81\x83`\x02\x01\x81\x90UP_\x83`\x01\x01\x81\x90UPPPPV[_\x82_\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x92\x91PPV[_\x7F\x90\x16\xD0\x9Dr\xD4\x0F\xDA\xE2\xFD\x8C\xEA\xC6\xB6#Lw\x06!O\xD3\x9C\x1C\xD1\xE6\t\xA0R\x8C\x19\x93\0\x90P\x90V[_\x80a2\x81a\x1F|V[\x90P\x80_\x01`\x03\x01T\x91PP\x90V[_\x80a2\x9Aa\x1F|V[\x90P\x80_\x01`\x02\x01T\x91PP\x90V[\x80_\x81\x03a2\xE3W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82\x82a2\xEF\x82\x82a:\xE1V[\x15a31W\x80`@Q\x7FaTL\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a3(\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[a3;\x85\x85a7*V[\x15a3}W\x83`@Q\x7F\xCDINI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a3t\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[`\x07\x85_\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a3\xB2Wa3\xB1aD\x1BV[[\x02\x17\x90UP\x83\x85`\x01\x01T\x03a3\xCCW_\x85`\x01\x01\x81\x90UP[\x83\x85`\x02\x01T\x03a3\xE1W_\x85`\x02\x01\x81\x90UP[\x83\x85`\x03\x01T\x03a3\xF6W_\x85`\x03\x01\x81\x90UP[\x83\x85`\x04\x01T\x03a4\x0BW_\x85`\x04\x01\x81\x90UP[PPPPPV[_\x7F#~\x15\x82\"\xE3\xE6\x96\x8Br\xB9\xDB\r\x80C\xAA\xCF\x07J\xD9\xF6P\xF0\xD1`kM\x82\xEEC,\0\x90P\x90V[\x80_\x81\x03a4sW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82\x82a4\x7F\x82\x82a:\xE1V[\x15a4\xC1W\x80`@Q\x7FaTL\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a4\xB8\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[a4\xCB\x85\x85a;/V[\x15a5\rW\x83`@Q\x7F\r\xDD\x14\xCA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a5\x04\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[a5\x17\x85\x85a7*V[\x15a5YW\x83`@Q\x7F\xCDINI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a5P\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[`\x06\x85_\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a5\x8EWa5\x8DaD\x1BV[[\x02\x17\x90UP\x83\x85`\x02\x01T\x03a5\xA8W_\x85`\x02\x01\x81\x90UP[\x83\x85`\x03\x01T\x03a5\xBDW_\x85`\x03\x01\x81\x90UP[\x83\x85`\x04\x01T\x03a5\xD2W_\x85`\x04\x01\x81\x90UP[PPPPPV[_\x80_\x90Pz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x10a65Wz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x81a6+Wa6*aMiV[[\x04\x92P`@\x81\x01\x90P[m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x10a6rWm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x81a6hWa6gaMiV[[\x04\x92P` \x81\x01\x90P[f#\x86\xF2o\xC1\0\0\x83\x10a6\xA1Wf#\x86\xF2o\xC1\0\0\x83\x81a6\x97Wa6\x96aMiV[[\x04\x92P`\x10\x81\x01\x90P[c\x05\xF5\xE1\0\x83\x10a6\xCAWc\x05\xF5\xE1\0\x83\x81a6\xC0Wa6\xBFaMiV[[\x04\x92P`\x08\x81\x01\x90P[a'\x10\x83\x10a6\xEFWa'\x10\x83\x81a6\xE5Wa6\xE4aMiV[[\x04\x92P`\x04\x81\x01\x90P[`d\x83\x10a7\x12W`d\x83\x81a7\x08Wa7\x07aMiV[[\x04\x92P`\x02\x81\x01\x90P[`\n\x83\x10a7!W`\x01\x81\x01\x90P[\x80\x91PP\x91\x90PV[_`\x03`\x07\x81\x11\x15a7?Wa7>aD\x1BV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a7pWa7oaD\x1BV[[\x14\x90P\x92\x91PPV[_`\x02`\x07\x81\x11\x15a7\x8EWa7\x8DaD\x1BV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a7\xBFWa7\xBEaD\x1BV[[\x14\x90P\x92\x91PPV[_`\x04`\x07\x81\x11\x15a7\xDDWa7\xDCaD\x1BV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a8\x0EWa8\raD\x1BV[[\x14\x90P\x92\x91PPV[a8\x1Fa\n\x86V[a8UW`@Q\x7F\x8D\xFC +\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_a8\x83\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba;~V[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[a8\xB3\x82a;\x87V[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;`@Q`@Q\x80\x91\x03\x90\xA2_\x81Q\x11\x15a9\x0FWa9\t\x82\x82a<PV[Pa9\x18V[a9\x17a<\xD0V[[PPV[a9$a=\x0CV[a9ZW`@Q\x7F\xD7\xE6\xBC\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[a9da9\x1CV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a9\xD4W_`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a9\xCB\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xFD[a9\xDD\x81a/:V[PV[a9\xE8a9\x1CV[_a9\xF1a&CV[\x90P_\x81_\x01_a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPPV[_a:\x19a2PV[\x90P_\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x82\x82_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPPV[_\x80`\x07\x81\x11\x15a:\xF5Wa:\xF4aD\x1BV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a;&Wa;%aD\x1BV[[\x14\x90P\x92\x91PPV[_`\x01`\x07\x81\x11\x15a;DWa;CaD\x1BV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a;uWa;taD\x1BV[[\x14\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a;\xE2W\x80`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a;\xD9\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xFD[\x80a<\x0E\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba;~V[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[``_\x80\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84`@Qa<y\x91\x90aS\x14V[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a<\xB1W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a<\xB6V[``\x91P[P\x91P\x91Pa<\xC6\x85\x83\x83a=*V[\x92PPP\x92\x91PPV[_4\x11\x15a=\nW`@Q\x7F\xB3\x98\x97\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_a=\x15a&\x8EV[_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x90V[``\x82a=?Wa=:\x82a=\xB7V[a=\xAFV[_\x82Q\x14\x80\x15a=eWP_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14[\x15a=\xA7W\x83`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a=\x9E\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xFD[\x81\x90Pa=\xB0V[[\x93\x92PPPV[_\x81Q\x11\x15a=\xC9W\x80Q\x80\x82` \x01\xFD[`@Q\x7F\xD6\xBD\xA2u\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q\x80`\x80\x01`@R\x80``\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01``\x81RP\x90V[`@Q\x80`\x80\x01`@R\x80_\x81R` \x01_\x81R` \x01_\x81R` \x01``\x81RP\x90V[_\x81\x90P\x91\x90PV[a>\x84\x81a>rV[\x82RPPV[_` \x82\x01\x90Pa>\x9D_\x83\x01\x84a>{V[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15a>\xDAW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa>\xBFV[_\x84\x84\x01RPPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a>\xFF\x82a>\xA3V[a?\t\x81\x85a>\xADV[\x93Pa?\x19\x81\x85` \x86\x01a>\xBDV[a?\"\x81a>\xE5V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra?E\x81\x84a>\xF5V[\x90P\x92\x91PPV[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[a?g\x81a>rV[\x81\x14a?qW_\x80\xFD[PV[_\x815\x90Pa?\x82\x81a?^V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a?\x9DWa?\x9Ca?VV[[_a?\xAA\x84\x82\x85\x01a?tV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a@\x05\x82a?\xDCV[\x90P\x91\x90PV[a@\x15\x81a?\xFBV[\x82RPPV[_a@&\x83\x83a@\x0CV[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a@H\x82a?\xB3V[a@R\x81\x85a?\xBDV[\x93Pa@]\x83a?\xCDV[\x80_[\x83\x81\x10\x15a@\x8DW\x81Qa@t\x88\x82a@\x1BV[\x97Pa@\x7F\x83a@2V[\x92PP`\x01\x81\x01\x90Pa@`V[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra@\xB2\x81\x84a@>V[\x90P\x92\x91PPV[a@\xC3\x81a?\xFBV[\x81\x14a@\xCDW_\x80\xFD[PV[_\x815\x90Pa@\xDE\x81a@\xBAV[\x92\x91PPV[_\x80\xFD[_\x80\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[aA\"\x82a>\xE5V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15aAAWaA@a@\xECV[[\x80`@RPPPV[_aASa?MV[\x90PaA_\x82\x82aA\x19V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aA~WaA}a@\xECV[[aA\x87\x82a>\xE5V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_aA\xB4aA\xAF\x84aAdV[aAJV[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15aA\xD0WaA\xCFa@\xE8V[[aA\xDB\x84\x82\x85aA\x94V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12aA\xF7WaA\xF6a@\xE4V[[\x815aB\x07\x84\x82` \x86\x01aA\xA2V[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aB&WaB%a?VV[[_aB3\x85\x82\x86\x01a@\xD0V[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aBTWaBSa?ZV[[aB`\x85\x82\x86\x01aA\xE3V[\x91PP\x92P\x92\x90PV[_\x81\x90P\x91\x90PV[aB|\x81aBjV[\x82RPPV[_` \x82\x01\x90PaB\x95_\x83\x01\x84aBsV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[aB\xAF\x81aB\x9BV[\x82RPPV[_` \x82\x01\x90PaB\xC8_\x83\x01\x84aB\xA6V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12aB\xEBWaB\xEAa@\xE4V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aC\x08WaC\x07aB\xCEV[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15aC$WaC#aB\xD2V[[\x92P\x92\x90PV[_\x80_`@\x84\x86\x03\x12\x15aCBWaCAa?VV[[_aCO\x86\x82\x87\x01a?tV[\x93PP` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aCpWaCoa?ZV[[aC|\x86\x82\x87\x01aB\xD6V[\x92P\x92PP\x92P\x92P\x92V[_\x80\xFD[_`@\x82\x84\x03\x12\x15aC\xA1WaC\xA0aC\x88V[[\x81\x90P\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15aC\xC2WaC\xC1a?VV[[_aC\xCF\x87\x82\x88\x01a?tV[\x94PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aC\xF0WaC\xEFa?ZV[[aC\xFC\x87\x82\x88\x01aB\xD6V[\x93P\x93PP`@aD\x0F\x87\x82\x88\x01aC\x8CV[\x91PP\x92\x95\x91\x94P\x92PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`!`\x04R`$_\xFD[`\x08\x81\x10aDYWaDXaD\x1BV[[PV[_\x81\x90PaDi\x82aDHV[\x91\x90PV[_aDx\x82aD\\V[\x90P\x91\x90PV[aD\x88\x81aDnV[\x82RPPV[_` \x82\x01\x90PaD\xA1_\x83\x01\x84aD\x7FV[\x92\x91PPV[aD\xB0\x81a?\xFBV[\x82RPPV[_` \x82\x01\x90PaD\xC9_\x83\x01\x84aD\xA7V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aD\xE5WaD\xE4a?VV[[_aD\xF2\x85\x82\x86\x01a?tV[\x92PP` aE\x03\x85\x82\x86\x01a@\xD0V[\x91PP\x92P\x92\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_aE'\x82a>\xA3V[aE1\x81\x85aE\rV[\x93PaEA\x81\x85` \x86\x01a>\xBDV[aEJ\x81a>\xE5V[\x84\x01\x91PP\x92\x91PPV[_`\x80\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01RaEo\x82\x82aE\x1DV[\x91PP` \x83\x01QaE\x84` \x86\x01\x82a@\x0CV[P`@\x83\x01QaE\x97`@\x86\x01\x82a@\x0CV[P``\x83\x01Q\x84\x82\x03``\x86\x01RaE\xAF\x82\x82aE\x1DV[\x91PP\x80\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaE\xD4\x81\x84aEUV[\x90P\x92\x91PPV[_` \x82\x84\x03\x12\x15aE\xF1WaE\xF0a?VV[[_aE\xFE\x84\x82\x85\x01a@\xD0V[\x91PP\x92\x91PPV[aF\x10\x81a>rV[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_`\x80\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01RaFY\x82\x82aE\x1DV[\x91PP` \x83\x01QaFn` \x86\x01\x82a@\x0CV[P`@\x83\x01QaF\x81`@\x86\x01\x82a@\x0CV[P``\x83\x01Q\x84\x82\x03``\x86\x01RaF\x99\x82\x82aE\x1DV[\x91PP\x80\x91PP\x92\x91PPV[_aF\xB1\x83\x83aF?V[\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_aF\xCF\x82aF\x16V[aF\xD9\x81\x85aF V[\x93P\x83` \x82\x02\x85\x01aF\xEB\x85aF0V[\x80_[\x85\x81\x10\x15aG&W\x84\x84\x03\x89R\x81QaG\x07\x85\x82aF\xA6V[\x94PaG\x12\x83aF\xB9V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90PaF\xEEV[P\x82\x97P\x87\x95PPPPPP\x92\x91PPV[_`\x80\x83\x01_\x83\x01QaGM_\x86\x01\x82aF\x07V[P` \x83\x01QaG`` \x86\x01\x82aF\x07V[P`@\x83\x01QaGs`@\x86\x01\x82aF\x07V[P``\x83\x01Q\x84\x82\x03``\x86\x01RaG\x8B\x82\x82aF\xC5V[\x91PP\x80\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaG\xB0\x81\x84aG8V[\x90P\x92\x91PPV[_\x81\x90P\x92\x91PPV[_aG\xCC\x82a>\xA3V[aG\xD6\x81\x85aG\xB8V[\x93PaG\xE6\x81\x85` \x86\x01a>\xBDV[\x80\x84\x01\x91PP\x92\x91PPV[\x7F v\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_aH&`\x02\x83aG\xB8V[\x91PaH1\x82aG\xF2V[`\x02\x82\x01\x90P\x91\x90PV[\x7F.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_aHp`\x01\x83aG\xB8V[\x91PaH{\x82aH<V[`\x01\x82\x01\x90P\x91\x90PV[_aH\x91\x82\x87aG\xC2V[\x91PaH\x9C\x82aH\x1AV[\x91PaH\xA8\x82\x86aG\xC2V[\x91PaH\xB3\x82aHdV[\x91PaH\xBF\x82\x85aG\xC2V[\x91PaH\xCA\x82aHdV[\x91PaH\xD6\x82\x84aG\xC2V[\x91P\x81\x90P\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_aI\x1B\x82a>rV[\x91PaI&\x83a>rV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15aI>WaI=aH\xE4V[[\x92\x91PPV[_`@\x82\x01\x90PaIW_\x83\x01\x85a>{V[aId` \x83\x01\x84a>{V[\x93\x92PPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12aI\xACWaI\xABaI\x8CV[[\x83\x81\x01\x92P\x825\x91P` \x83\x01\x92Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aI\xD4WaI\xD3aI\x84V[[`\x01\x82\x026\x03\x83\x13\x15aI\xEAWaI\xE9aI\x88V[[P\x92P\x92\x90PV[_aI\xFD\x83\x85aE\rV[\x93PaJ\n\x83\x85\x84aA\x94V[aJ\x13\x83a>\xE5V[\x84\x01\x90P\x93\x92PPPV[_aJ,` \x84\x01\x84a@\xD0V[\x90P\x92\x91PPV[_`\x80\x83\x01aJE_\x84\x01\x84aI\x90V[\x85\x83\x03_\x87\x01RaJW\x83\x82\x84aI\xF2V[\x92PPPaJh` \x84\x01\x84aJ\x1EV[aJu` \x86\x01\x82a@\x0CV[PaJ\x83`@\x84\x01\x84aJ\x1EV[aJ\x90`@\x86\x01\x82a@\x0CV[PaJ\x9E``\x84\x01\x84aI\x90V[\x85\x83\x03``\x87\x01RaJ\xB1\x83\x82\x84aI\xF2V[\x92PPP\x80\x91PP\x92\x91PPV[_aJ\xCA\x83\x83aJ4V[\x90P\x92\x91PPV[_\x825`\x01`\x80\x03\x836\x03\x03\x81\x12aJ\xEDWaJ\xECaI\x8CV[[\x82\x81\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_aK\x10\x83\x85aIkV[\x93P\x83` \x84\x02\x85\x01aK\"\x84aI{V[\x80_[\x87\x81\x10\x15aKeW\x84\x84\x03\x89RaK<\x82\x84aJ\xD2V[aKF\x85\x82aJ\xBFV[\x94PaKQ\x83aJ\xF9V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90PaK%V[P\x82\x97P\x87\x94PPPPP\x93\x92PPPV[_`@\x82\x01\x90PaK\x8A_\x83\x01\x86a>{V[\x81\x81\x03` \x83\x01RaK\x9D\x81\x84\x86aK\x05V[\x90P\x94\x93PPPPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[aK\xC3\x81aK\xA7V[\x82RPPV[_` \x82\x01\x90PaK\xDC_\x83\x01\x84aK\xBAV[\x92\x91PPV[_\x81Q\x90PaK\xF0\x81a@\xBAV[\x92\x91PPV[_` \x82\x84\x03\x12\x15aL\x0BWaL\na?VV[[_aL\x18\x84\x82\x85\x01aK\xE2V[\x91PP\x92\x91PPV[_aL/` \x84\x01\x84a?tV[\x90P\x92\x91PPV[`@\x82\x01aLG_\x83\x01\x83aL!V[aLS_\x85\x01\x82aF\x07V[PaLa` \x83\x01\x83aL!V[aLn` \x85\x01\x82aF\x07V[PPPPV[_`\x80\x82\x01\x90P\x81\x81\x03_\x83\x01RaL\x8C\x81\x86aG8V[\x90P\x81\x81\x03` \x83\x01RaL\xA0\x81\x85aG8V[\x90PaL\xAF`@\x83\x01\x84aL7V[\x94\x93PPPPV[_`@\x82\x01\x90P\x81\x81\x03_\x83\x01RaL\xCF\x81\x85aG8V[\x90PaL\xDE` \x83\x01\x84a>{V[\x93\x92PPPV[_`@\x82\x01\x90PaL\xF8_\x83\x01\x85a>{V[aM\x05` \x83\x01\x84aD\xA7V[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\"`\x04R`$_\xFD[_`\x02\x82\x04\x90P`\x01\x82\x16\x80aMPW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03aMcWaMbaM\x0CV[[P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[aM\x9F\x81aBjV[\x81\x14aM\xA9W_\x80\xFD[PV[_\x81Q\x90PaM\xBA\x81aM\x96V[\x92\x91PPV[_` \x82\x84\x03\x12\x15aM\xD5WaM\xD4a?VV[[_aM\xE2\x84\x82\x85\x01aM\xACV[\x91PP\x92\x91PPV[_aM\xF5\x82a>rV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03aN'WaN&aH\xE4V[[`\x01\x82\x01\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x825`\x01`\x80\x03\x836\x03\x03\x81\x12aN\x86WaN\x85aN_V[[\x80\x83\x01\x91PP\x92\x91PPV[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12aN\xAEWaN\xADaN_V[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aN\xD0WaN\xCFaNcV[[` \x83\x01\x92P`\x01\x82\x026\x03\x83\x13\x15aN\xECWaN\xEBaNgV[[P\x92P\x92\x90PV[_\x82\x90P\x92\x91PPV[_\x81\x90P\x81_R` _ \x90P\x91\x90PV[_` `\x1F\x83\x01\x04\x90P\x91\x90PV[_\x82\x82\x1B\x90P\x92\x91PPV[_`\x08\x83\x02aOZ\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82aO\x1FV[aOd\x86\x83aO\x1FV[\x95P\x80\x19\x84\x16\x93P\x80\x86\x16\x84\x17\x92PPP\x93\x92PPPV[_\x81\x90P\x91\x90PV[_aO\x9FaO\x9AaO\x95\x84a>rV[aO|V[a>rV[\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[aO\xB8\x83aO\x85V[aO\xCCaO\xC4\x82aO\xA6V[\x84\x84TaO+V[\x82UPPPPV[_\x90V[aO\xE0aO\xD4V[aO\xEB\x81\x84\x84aO\xAFV[PPPV[[\x81\x81\x10\x15aP\x0EWaP\x03_\x82aO\xD8V[`\x01\x81\x01\x90PaO\xF1V[PPV[`\x1F\x82\x11\x15aPSWaP$\x81aN\xFEV[aP-\x84aO\x10V[\x81\x01` \x85\x10\x15aP<W\x81\x90P[aPPaPH\x85aO\x10V[\x83\x01\x82aO\xF0V[PP[PPPV[_\x82\x82\x1C\x90P\x92\x91PPV[_aPs_\x19\x84`\x08\x02aPXV[\x19\x80\x83\x16\x91PP\x92\x91PPV[_aP\x8B\x83\x83aPdV[\x91P\x82`\x02\x02\x82\x17\x90P\x92\x91PPV[aP\xA5\x83\x83aN\xF4V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aP\xBEWaP\xBDa@\xECV[[aP\xC8\x82TaM9V[aP\xD3\x82\x82\x85aP\x12V[_`\x1F\x83\x11`\x01\x81\x14aQ\0W_\x84\x15aP\xEEW\x82\x87\x015\x90P[aP\xF8\x85\x82aP\x80V[\x86UPaQ_V[`\x1F\x19\x84\x16aQ\x0E\x86aN\xFEV[_[\x82\x81\x10\x15aQ5W\x84\x89\x015\x82U`\x01\x82\x01\x91P` \x85\x01\x94P` \x81\x01\x90PaQ\x10V[\x86\x83\x10\x15aQRW\x84\x89\x015aQN`\x1F\x89\x16\x82aPdV[\x83UP[`\x01`\x02\x88\x02\x01\x88UPPP[PPPPPPPV[aQs\x83\x83\x83aP\x9BV[PPPV[_\x815aQ\x84\x81a@\xBAV[\x80\x91PP\x91\x90PV[_\x81_\x1B\x90P\x91\x90PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFaQ\xB7\x84aQ\x8DV[\x93P\x80\x19\x83\x16\x92P\x80\x84\x16\x83\x17\x91PP\x92\x91PPV[_aQ\xE7aQ\xE2aQ\xDD\x84a?\xDCV[aO|V[a?\xDCV[\x90P\x91\x90PV[_aQ\xF8\x82aQ\xCDV[\x90P\x91\x90PV[_aR\t\x82aQ\xEEV[\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[aR\"\x82aQ\xFFV[aR5aR.\x82aR\x10V[\x83TaQ\x98V[\x82UPPPV[_\x81\x01_\x83\x01aRL\x81\x85aN\x92V[aRW\x81\x83\x86aQhV[PPPP`\x01\x81\x01` \x83\x01\x80aRm\x81aQxV[\x90PaRy\x81\x84aR\x19V[PPP`\x02\x81\x01`@\x83\x01\x80aR\x8E\x81aQxV[\x90PaR\x9A\x81\x84aR\x19V[PPP`\x03\x81\x01``\x83\x01aR\xAF\x81\x85aN\x92V[aR\xBA\x81\x83\x86aQhV[PPPPPPV[aR\xCC\x82\x82aR<V[PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_aR\xEE\x82aR\xD0V[aR\xF8\x81\x85aR\xDAV[\x93PaS\x08\x81\x85` \x86\x01a>\xBDV[\x80\x84\x01\x91PP\x92\x91PPV[_aS\x1F\x82\x84aR\xE4V[\x91P\x81\x90P\x92\x91PPV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600436106101e2575f3560e01c8063888b99e011610101578063be91187b11610094578063eec168fb11610063578063eec168fb14610680578063f192cf68146106a8578063f2fde38b146106d0578063fed9716b146106f8576101e2565b8063be91187b146105c8578063d1841dd3146105f2578063d740e4021461062e578063e30c397814610656576101e2565b8063991dc36d116100d0578063991dc36d146105105780639efb484e1461053a578063a94a02ad14610562578063ad3cb1cc1461059e576101e2565b8063888b99e0146104585780638da5cb5b1461049457806390218748146104be578063957b2abe146104fa576101e2565b806360b2546511610179578063715018a611610148578063715018a6146103ee57806379ba5097146104045780638456cb591461041a57806384cae18714610430576101e2565b806360b25465146103125780636b3174e51461034e5780636ba818e11461038a578063703c3b2e146103c6576101e2565b80633f4ba83a116101b55780633f4ba83a1461028c5780634f1ef286146102a257806352d1902d146102be5780635c975abb146102e8576101e2565b8063086e4e1c146101e65780630d8e6e2c1461021057806318b7214d1461023a5780633a5162e614610276575b5f80fd5b3480156101f1575f80fd5b506101fa610722565b6040516102079190613e8a565b60405180910390f35b34801561021b575f80fd5b5061022461076e565b6040516102319190613f2d565b60405180910390f35b348015610245575f80fd5b50610260600480360381019061025b9190613f88565b6107e9565b60405161026d919061409a565b60405180910390f35b348015610281575f80fd5b5061028a610893565b005b348015610297575f80fd5b506102a0610a24565b005b6102bc60048036038101906102b79190614210565b610a36565b005b3480156102c9575f80fd5b506102d2610a55565b6040516102df9190614282565b60405180910390f35b3480156102f3575f80fd5b506102fc610a86565b60405161030991906142b5565b60405180910390f35b34801561031d575f80fd5b5061033860048036038101906103339190613f88565b610aa8565b60405161034591906142b5565b60405180910390f35b348015610359575f80fd5b50610374600480360381019061036f9190613f88565b610b32565b604051610381919061409a565b60405180910390f35b348015610395575f80fd5b506103b060048036038101906103ab9190613f88565b610bdc565b6040516103bd9190613e8a565b60405180910390f35b3480156103d1575f80fd5b506103ec60048036038101906103e7919061432b565b610c7d565b005b3480156103f9575f80fd5b50610402610e6e565b005b34801561040f575f80fd5b50610418610e81565b005b348015610425575f80fd5b5061042e610f0f565b005b34801561043b575f80fd5b50610456600480360381019061045191906143aa565b61104a565b005b348015610463575f80fd5b5061047e60048036038101906104799190613f88565b611162565b60405161048b919061448e565b60405180910390f35b34801561049f575f80fd5b506104a8611182565b6040516104b591906144b6565b60405180910390f35b3480156104c9575f80fd5b506104e460048036038101906104df9190613f88565b6111b7565b6040516104f19190613e8a565b60405180910390f35b348015610505575f80fd5b5061050e611246565b005b34801561051b575f80fd5b506105246112fa565b6040516105319190613e8a565b60405180910390f35b348015610545575f80fd5b50610560600480360381019061055b91906144cf565b611346565b005b34801561056d575f80fd5b5061058860048036038101906105839190613f88565b61145b565b6040516105959190613e8a565b60405180910390f35b3480156105a9575f80fd5b506105b26114ea565b6040516105bf9190613f2d565b60405180910390f35b3480156105d3575f80fd5b506105dc611523565b6040516105e99190613e8a565b60405180910390f35b3480156105fd575f80fd5b50610618600480360381019061061391906144cf565b61156f565b60405161062591906145bc565b60405180910390f35b348015610639575f80fd5b50610654600480360381019061064f9190613f88565b61188f565b005b348015610661575f80fd5b5061066a611950565b60405161067791906144b6565b60405180910390f35b34801561068b575f80fd5b506106a660048036038101906106a19190613f88565b611985565b005b3480156106b3575f80fd5b506106ce60048036038101906106c991906144cf565b611a46565b005b3480156106db575f80fd5b506106f660048036038101906106f191906145dc565b611b5b565b005b348015610703575f80fd5b5061070c611c14565b6040516107199190614798565b60405180910390f35b5f8061072c611e99565b90505f8103610767576040517f21fb08f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b60606040518060400160405280601381526020017f436f70726f636573736f72436f6e7465787473000000000000000000000000008152506107af5f611eb2565b6107b96001611eb2565b6107c25f611eb2565b6040516020016107d59493929190614886565b604051602081830303815290604052905090565b60605f6107f4611f7c565b9050806009015f8481526020019081526020015f2080548060200260200160405190810160405280929190818152602001828054801561088657602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161083d575b5050505050915050919050565b61089b611fa3565b5f6108a4611f7c565b90505f815f016002015490505f81141580156108d3575081600c015f8281526020019081526020015f20544210155b156109a8575f6108e16112fa565b90505f83600e015f8381526020019081526020015f2054426109039190614911565b90508084600d015f8481526020019081526020015f2081905550610929845f0183611fe4565b7f3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc828260405161095a929190614944565b60405180910390a161096e845f01846120ba565b7f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be718360405161099d9190613e8a565b60405180910390a150505b5f6109b1611e99565b90505f81141580156109d6575082600d015f8281526020019081526020015f20544210155b15610a1f576109e7835f01826121b5565b7f1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a5289881604051610a169190613e8a565b60405180910390a15b505050565b610a2c6122b8565b610a3461233f565b565b610a3e6123ad565b610a4782612493565b610a51828261249e565b5050565b5f610a5e6125bc565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f80610a90612643565b9050805f015f9054906101000a900460ff1691505090565b5f815f610ab3611f7c565b90505f816005015f8481526020019081526020015f205f015403610b0e57816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401610b059190613e8a565b60405180910390fd5b610b166112fa565b841480610b295750610b26611e99565b84145b92505050919050565b60605f610b3d611f7c565b905080600b015f8481526020019081526020015f20805480602002602001604051908101604052809291908181526020018280548015610bcf57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b86575b5050505050915050919050565b5f815f610be7611f7c565b90505f816005015f8481526020019081526020015f205f015403610c4257816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401610c399190613e8a565b60405180910390fd5b5f610c4b611f7c565b9050600180826009015f8881526020019081526020015f2080549050901c610c739190614911565b9350505050919050565b6001610c8761266a565b67ffffffffffffffff1614610cc8576040517f6f4f731f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f610cd361268e565b9050805f0160089054906101000a900460ff1680610d1b57508167ffffffffffffffff16815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1610155b15610d52576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001815f0160086101000a81548160ff021916908315150217905550610da7610da2611182565b6126b5565b610daf6126c9565b5f610dbc5f8787876126db565b90505f610dc7611f7c565b9050610dd8815f01835f01516120ba565b7f13c5fd631ca031552fe9e38d911910a5980f6608eea323696e04db0fec0c9557878787604051610e0b93929190614b77565b60405180910390a150505f815f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d282604051610e5f9190614bc9565b60405180910390a15050505050565b610e766122b8565b610e7f5f612f3a565b565b5f610e8a612f77565b90508073ffffffffffffffffffffffffffffffffffffffff16610eab611950565b73ffffffffffffffffffffffffffffffffffffffff1614610f0357806040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610efa91906144b6565b60405180910390fd5b610f0c81612f3a565b50565b610f17611182565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610ffe575073c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff16637008b5486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610faa573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fce9190614bf6565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561104057336040517f46c0d9af00000000000000000000000000000000000000000000000000000000815260040161103791906144b6565b60405180910390fd5b611048612f7e565b565b6110526122b8565b5f61105b611f7c565b90505f611066611c14565b90505f611078825f01518888886126db565b90507faf58a18a4e4159fa706c0d4e0fdab0930f97679319cddbc9c9199b0cd104b6ef8282866040516110ad93929190614c74565b60405180910390a16110c4835f01825f0151612fed565b6110d3835f01825f0151613152565b5f845f0135426110e39190614911565b90508084600c015f845f015181526020019081526020015f2081905550846020013584600e015f855f015181526020019081526020015f20819055507f2b0188fc4bed471ee216dc6cb9650beb288892034ebee7301b32391add2a66b88282604051611150929190614cb7565b60405180910390a15050505050505050565b5f8061116c611f7c565b905061117a815f0184613228565b915050919050565b5f8061118c613250565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b5f815f6111c2611f7c565b90505f816005015f8481526020019081526020015f205f01540361121d57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016112149190613e8a565b60405180910390fd5b5f611226611f7c565b905080600d015f8681526020019081526020015f20549350505050919050565b61124e6122b8565b5f611257610722565b90505f611262611f7c565b90505f61126d613277565b905061127b825f01826121b5565b7f1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a52898816040516112aa9190613e8a565b60405180910390a16112be825f01846120ba565b7f6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be71836040516112ed9190613e8a565b60405180910390a1505050565b5f80611304613277565b90505f810361133f576040517f046593ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b815f611350611f7c565b90505f816005015f8481526020019081526020015f205f0154036113ab57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016113a29190613e8a565b60405180910390fd5b5f6113b4611f7c565b905080600a015f8681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166114545784846040517f554f8c5f00000000000000000000000000000000000000000000000000000000815260040161144b929190614ce5565b60405180910390fd5b5050505050565b5f815f611466611f7c565b90505f816005015f8481526020019081526020015f205f0154036114c157816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016114b89190613e8a565b60405180910390fd5b5f6114ca611f7c565b905080600c015f8681526020019081526020015f20549350505050919050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b5f8061152d613290565b90505f8103611568576040517fb9e861b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8091505090565b611577613dfb565b825f611581611f7c565b90505f816005015f8481526020019081526020015f205f0154036115dc57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016115d39190613e8a565b60405180910390fd5b5f6115e5611f7c565b90505f816007015f8881526020019081526020015f205f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f8201805461165090614d39565b80601f016020809104026020016040519081016040528092919081815260200182805461167c90614d39565b80156116c75780601f1061169e576101008083540402835291602001916116c7565b820191905f5260205f20905b8154815290600101906020018083116116aa57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805461178a90614d39565b80601f01602080910402602001604051908101604052809291908181526020018280546117b690614d39565b80156118015780601f106117d857610100808354040283529160200191611801565b820191905f5260205f20905b8154815290600101906020018083116117e457829003601f168201915b50505050508152505090505f73ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16036118825786866040517fc312e73e000000000000000000000000000000000000000000000000000000008152600401611879929190614ce5565b60405180910390fd5b8094505050505092915050565b6118976122b8565b805f6118a1611f7c565b90505f816005015f8481526020019081526020015f205f0154036118fc57816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016118f39190613e8a565b60405180910390fd5b5f611905611f7c565b9050611913815f01856132a9565b7ff20b299804c9c1d6da3b82414c7aa0a845cdbabae2d90e46e360a379a77b7be5846040516119429190613e8a565b60405180910390a150505050565b5f8061195a613412565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b61198d6122b8565b805f611997611f7c565b90505f816005015f8481526020019081526020015f205f0154036119f257816040517fabf9e7b00000000000000000000000000000000000000000000000000000000081526004016119e99190613e8a565b60405180910390fd5b5f6119fb611f7c565b9050611a09815f0185613439565b7fee7ef83963417125d27430789fc6e94194381e82c3cda68260d0e7cfc31eaf2184604051611a389190613e8a565b60405180910390a150505050565b815f611a50611f7c565b90505f816005015f8481526020019081526020015f205f015403611aab57816040517fabf9e7b0000000000000000000000000000000000000000000000000000000008152600401611aa29190613e8a565b60405180910390fd5b5f611ab4611f7c565b9050806008015f8681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16611b545784846040517f29a993c1000000000000000000000000000000000000000000000000000000008152600401611b4b929190614ce5565b60405180910390fd5b5050505050565b611b636122b8565b5f611b6c613412565b905081815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16611bce611182565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b611c1c613e4d565b5f611c256112fa565b90505f611c30611f7c565b9050806005015f8381526020019081526020015f206040518060800160405290815f8201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020015f905b82821015611e8a578382905f5260205f2090600402016040518060800160405290815f82018054611cc190614d39565b80601f0160208091040260200160405190810160405280929190818152602001828054611ced90614d39565b8015611d385780601f10611d0f57610100808354040283529160200191611d38565b820191905f5260205f20905b815481529060010190602001808311611d1b57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054611dfb90614d39565b80601f0160208091040260200160405190810160405280929190818152602001828054611e2790614d39565b8015611e725780601f10611e4957610100808354040283529160200191611e72565b820191905f5260205f20905b815481529060010190602001808311611e5557829003601f168201915b50505050508152505081526020019060010190611c91565b50505050815250509250505090565b5f80611ea3611f7c565b9050805f016004015491505090565b60605f6001611ec0846135d9565b0190505f8167ffffffffffffffff811115611ede57611edd6140ec565b5b6040519080825280601f01601f191660200182016040528015611f105781602001600182028036833780820191505090505b5090505f82602001820190505b600115611f71578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611f6657611f65614d69565b5b0494505f8503611f1d575b819350505050919050565b5f7f1da8a9a065a2f0a895c457065eddd3cf4a4d0d5340aaa0ca54d3cd5b4a6aaf00905090565b611fab610a86565b15611fe2576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b805f810361201e576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612028838361372a565b61206957816040517f331486b30000000000000000000000000000000000000000000000000000000081526004016120609190613e8a565b60405180910390fd5b6004835f015f8481526020019081526020015f205f6101000a81548160ff0219169083600781111561209e5761209d61441b565b5b02179055508183600401819055505f8360030181905550505050565b805f81036120f4576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6120fe8383613779565b158015612112575061211083836137c8565b155b801561212257505f836003015414155b1561216457816040517f12b49e3d00000000000000000000000000000000000000000000000000000000815260040161215b9190613e8a565b60405180910390fd5b6003835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156121995761219861441b565b5b02179055508183600301819055505f8360020181905550505050565b805f81036121ef576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6121f9838361372a565b15801561220d575061220b83836137c8565b155b1561224f57816040517f2b3652d10000000000000000000000000000000000000000000000000000000081526004016122469190613e8a565b60405180910390fd5b6005835f015f8481526020019081526020015f205f6101000a81548160ff021916908360078111156122845761228361441b565b5b02179055508183600301540361229e575f83600301819055505b818360040154036122b3575f83600401819055505b505050565b6122c0612f77565b73ffffffffffffffffffffffffffffffffffffffff166122de611182565b73ffffffffffffffffffffffffffffffffffffffff161461233d57612301612f77565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161233491906144b6565b60405180910390fd5b565b612347613817565b5f612350612643565b90505f815f015f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612395612f77565b6040516123a291906144b6565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061245a57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612441613857565b73ffffffffffffffffffffffffffffffffffffffff1614155b15612491576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61249b6122b8565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561250657506040513d601f19601f820116820180604052508101906125039190614dc0565b60015b61254757816040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815260040161253e91906144b6565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b81146125ad57806040517faa1d49a40000000000000000000000000000000000000000000000000000000081526004016125a49190614282565b60405180910390fd5b6125b783836138aa565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612641576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300905090565b5f61267361268e565b5f015f9054906101000a900467ffffffffffffffff16905090565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6126bd61391c565b6126c68161395c565b50565b6126d161391c565b6126d96139e0565b565b6126e3613e4d565b5f838390500361271f576040517f8af082ef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f612728611f7c565b9050806006015f81548092919061273e90614deb565b91905055505f8160060154905080826005015f8381526020019081526020015f205f018190555086826005015f8381526020019081526020015f206001018190555085826005015f8381526020019081526020015f20600201819055505f5b8585905081101561282457826005015f8381526020019081526020015f206003018686838181106127d1576127d0614e32565b5b90506020028101906127e39190614e6b565b908060018154018082558091505060019003905f5260205f2090600402015f90919091909150818161281591906152c2565b5050808060010191505061279d565b505f5b85859050811015612ccd575f73ffffffffffffffffffffffffffffffffffffffff1686868381811061285c5761285b614e32565b5b905060200281019061286e9190614e6b565b602001602081019061288091906145dc565b73ffffffffffffffffffffffffffffffffffffffff16036128da5781816040517f4c1006f30000000000000000000000000000000000000000000000000000000081526004016128d1929190614944565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff1686868381811061290457612903614e32565b5b90506020028101906129169190614e6b565b604001602081019061292891906145dc565b73ffffffffffffffffffffffffffffffffffffffff16036129825781816040517f8a7488f4000000000000000000000000000000000000000000000000000000008152600401612979929190614944565b60405180910390fd5b85858281811061299557612994614e32565b5b90506020028101906129a79190614e6b565b836007015f8481526020019081526020015f205f8888858181106129ce576129cd614e32565b5b90506020028101906129e09190614e6b565b60200160208101906129f291906145dc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208181612a3791906152c2565b9050506001836008015f8481526020019081526020015f205f888885818110612a6357612a62614e32565b5b9050602002810190612a759190614e6b565b6020016020810190612a8791906145dc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550826009015f8381526020019081526020015f20868683818110612afc57612afb614e32565b5b9050602002810190612b0e9190614e6b565b6020016020810190612b2091906145dc565b908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600183600a015f8481526020019081526020015f205f888885818110612ba657612ba5614e32565b5b9050602002810190612bb89190614e6b565b6040016020810190612bca91906145dc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555082600b015f8381526020019081526020015f20868683818110612c3f57612c3e614e32565b5b9050602002810190612c519190614e6b565b6040016020810190612c6391906145dc565b908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080600101915050612827565b50816005015f8281526020019081526020015f206040518060800160405290815f8201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020015f905b82821015612f26578382905f5260205f2090600402016040518060800160405290815f82018054612d5d90614d39565b80601f0160208091040260200160405190810160405280929190818152602001828054612d8990614d39565b8015612dd45780601f10612dab57610100808354040283529160200191612dd4565b820191905f5260205f20905b815481529060010190602001808311612db757829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054612e9790614d39565b80601f0160208091040260200160405190810160405280929190818152602001828054612ec390614d39565b8015612f0e5780601f10612ee557610100808354040283529160200191612f0e565b820191905f5260205f20905b815481529060010190602001808311612ef157829003601f168201915b50505050508152505081526020019060010190612d2d565b505050508152505092505050949350505050565b5f612f43613412565b9050805f015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055612f7382613a10565b5050565b5f33905090565b612f86611fa3565b5f612f8f612643565b90506001815f015f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612fd5612f77565b604051612fe291906144b6565b60405180910390a150565b805f8103613027576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6130318383613ae1565b61307257816040517f6653f6d70000000000000000000000000000000000000000000000000000000081526004016130699190613e8a565b60405180910390fd5b5f8360020154146130be5782600201546040517fc470c0220000000000000000000000000000000000000000000000000000000081526004016130b59190613e8a565b60405180910390fd5b5f83600401541461310a5782600401546040517f7022ec410000000000000000000000000000000000000000000000000000000081526004016131019190613e8a565b60405180910390fd5b6001835f015f8481526020019081526020015f205f6101000a81548160ff0219169083600781111561313f5761313e61441b565b5b0217905550818360010181905550505050565b805f810361318c576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6131968383613b2f565b6131d757816040517fc0b5ee660000000000000000000000000000000000000000000000000000000081526004016131ce9190613e8a565b60405180910390fd5b6002835f015f8481526020019081526020015f205f6101000a81548160ff0219169083600781111561320c5761320b61441b565b5b02179055508183600201819055505f8360010181905550505050565b5f825f015f8381526020019081526020015f205f9054906101000a900460ff16905092915050565b5f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b5f80613281611f7c565b9050805f016003015491505090565b5f8061329a611f7c565b9050805f016002015491505090565b805f81036132e3576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82826132ef8282613ae1565b1561333157806040517f61544cfc0000000000000000000000000000000000000000000000000000000081526004016133289190613e8a565b60405180910390fd5b61333b858561372a565b1561337d57836040517fcd494e490000000000000000000000000000000000000000000000000000000081526004016133749190613e8a565b60405180910390fd5b6007855f015f8681526020019081526020015f205f6101000a81548160ff021916908360078111156133b2576133b161441b565b5b0217905550838560010154036133cc575f85600101819055505b838560020154036133e1575f85600201819055505b838560030154036133f6575f85600301819055505b8385600401540361340b575f85600401819055505b5050505050565b5f7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00905090565b805f8103613473576040517fcb17b7a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828261347f8282613ae1565b156134c157806040517f61544cfc0000000000000000000000000000000000000000000000000000000081526004016134b89190613e8a565b60405180910390fd5b6134cb8585613b2f565b1561350d57836040517f0ddd14ca0000000000000000000000000000000000000000000000000000000081526004016135049190613e8a565b60405180910390fd5b613517858561372a565b1561355957836040517fcd494e490000000000000000000000000000000000000000000000000000000081526004016135509190613e8a565b60405180910390fd5b6006855f015f8681526020019081526020015f205f6101000a81548160ff0219169083600781111561358e5761358d61441b565b5b0217905550838560020154036135a8575f85600201819055505b838560030154036135bd575f85600301819055505b838560040154036135d2575f85600401819055505b5050505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613635577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161362b5761362a614d69565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310613672576d04ee2d6d415b85acef8100000000838161366857613667614d69565b5b0492506020810190505b662386f26fc1000083106136a157662386f26fc10000838161369757613696614d69565b5b0492506010810190505b6305f5e10083106136ca576305f5e10083816136c0576136bf614d69565b5b0492506008810190505b61271083106136ef5761271083816136e5576136e4614d69565b5b0492506004810190505b60648310613712576064838161370857613707614d69565b5b0492506002810190505b600a8310613721576001810190505b80915050919050565b5f6003600781111561373f5761373e61441b565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff1660078111156137705761376f61441b565b5b14905092915050565b5f6002600781111561378e5761378d61441b565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff1660078111156137bf576137be61441b565b5b14905092915050565b5f600460078111156137dd576137dc61441b565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff16600781111561380e5761380d61441b565b5b14905092915050565b61381f610a86565b613855576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f6138837f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613b7e565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6138b382613b87565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f8151111561390f576139098282613c50565b50613918565b613917613cd0565b5b5050565b613924613d0c565b61395a576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61396461391c565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036139d4575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016139cb91906144b6565b60405180910390fd5b6139dd81612f3a565b50565b6139e861391c565b5f6139f1612643565b90505f815f015f6101000a81548160ff02191690831515021790555050565b5f613a19613250565b90505f815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082825f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b5f806007811115613af557613af461441b565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613b2657613b2561441b565b5b14905092915050565b5f60016007811115613b4457613b4361441b565b5b835f015f8481526020019081526020015f205f9054906101000a900460ff166007811115613b7557613b7461441b565b5b14905092915050565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b03613be257806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401613bd991906144b6565b60405180910390fd5b80613c0e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b613b7e565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f808473ffffffffffffffffffffffffffffffffffffffff1684604051613c799190615314565b5f60405180830381855af49150503d805f8114613cb1576040519150601f19603f3d011682016040523d82523d5f602084013e613cb6565b606091505b5091509150613cc6858383613d2a565b9250505092915050565b5f341115613d0a576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f613d1561268e565b5f0160089054906101000a900460ff16905090565b606082613d3f57613d3a82613db7565b613daf565b5f8251148015613d6557505f8473ffffffffffffffffffffffffffffffffffffffff163b145b15613da757836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401613d9e91906144b6565b60405180910390fd5b819050613db0565b5b9392505050565b5f81511115613dc95780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060800160405280606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60405180608001604052805f81526020015f81526020015f8152602001606081525090565b5f819050919050565b613e8481613e72565b82525050565b5f602082019050613e9d5f830184613e7b565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015613eda578082015181840152602081019050613ebf565b5f8484015250505050565b5f601f19601f8301169050919050565b5f613eff82613ea3565b613f098185613ead565b9350613f19818560208601613ebd565b613f2281613ee5565b840191505092915050565b5f6020820190508181035f830152613f458184613ef5565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b613f6781613e72565b8114613f71575f80fd5b50565b5f81359050613f8281613f5e565b92915050565b5f60208284031215613f9d57613f9c613f56565b5b5f613faa84828501613f74565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61400582613fdc565b9050919050565b61401581613ffb565b82525050565b5f614026838361400c565b60208301905092915050565b5f602082019050919050565b5f61404882613fb3565b6140528185613fbd565b935061405d83613fcd565b805f5b8381101561408d578151614074888261401b565b975061407f83614032565b925050600181019050614060565b5085935050505092915050565b5f6020820190508181035f8301526140b2818461403e565b905092915050565b6140c381613ffb565b81146140cd575f80fd5b50565b5f813590506140de816140ba565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61412282613ee5565b810181811067ffffffffffffffff82111715614141576141406140ec565b5b80604052505050565b5f614153613f4d565b905061415f8282614119565b919050565b5f67ffffffffffffffff82111561417e5761417d6140ec565b5b61418782613ee5565b9050602081019050919050565b828183375f83830152505050565b5f6141b46141af84614164565b61414a565b9050828152602081018484840111156141d0576141cf6140e8565b5b6141db848285614194565b509392505050565b5f82601f8301126141f7576141f66140e4565b5b81356142078482602086016141a2565b91505092915050565b5f806040838503121561422657614225613f56565b5b5f614233858286016140d0565b925050602083013567ffffffffffffffff81111561425457614253613f5a565b5b614260858286016141e3565b9150509250929050565b5f819050919050565b61427c8161426a565b82525050565b5f6020820190506142955f830184614273565b92915050565b5f8115159050919050565b6142af8161429b565b82525050565b5f6020820190506142c85f8301846142a6565b92915050565b5f80fd5b5f80fd5b5f8083601f8401126142eb576142ea6140e4565b5b8235905067ffffffffffffffff811115614308576143076142ce565b5b602083019150836020820283011115614324576143236142d2565b5b9250929050565b5f805f6040848603121561434257614341613f56565b5b5f61434f86828701613f74565b935050602084013567ffffffffffffffff8111156143705761436f613f5a565b5b61437c868287016142d6565b92509250509250925092565b5f80fd5b5f604082840312156143a1576143a0614388565b5b81905092915050565b5f805f80608085870312156143c2576143c1613f56565b5b5f6143cf87828801613f74565b945050602085013567ffffffffffffffff8111156143f0576143ef613f5a565b5b6143fc878288016142d6565b9350935050604061440f8782880161438c565b91505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600881106144595761445861441b565b5b50565b5f81905061446982614448565b919050565b5f6144788261445c565b9050919050565b6144888161446e565b82525050565b5f6020820190506144a15f83018461447f565b92915050565b6144b081613ffb565b82525050565b5f6020820190506144c95f8301846144a7565b92915050565b5f80604083850312156144e5576144e4613f56565b5b5f6144f285828601613f74565b9250506020614503858286016140d0565b9150509250929050565b5f82825260208201905092915050565b5f61452782613ea3565b614531818561450d565b9350614541818560208601613ebd565b61454a81613ee5565b840191505092915050565b5f608083015f8301518482035f86015261456f828261451d565b9150506020830151614584602086018261400c565b506040830151614597604086018261400c565b50606083015184820360608601526145af828261451d565b9150508091505092915050565b5f6020820190508181035f8301526145d48184614555565b905092915050565b5f602082840312156145f1576145f0613f56565b5b5f6145fe848285016140d0565b91505092915050565b61461081613e72565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f608083015f8301518482035f860152614659828261451d565b915050602083015161466e602086018261400c565b506040830151614681604086018261400c565b5060608301518482036060860152614699828261451d565b9150508091505092915050565b5f6146b1838361463f565b905092915050565b5f602082019050919050565b5f6146cf82614616565b6146d98185614620565b9350836020820285016146eb85614630565b805f5b85811015614726578484038952815161470785826146a6565b9450614712836146b9565b925060208a019950506001810190506146ee565b50829750879550505050505092915050565b5f608083015f83015161474d5f860182614607565b5060208301516147606020860182614607565b5060408301516147736040860182614607565b506060830151848203606086015261478b82826146c5565b9150508091505092915050565b5f6020820190508181035f8301526147b08184614738565b905092915050565b5f81905092915050565b5f6147cc82613ea3565b6147d681856147b8565b93506147e6818560208601613ebd565b80840191505092915050565b7f20760000000000000000000000000000000000000000000000000000000000005f82015250565b5f6148266002836147b8565b9150614831826147f2565b600282019050919050565b7f2e000000000000000000000000000000000000000000000000000000000000005f82015250565b5f6148706001836147b8565b915061487b8261483c565b600182019050919050565b5f61489182876147c2565b915061489c8261481a565b91506148a882866147c2565b91506148b382614864565b91506148bf82856147c2565b91506148ca82614864565b91506148d682846147c2565b915081905095945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61491b82613e72565b915061492683613e72565b925082820190508082111561493e5761493d6148e4565b5b92915050565b5f6040820190506149575f830185613e7b565b6149646020830184613e7b565b9392505050565b5f82825260208201905092915050565b5f819050919050565b5f80fd5b5f80fd5b5f80fd5b5f80833560016020038436030381126149ac576149ab61498c565b5b83810192508235915060208301925067ffffffffffffffff8211156149d4576149d3614984565b5b6001820236038313156149ea576149e9614988565b5b509250929050565b5f6149fd838561450d565b9350614a0a838584614194565b614a1383613ee5565b840190509392505050565b5f614a2c60208401846140d0565b905092915050565b5f60808301614a455f840184614990565b8583035f870152614a578382846149f2565b92505050614a686020840184614a1e565b614a75602086018261400c565b50614a836040840184614a1e565b614a90604086018261400c565b50614a9e6060840184614990565b8583036060870152614ab18382846149f2565b925050508091505092915050565b5f614aca8383614a34565b905092915050565b5f82356001608003833603038112614aed57614aec61498c565b5b82810191505092915050565b5f602082019050919050565b5f614b10838561496b565b935083602084028501614b228461497b565b805f5b87811015614b65578484038952614b3c8284614ad2565b614b468582614abf565b9450614b5183614af9565b925060208a01995050600181019050614b25565b50829750879450505050509392505050565b5f604082019050614b8a5f830186613e7b565b8181036020830152614b9d818486614b05565b9050949350505050565b5f67ffffffffffffffff82169050919050565b614bc381614ba7565b82525050565b5f602082019050614bdc5f830184614bba565b92915050565b5f81519050614bf0816140ba565b92915050565b5f60208284031215614c0b57614c0a613f56565b5b5f614c1884828501614be2565b91505092915050565b5f614c2f6020840184613f74565b905092915050565b60408201614c475f830183614c21565b614c535f850182614607565b50614c616020830183614c21565b614c6e6020850182614607565b50505050565b5f6080820190508181035f830152614c8c8186614738565b90508181036020830152614ca08185614738565b9050614caf6040830184614c37565b949350505050565b5f6040820190508181035f830152614ccf8185614738565b9050614cde6020830184613e7b565b9392505050565b5f604082019050614cf85f830185613e7b565b614d0560208301846144a7565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680614d5057607f821691505b602082108103614d6357614d62614d0c565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b614d9f8161426a565b8114614da9575f80fd5b50565b5f81519050614dba81614d96565b92915050565b5f60208284031215614dd557614dd4613f56565b5b5f614de284828501614dac565b91505092915050565b5f614df582613e72565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614e2757614e266148e4565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f80fd5b5f80fd5b5f80fd5b5f82356001608003833603038112614e8657614e85614e5f565b5b80830191505092915050565b5f8083356001602003843603038112614eae57614ead614e5f565b5b80840192508235915067ffffffffffffffff821115614ed057614ecf614e63565b5b602083019250600182023603831315614eec57614eeb614e67565b5b509250929050565b5f82905092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302614f5a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614f1f565b614f648683614f1f565b95508019841693508086168417925050509392505050565b5f819050919050565b5f614f9f614f9a614f9584613e72565b614f7c565b613e72565b9050919050565b5f819050919050565b614fb883614f85565b614fcc614fc482614fa6565b848454614f2b565b825550505050565b5f90565b614fe0614fd4565b614feb818484614faf565b505050565b5b8181101561500e576150035f82614fd8565b600181019050614ff1565b5050565b601f8211156150535761502481614efe565b61502d84614f10565b8101602085101561503c578190505b61505061504885614f10565b830182614ff0565b50505b505050565b5f82821c905092915050565b5f6150735f1984600802615058565b1980831691505092915050565b5f61508b8383615064565b9150826002028217905092915050565b6150a58383614ef4565b67ffffffffffffffff8111156150be576150bd6140ec565b5b6150c88254614d39565b6150d3828285615012565b5f601f831160018114615100575f84156150ee578287013590505b6150f88582615080565b86555061515f565b601f19841661510e86614efe565b5f5b8281101561513557848901358255600182019150602085019450602081019050615110565b86831015615152578489013561514e601f891682615064565b8355505b6001600288020188555050505b50505050505050565b61517383838361509b565b505050565b5f8135615184816140ba565b80915050919050565b5f815f1b9050919050565b5f73ffffffffffffffffffffffffffffffffffffffff6151b78461518d565b9350801983169250808416831791505092915050565b5f6151e76151e26151dd84613fdc565b614f7c565b613fdc565b9050919050565b5f6151f8826151cd565b9050919050565b5f615209826151ee565b9050919050565b5f819050919050565b615222826151ff565b61523561522e82615210565b8354615198565b8255505050565b5f81015f830161524c8185614e92565b615257818386615168565b5050505060018101602083018061526d81615178565b90506152798184615219565b50505060028101604083018061528e81615178565b905061529a8184615219565b50505060038101606083016152af8185614e92565b6152ba818386615168565b505050505050565b6152cc828261523c565b5050565b5f81519050919050565b5f81905092915050565b5f6152ee826152d0565b6152f881856152da565b9350615308818560208601613ebd565b80840191505092915050565b5f61531f82846152e4565b91508190509291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x01\xE2W_5`\xE0\x1C\x80c\x88\x8B\x99\xE0\x11a\x01\x01W\x80c\xBE\x91\x18{\x11a\0\x94W\x80c\xEE\xC1h\xFB\x11a\0cW\x80c\xEE\xC1h\xFB\x14a\x06\x80W\x80c\xF1\x92\xCFh\x14a\x06\xA8W\x80c\xF2\xFD\xE3\x8B\x14a\x06\xD0W\x80c\xFE\xD9qk\x14a\x06\xF8Wa\x01\xE2V[\x80c\xBE\x91\x18{\x14a\x05\xC8W\x80c\xD1\x84\x1D\xD3\x14a\x05\xF2W\x80c\xD7@\xE4\x02\x14a\x06.W\x80c\xE3\x0C9x\x14a\x06VWa\x01\xE2V[\x80c\x99\x1D\xC3m\x11a\0\xD0W\x80c\x99\x1D\xC3m\x14a\x05\x10W\x80c\x9E\xFBHN\x14a\x05:W\x80c\xA9J\x02\xAD\x14a\x05bW\x80c\xAD<\xB1\xCC\x14a\x05\x9EWa\x01\xE2V[\x80c\x88\x8B\x99\xE0\x14a\x04XW\x80c\x8D\xA5\xCB[\x14a\x04\x94W\x80c\x90!\x87H\x14a\x04\xBEW\x80c\x95{*\xBE\x14a\x04\xFAWa\x01\xE2V[\x80c`\xB2Te\x11a\x01yW\x80cqP\x18\xA6\x11a\x01HW\x80cqP\x18\xA6\x14a\x03\xEEW\x80cy\xBAP\x97\x14a\x04\x04W\x80c\x84V\xCBY\x14a\x04\x1AW\x80c\x84\xCA\xE1\x87\x14a\x040Wa\x01\xE2V[\x80c`\xB2Te\x14a\x03\x12W\x80ck1t\xE5\x14a\x03NW\x80ck\xA8\x18\xE1\x14a\x03\x8AW\x80cp<;.\x14a\x03\xC6Wa\x01\xE2V[\x80c?K\xA8:\x11a\x01\xB5W\x80c?K\xA8:\x14a\x02\x8CW\x80cO\x1E\xF2\x86\x14a\x02\xA2W\x80cR\xD1\x90-\x14a\x02\xBEW\x80c\\\x97Z\xBB\x14a\x02\xE8Wa\x01\xE2V[\x80c\x08nN\x1C\x14a\x01\xE6W\x80c\r\x8En,\x14a\x02\x10W\x80c\x18\xB7!M\x14a\x02:W\x80c:Qb\xE6\x14a\x02vW[_\x80\xFD[4\x80\x15a\x01\xF1W_\x80\xFD[Pa\x01\xFAa\x07\"V[`@Qa\x02\x07\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x1BW_\x80\xFD[Pa\x02$a\x07nV[`@Qa\x021\x91\x90a?-V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02EW_\x80\xFD[Pa\x02``\x04\x806\x03\x81\x01\x90a\x02[\x91\x90a?\x88V[a\x07\xE9V[`@Qa\x02m\x91\x90a@\x9AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x81W_\x80\xFD[Pa\x02\x8Aa\x08\x93V[\0[4\x80\x15a\x02\x97W_\x80\xFD[Pa\x02\xA0a\n$V[\0[a\x02\xBC`\x04\x806\x03\x81\x01\x90a\x02\xB7\x91\x90aB\x10V[a\n6V[\0[4\x80\x15a\x02\xC9W_\x80\xFD[Pa\x02\xD2a\nUV[`@Qa\x02\xDF\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\xF3W_\x80\xFD[Pa\x02\xFCa\n\x86V[`@Qa\x03\t\x91\x90aB\xB5V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x1DW_\x80\xFD[Pa\x038`\x04\x806\x03\x81\x01\x90a\x033\x91\x90a?\x88V[a\n\xA8V[`@Qa\x03E\x91\x90aB\xB5V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03YW_\x80\xFD[Pa\x03t`\x04\x806\x03\x81\x01\x90a\x03o\x91\x90a?\x88V[a\x0B2V[`@Qa\x03\x81\x91\x90a@\x9AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x95W_\x80\xFD[Pa\x03\xB0`\x04\x806\x03\x81\x01\x90a\x03\xAB\x91\x90a?\x88V[a\x0B\xDCV[`@Qa\x03\xBD\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\xD1W_\x80\xFD[Pa\x03\xEC`\x04\x806\x03\x81\x01\x90a\x03\xE7\x91\x90aC+V[a\x0C}V[\0[4\x80\x15a\x03\xF9W_\x80\xFD[Pa\x04\x02a\x0EnV[\0[4\x80\x15a\x04\x0FW_\x80\xFD[Pa\x04\x18a\x0E\x81V[\0[4\x80\x15a\x04%W_\x80\xFD[Pa\x04.a\x0F\x0FV[\0[4\x80\x15a\x04;W_\x80\xFD[Pa\x04V`\x04\x806\x03\x81\x01\x90a\x04Q\x91\x90aC\xAAV[a\x10JV[\0[4\x80\x15a\x04cW_\x80\xFD[Pa\x04~`\x04\x806\x03\x81\x01\x90a\x04y\x91\x90a?\x88V[a\x11bV[`@Qa\x04\x8B\x91\x90aD\x8EV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\x9FW_\x80\xFD[Pa\x04\xA8a\x11\x82V[`@Qa\x04\xB5\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xC9W_\x80\xFD[Pa\x04\xE4`\x04\x806\x03\x81\x01\x90a\x04\xDF\x91\x90a?\x88V[a\x11\xB7V[`@Qa\x04\xF1\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\x05W_\x80\xFD[Pa\x05\x0Ea\x12FV[\0[4\x80\x15a\x05\x1BW_\x80\xFD[Pa\x05$a\x12\xFAV[`@Qa\x051\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05EW_\x80\xFD[Pa\x05``\x04\x806\x03\x81\x01\x90a\x05[\x91\x90aD\xCFV[a\x13FV[\0[4\x80\x15a\x05mW_\x80\xFD[Pa\x05\x88`\x04\x806\x03\x81\x01\x90a\x05\x83\x91\x90a?\x88V[a\x14[V[`@Qa\x05\x95\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\xA9W_\x80\xFD[Pa\x05\xB2a\x14\xEAV[`@Qa\x05\xBF\x91\x90a?-V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\xD3W_\x80\xFD[Pa\x05\xDCa\x15#V[`@Qa\x05\xE9\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\xFDW_\x80\xFD[Pa\x06\x18`\x04\x806\x03\x81\x01\x90a\x06\x13\x91\x90aD\xCFV[a\x15oV[`@Qa\x06%\x91\x90aE\xBCV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x069W_\x80\xFD[Pa\x06T`\x04\x806\x03\x81\x01\x90a\x06O\x91\x90a?\x88V[a\x18\x8FV[\0[4\x80\x15a\x06aW_\x80\xFD[Pa\x06ja\x19PV[`@Qa\x06w\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x06\x8BW_\x80\xFD[Pa\x06\xA6`\x04\x806\x03\x81\x01\x90a\x06\xA1\x91\x90a?\x88V[a\x19\x85V[\0[4\x80\x15a\x06\xB3W_\x80\xFD[Pa\x06\xCE`\x04\x806\x03\x81\x01\x90a\x06\xC9\x91\x90aD\xCFV[a\x1AFV[\0[4\x80\x15a\x06\xDBW_\x80\xFD[Pa\x06\xF6`\x04\x806\x03\x81\x01\x90a\x06\xF1\x91\x90aE\xDCV[a\x1B[V[\0[4\x80\x15a\x07\x03W_\x80\xFD[Pa\x07\x0Ca\x1C\x14V[`@Qa\x07\x19\x91\x90aG\x98V[`@Q\x80\x91\x03\x90\xF3[_\x80a\x07,a\x1E\x99V[\x90P_\x81\x03a\x07gW`@Q\x7F!\xFB\x08\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[```@Q\x80`@\x01`@R\x80`\x13\x81R` \x01\x7FCoprocessorContexts\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x07\xAF_a\x1E\xB2V[a\x07\xB9`\x01a\x1E\xB2V[a\x07\xC2_a\x1E\xB2V[`@Q` \x01a\x07\xD5\x94\x93\x92\x91\x90aH\x86V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x90V[``_a\x07\xF4a\x1F|V[\x90P\x80`\t\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\x08\x86W` \x02\x82\x01\x91\x90_R` _ \x90[\x81_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x08=W[PPPPP\x91PP\x91\x90PV[a\x08\x9Ba\x1F\xA3V[_a\x08\xA4a\x1F|V[\x90P_\x81_\x01`\x02\x01T\x90P_\x81\x14\x15\x80\x15a\x08\xD3WP\x81`\x0C\x01_\x82\x81R` \x01\x90\x81R` \x01_ TB\x10\x15[\x15a\t\xA8W_a\x08\xE1a\x12\xFAV[\x90P_\x83`\x0E\x01_\x83\x81R` \x01\x90\x81R` \x01_ TBa\t\x03\x91\x90aI\x11V[\x90P\x80\x84`\r\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UPa\t)\x84_\x01\x83a\x1F\xE4V[\x7F0\x80\xF2\xB8\r\xDAGH\xCA)&\xA6A\xFAP\x07sPX\xDC_Z\xB2YN\xEC\xA7A\x97\xA3\xAC\xCC\x82\x82`@Qa\tZ\x92\x91\x90aIDV[`@Q\x80\x91\x03\x90\xA1a\tn\x84_\x01\x84a \xBAV[\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x83`@Qa\t\x9D\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xA1PP[_a\t\xB1a\x1E\x99V[\x90P_\x81\x14\x15\x80\x15a\t\xD6WP\x82`\r\x01_\x82\x81R` \x01\x90\x81R` \x01_ TB\x10\x15[\x15a\n\x1FWa\t\xE7\x83_\x01\x82a!\xB5V[\x7F\x1B\xAA\x08\xD8\xDE\x18\xE8\xE2(v\x91\xB10\x97H\x01\t\x81\xEB\xDF\xD1*\x17=\x85teuH\xA5(\x98\x81`@Qa\n\x16\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xA1[PPPV[a\n,a\"\xB8V[a\n4a#?V[V[a\n>a#\xADV[a\nG\x82a$\x93V[a\nQ\x82\x82a$\x9EV[PPV[_a\n^a%\xBCV[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x90P\x90V[_\x80a\n\x90a&CV[\x90P\x80_\x01_\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x91PP\x90V[_\x81_a\n\xB3a\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x0B\x0EW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0B\x05\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[a\x0B\x16a\x12\xFAV[\x84\x14\x80a\x0B)WPa\x0B&a\x1E\x99V[\x84\x14[\x92PPP\x91\x90PV[``_a\x0B=a\x1F|V[\x90P\x80`\x0B\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80T\x80\x15a\x0B\xCFW` \x02\x82\x01\x91\x90_R` _ \x90[\x81_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\x0B\x86W[PPPPP\x91PP\x91\x90PV[_\x81_a\x0B\xE7a\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x0CBW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0C9\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x0CKa\x1F|V[\x90P`\x01\x80\x82`\t\x01_\x88\x81R` \x01\x90\x81R` \x01_ \x80T\x90P\x90\x1Ca\x0Cs\x91\x90aI\x11V[\x93PPPP\x91\x90PV[`\x01a\x0C\x87a&jV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0C\xC8W`@Q\x7FoOs\x1F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02_a\x0C\xD3a&\x8EV[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x80a\r\x1BWP\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15[\x15a\rRW`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPa\r\xA7a\r\xA2a\x11\x82V[a&\xB5V[a\r\xAFa&\xC9V[_a\r\xBC_\x87\x87\x87a&\xDBV[\x90P_a\r\xC7a\x1F|V[\x90Pa\r\xD8\x81_\x01\x83_\x01Qa \xBAV[\x7F\x13\xC5\xFDc\x1C\xA01U/\xE9\xE3\x8D\x91\x19\x10\xA5\x98\x0Ff\x08\xEE\xA3#in\x04\xDB\x0F\xEC\x0C\x95W\x87\x87\x87`@Qa\x0E\x0B\x93\x92\x91\x90aKwV[`@Q\x80\x91\x03\x90\xA1PP_\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x82`@Qa\x0E_\x91\x90aK\xC9V[`@Q\x80\x91\x03\x90\xA1PPPPPV[a\x0Eva\"\xB8V[a\x0E\x7F_a/:V[V[_a\x0E\x8Aa/wV[\x90P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0E\xABa\x19PV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0F\x03W\x80`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0E\xFA\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xFD[a\x0F\x0C\x81a/:V[PV[a\x0F\x17a\x11\x82V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15\x80\x15a\x0F\xFEWPs\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cp\x08\xB5H`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F\xAAW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0F\xCE\x91\x90aK\xF6V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x163s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a\x10@W3`@Q\x7FF\xC0\xD9\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x107\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xFD[a\x10Ha/~V[V[a\x10Ra\"\xB8V[_a\x10[a\x1F|V[\x90P_a\x10fa\x1C\x14V[\x90P_a\x10x\x82_\x01Q\x88\x88\x88a&\xDBV[\x90P\x7F\xAFX\xA1\x8ANAY\xFApl\rN\x0F\xDA\xB0\x93\x0F\x97g\x93\x19\xCD\xDB\xC9\xC9\x19\x9B\x0C\xD1\x04\xB6\xEF\x82\x82\x86`@Qa\x10\xAD\x93\x92\x91\x90aLtV[`@Q\x80\x91\x03\x90\xA1a\x10\xC4\x83_\x01\x82_\x01Qa/\xEDV[a\x10\xD3\x83_\x01\x82_\x01Qa1RV[_\x84_\x015Ba\x10\xE3\x91\x90aI\x11V[\x90P\x80\x84`\x0C\x01_\x84_\x01Q\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x84` \x015\x84`\x0E\x01_\x85_\x01Q\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F+\x01\x88\xFCK\xEDG\x1E\xE2\x16\xDCl\xB9e\x0B\xEB(\x88\x92\x03N\xBE\xE70\x1B29\x1A\xDD*f\xB8\x82\x82`@Qa\x11P\x92\x91\x90aL\xB7V[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[_\x80a\x11la\x1F|V[\x90Pa\x11z\x81_\x01\x84a2(V[\x91PP\x91\x90PV[_\x80a\x11\x8Ca2PV[\x90P\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91PP\x90V[_\x81_a\x11\xC2a\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x12\x1DW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x12\x14\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x12&a\x1F|V[\x90P\x80`\r\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x93PPPP\x91\x90PV[a\x12Na\"\xB8V[_a\x12Wa\x07\"V[\x90P_a\x12ba\x1F|V[\x90P_a\x12ma2wV[\x90Pa\x12{\x82_\x01\x82a!\xB5V[\x7F\x1B\xAA\x08\xD8\xDE\x18\xE8\xE2(v\x91\xB10\x97H\x01\t\x81\xEB\xDF\xD1*\x17=\x85teuH\xA5(\x98\x81`@Qa\x12\xAA\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xA1a\x12\xBE\x82_\x01\x84a \xBAV[\x7Fl\x8C\x04\xC9\xFE\xA37r\x0B}\xFA\xDC\xA3e\xE8P\x03Q\x14\xFD\x08\x1BX\xD00\xAF\xBE\x8B]\xC3\xBEq\x83`@Qa\x12\xED\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xA1PPPV[_\x80a\x13\x04a2wV[\x90P_\x81\x03a\x13?W`@Q\x7F\x04e\x93\xEA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[\x81_a\x13Pa\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x13\xABW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x13\xA2\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x13\xB4a\x1F|V[\x90P\x80`\n\x01_\x86\x81R` \x01\x90\x81R` \x01_ _\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x14TW\x84\x84`@Q\x7FUO\x8C_\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x14K\x92\x91\x90aL\xE5V[`@Q\x80\x91\x03\x90\xFD[PPPPPV[_\x81_a\x14fa\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x14\xC1W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x14\xB8\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x14\xCAa\x1F|V[\x90P\x80`\x0C\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x93PPPP\x91\x90PV[`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01\x7F5.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81V[_\x80a\x15-a2\x90V[\x90P_\x81\x03a\x15hW`@Q\x7F\xB9\xE8a\xB2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x91PP\x90V[a\x15wa=\xFBV[\x82_a\x15\x81a\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x15\xDCW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x15\xD3\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x15\xE5a\x1F|V[\x90P_\x81`\x07\x01_\x88\x81R` \x01\x90\x81R` \x01_ _\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta\x16P\x90aM9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x16|\x90aM9V[\x80\x15a\x16\xC7W\x80`\x1F\x10a\x16\x9EWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x16\xC7V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x16\xAAW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta\x17\x8A\x90aM9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x17\xB6\x90aM9V[\x80\x15a\x18\x01W\x80`\x1F\x10a\x17\xD8Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x18\x01V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x17\xE4W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81` \x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x18\x82W\x86\x86`@Q\x7F\xC3\x12\xE7>\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x18y\x92\x91\x90aL\xE5V[`@Q\x80\x91\x03\x90\xFD[\x80\x94PPPPP\x92\x91PPV[a\x18\x97a\"\xB8V[\x80_a\x18\xA1a\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x18\xFCW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x18\xF3\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x19\x05a\x1F|V[\x90Pa\x19\x13\x81_\x01\x85a2\xA9V[\x7F\xF2\x0B)\x98\x04\xC9\xC1\xD6\xDA;\x82ALz\xA0\xA8E\xCD\xBA\xBA\xE2\xD9\x0EF\xE3`\xA3y\xA7{{\xE5\x84`@Qa\x19B\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xA1PPPPV[_\x80a\x19Za4\x12V[\x90P\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91PP\x90V[a\x19\x8Da\"\xB8V[\x80_a\x19\x97a\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x19\xF2W\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x19\xE9\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x19\xFBa\x1F|V[\x90Pa\x1A\t\x81_\x01\x85a49V[\x7F\xEE~\xF89cAq%\xD2t0x\x9F\xC6\xE9A\x948\x1E\x82\xC3\xCD\xA6\x82`\xD0\xE7\xCF\xC3\x1E\xAF!\x84`@Qa\x1A8\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xA1PPPPV[\x81_a\x1APa\x1F|V[\x90P_\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x01T\x03a\x1A\xABW\x81`@Q\x7F\xAB\xF9\xE7\xB0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1A\xA2\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_a\x1A\xB4a\x1F|V[\x90P\x80`\x08\x01_\x86\x81R` \x01\x90\x81R` \x01_ _\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x1BTW\x84\x84`@Q\x7F)\xA9\x93\xC1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1BK\x92\x91\x90aL\xE5V[`@Q\x80\x91\x03\x90\xFD[PPPPPV[a\x1Bca\"\xB8V[_a\x1Bla4\x12V[\x90P\x81\x81_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x1B\xCEa\x11\x82V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F8\xD1k\x8C\xAC\"\xD9\x9F\xC7\xC1$\xB9\xCD\r\xE2\xD3\xFA\x1F\xAE\xF4 \xBF\xE7\x91\xD8\xC3b\xD7e\xE2'\0`@Q`@Q\x80\x91\x03\x90\xA3PPV[a\x1C\x1Ca>MV[_a\x1C%a\x12\xFAV[\x90P_a\x1C0a\x1F|V[\x90P\x80`\x05\x01_\x83\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01_\x90[\x82\x82\x10\x15a\x1E\x8AW\x83\x82\x90_R` _ \x90`\x04\x02\x01`@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta\x1C\xC1\x90aM9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1C\xED\x90aM9V[\x80\x15a\x1D8W\x80`\x1F\x10a\x1D\x0FWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1D8V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1D\x1BW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta\x1D\xFB\x90aM9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x1E'\x90aM9V[\x80\x15a\x1ErW\x80`\x1F\x10a\x1EIWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x1ErV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x1EUW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90a\x1C\x91V[PPPP\x81RPP\x92PPP\x90V[_\x80a\x1E\xA3a\x1F|V[\x90P\x80_\x01`\x04\x01T\x91PP\x90V[``_`\x01a\x1E\xC0\x84a5\xD9V[\x01\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E\xDEWa\x1E\xDDa@\xECV[[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x1F\x10W\x81` \x01`\x01\x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P_\x82` \x01\x82\x01\x90P[`\x01\x15a\x1FqW\x80\x80`\x01\x90\x03\x91PP\x7F0123456789abcdef\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\n\x86\x06\x1A\x81S`\n\x85\x81a\x1FfWa\x1FeaMiV[[\x04\x94P_\x85\x03a\x1F\x1DW[\x81\x93PPPP\x91\x90PV[_\x7F\x1D\xA8\xA9\xA0e\xA2\xF0\xA8\x95\xC4W\x06^\xDD\xD3\xCFJM\rS@\xAA\xA0\xCAT\xD3\xCD[Jj\xAF\0\x90P\x90V[a\x1F\xABa\n\x86V[\x15a\x1F\xE2W`@Q\x7F\xD9<\x06e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[\x80_\x81\x03a \x1EW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a (\x83\x83a7*V[a iW\x81`@Q\x7F3\x14\x86\xB3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a `\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[`\x04\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a \x9EWa \x9DaD\x1BV[[\x02\x17\x90UP\x81\x83`\x04\x01\x81\x90UP_\x83`\x03\x01\x81\x90UPPPPV[\x80_\x81\x03a \xF4W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a \xFE\x83\x83a7yV[\x15\x80\x15a!\x12WPa!\x10\x83\x83a7\xC8V[\x15[\x80\x15a!\"WP_\x83`\x03\x01T\x14\x15[\x15a!dW\x81`@Q\x7F\x12\xB4\x9E=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a![\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[`\x03\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a!\x99Wa!\x98aD\x1BV[[\x02\x17\x90UP\x81\x83`\x03\x01\x81\x90UP_\x83`\x02\x01\x81\x90UPPPPV[\x80_\x81\x03a!\xEFW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a!\xF9\x83\x83a7*V[\x15\x80\x15a\"\rWPa\"\x0B\x83\x83a7\xC8V[\x15[\x15a\"OW\x81`@Q\x7F+6R\xD1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"F\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[`\x05\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a\"\x84Wa\"\x83aD\x1BV[[\x02\x17\x90UP\x81\x83`\x03\x01T\x03a\"\x9EW_\x83`\x03\x01\x81\x90UP[\x81\x83`\x04\x01T\x03a\"\xB3W_\x83`\x04\x01\x81\x90UP[PPPV[a\"\xC0a/wV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\"\xDEa\x11\x82V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a#=Wa#\x01a/wV[`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a#4\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xFD[V[a#Ga8\x17V[_a#Pa&CV[\x90P_\x81_\x01_a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F]\xB9\xEE\nI[\xF2\xE6\xFF\x9C\x91\xA7\x83L\x1B\xA4\xFD\xD2D\xA5\xE8\xAANS{\xD3\x8A\xEA\xE4\xB0s\xAAa#\x95a/wV[`@Qa#\xA2\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xA1PV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x80a$ZWP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a$Aa8WV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a$\x91W`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[a$\x9Ba\"\xB8V[PV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cR\xD1\x90-`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a%\x06WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a%\x03\x91\x90aM\xC0V[`\x01[a%GW\x81`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%>\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xFD[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x81\x14a%\xADW\x80`@Q\x7F\xAA\x1DI\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%\xA4\x91\x90aB\x82V[`@Q\x80\x91\x03\x90\xFD[a%\xB7\x83\x83a8\xAAV[PPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a&AW`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_\x7F\xCD^\xD1\\n\x18~w\xE9\xAE\xE8\x81\x84\xC2\x1FO!\x82\xABX'\xCB;~\x07\xFB\xED\xCDc\xF03\0\x90P\x90V[_a&sa&\x8EV[_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[a&\xBDa9\x1CV[a&\xC6\x81a9\\V[PV[a&\xD1a9\x1CV[a&\xD9a9\xE0V[V[a&\xE3a>MV[_\x83\x83\x90P\x03a'\x1FW`@Q\x7F\x8A\xF0\x82\xEF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a'(a\x1F|V[\x90P\x80`\x06\x01_\x81T\x80\x92\x91\x90a'>\x90aM\xEBV[\x91\x90PUP_\x81`\x06\x01T\x90P\x80\x82`\x05\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x01\x81\x90UP\x86\x82`\x05\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x01\x01\x81\x90UP\x85\x82`\x05\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x02\x01\x81\x90UP_[\x85\x85\x90P\x81\x10\x15a($W\x82`\x05\x01_\x83\x81R` \x01\x90\x81R` \x01_ `\x03\x01\x86\x86\x83\x81\x81\x10a'\xD1Wa'\xD0aN2V[[\x90P` \x02\x81\x01\x90a'\xE3\x91\x90aNkV[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x90`\x04\x02\x01_\x90\x91\x90\x91\x90\x91P\x81\x81a(\x15\x91\x90aR\xC2V[PP\x80\x80`\x01\x01\x91PPa'\x9DV[P_[\x85\x85\x90P\x81\x10\x15a,\xCDW_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86\x83\x81\x81\x10a(\\Wa([aN2V[[\x90P` \x02\x81\x01\x90a(n\x91\x90aNkV[` \x01` \x81\x01\x90a(\x80\x91\x90aE\xDCV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a(\xDAW\x81\x81`@Q\x7FL\x10\x06\xF3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a(\xD1\x92\x91\x90aIDV[`@Q\x80\x91\x03\x90\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x86\x83\x81\x81\x10a)\x04Wa)\x03aN2V[[\x90P` \x02\x81\x01\x90a)\x16\x91\x90aNkV[`@\x01` \x81\x01\x90a)(\x91\x90aE\xDCV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a)\x82W\x81\x81`@Q\x7F\x8At\x88\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a)y\x92\x91\x90aIDV[`@Q\x80\x91\x03\x90\xFD[\x85\x85\x82\x81\x81\x10a)\x95Wa)\x94aN2V[[\x90P` \x02\x81\x01\x90a)\xA7\x91\x90aNkV[\x83`\x07\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a)\xCEWa)\xCDaN2V[[\x90P` \x02\x81\x01\x90a)\xE0\x91\x90aNkV[` \x01` \x81\x01\x90a)\xF2\x91\x90aE\xDCV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ \x81\x81a*7\x91\x90aR\xC2V[\x90PP`\x01\x83`\x08\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a*cWa*baN2V[[\x90P` \x02\x81\x01\x90a*u\x91\x90aNkV[` \x01` \x81\x01\x90a*\x87\x91\x90aE\xDCV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x82`\t\x01_\x83\x81R` \x01\x90\x81R` \x01_ \x86\x86\x83\x81\x81\x10a*\xFCWa*\xFBaN2V[[\x90P` \x02\x81\x01\x90a+\x0E\x91\x90aNkV[` \x01` \x81\x01\x90a+ \x91\x90aE\xDCV[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x83`\n\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x88\x88\x85\x81\x81\x10a+\xA6Wa+\xA5aN2V[[\x90P` \x02\x81\x01\x90a+\xB8\x91\x90aNkV[`@\x01` \x81\x01\x90a+\xCA\x91\x90aE\xDCV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x82`\x0B\x01_\x83\x81R` \x01\x90\x81R` \x01_ \x86\x86\x83\x81\x81\x10a,?Wa,>aN2V[[\x90P` \x02\x81\x01\x90a,Q\x91\x90aNkV[`@\x01` \x81\x01\x90a,c\x91\x90aE\xDCV[\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa('V[P\x81`\x05\x01_\x82\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\x80\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01\x80T\x80` \x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01_\x90[\x82\x82\x10\x15a/&W\x83\x82\x90_R` _ \x90`\x04\x02\x01`@Q\x80`\x80\x01`@R\x90\x81_\x82\x01\x80Ta-]\x90aM9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta-\x89\x90aM9V[\x80\x15a-\xD4W\x80`\x1F\x10a-\xABWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a-\xD4V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a-\xB7W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x02\x82\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01`\x03\x82\x01\x80Ta.\x97\x90aM9V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta.\xC3\x90aM9V[\x80\x15a/\x0EW\x80`\x1F\x10a.\xE5Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a/\x0EV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a.\xF1W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x81RPP\x81R` \x01\x90`\x01\x01\x90a--V[PPPP\x81RPP\x92PPP\x94\x93PPPPV[_a/Ca4\x12V[\x90P\x80_\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90Ua/s\x82a:\x10V[PPV[_3\x90P\x90V[a/\x86a\x1F\xA3V[_a/\x8Fa&CV[\x90P`\x01\x81_\x01_a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7Fb\xE7\x8C\xEA\x01\xBE\xE3 \xCDNB\x02p\xB5\xEAt\0\r\x11\xB0\xC9\xF7GT\xEB\xDB\xFCTK\x05\xA2Xa/\xD5a/wV[`@Qa/\xE2\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xA1PV[\x80_\x81\x03a0'W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a01\x83\x83a:\xE1V[a0rW\x81`@Q\x7FfS\xF6\xD7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a0i\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_\x83`\x02\x01T\x14a0\xBEW\x82`\x02\x01T`@Q\x7F\xC4p\xC0\"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a0\xB5\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[_\x83`\x04\x01T\x14a1\nW\x82`\x04\x01T`@Q\x7Fp\"\xECA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a1\x01\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[`\x01\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a1?Wa1>aD\x1BV[[\x02\x17\x90UP\x81\x83`\x01\x01\x81\x90UPPPPV[\x80_\x81\x03a1\x8CW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a1\x96\x83\x83a;/V[a1\xD7W\x81`@Q\x7F\xC0\xB5\xEEf\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a1\xCE\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[`\x02\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a2\x0CWa2\x0BaD\x1BV[[\x02\x17\x90UP\x81\x83`\x02\x01\x81\x90UP_\x83`\x01\x01\x81\x90UPPPPV[_\x82_\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x92\x91PPV[_\x7F\x90\x16\xD0\x9Dr\xD4\x0F\xDA\xE2\xFD\x8C\xEA\xC6\xB6#Lw\x06!O\xD3\x9C\x1C\xD1\xE6\t\xA0R\x8C\x19\x93\0\x90P\x90V[_\x80a2\x81a\x1F|V[\x90P\x80_\x01`\x03\x01T\x91PP\x90V[_\x80a2\x9Aa\x1F|V[\x90P\x80_\x01`\x02\x01T\x91PP\x90V[\x80_\x81\x03a2\xE3W`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82\x82a2\xEF\x82\x82a:\xE1V[\x15a31W\x80`@Q\x7FaTL\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a3(\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[a3;\x85\x85a7*V[\x15a3}W\x83`@Q\x7F\xCDINI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a3t\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[`\x07\x85_\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a3\xB2Wa3\xB1aD\x1BV[[\x02\x17\x90UP\x83\x85`\x01\x01T\x03a3\xCCW_\x85`\x01\x01\x81\x90UP[\x83\x85`\x02\x01T\x03a3\xE1W_\x85`\x02\x01\x81\x90UP[\x83\x85`\x03\x01T\x03a3\xF6W_\x85`\x03\x01\x81\x90UP[\x83\x85`\x04\x01T\x03a4\x0BW_\x85`\x04\x01\x81\x90UP[PPPPPV[_\x7F#~\x15\x82\"\xE3\xE6\x96\x8Br\xB9\xDB\r\x80C\xAA\xCF\x07J\xD9\xF6P\xF0\xD1`kM\x82\xEEC,\0\x90P\x90V[\x80_\x81\x03a4sW`@Q\x7F\xCB\x17\xB7\xA5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82\x82a4\x7F\x82\x82a:\xE1V[\x15a4\xC1W\x80`@Q\x7FaTL\xFC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a4\xB8\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[a4\xCB\x85\x85a;/V[\x15a5\rW\x83`@Q\x7F\r\xDD\x14\xCA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a5\x04\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[a5\x17\x85\x85a7*V[\x15a5YW\x83`@Q\x7F\xCDINI\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a5P\x91\x90a>\x8AV[`@Q\x80\x91\x03\x90\xFD[`\x06\x85_\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x07\x81\x11\x15a5\x8EWa5\x8DaD\x1BV[[\x02\x17\x90UP\x83\x85`\x02\x01T\x03a5\xA8W_\x85`\x02\x01\x81\x90UP[\x83\x85`\x03\x01T\x03a5\xBDW_\x85`\x03\x01\x81\x90UP[\x83\x85`\x04\x01T\x03a5\xD2W_\x85`\x04\x01\x81\x90UP[PPPPPV[_\x80_\x90Pz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x10a65Wz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x81a6+Wa6*aMiV[[\x04\x92P`@\x81\x01\x90P[m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x10a6rWm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x81a6hWa6gaMiV[[\x04\x92P` \x81\x01\x90P[f#\x86\xF2o\xC1\0\0\x83\x10a6\xA1Wf#\x86\xF2o\xC1\0\0\x83\x81a6\x97Wa6\x96aMiV[[\x04\x92P`\x10\x81\x01\x90P[c\x05\xF5\xE1\0\x83\x10a6\xCAWc\x05\xF5\xE1\0\x83\x81a6\xC0Wa6\xBFaMiV[[\x04\x92P`\x08\x81\x01\x90P[a'\x10\x83\x10a6\xEFWa'\x10\x83\x81a6\xE5Wa6\xE4aMiV[[\x04\x92P`\x04\x81\x01\x90P[`d\x83\x10a7\x12W`d\x83\x81a7\x08Wa7\x07aMiV[[\x04\x92P`\x02\x81\x01\x90P[`\n\x83\x10a7!W`\x01\x81\x01\x90P[\x80\x91PP\x91\x90PV[_`\x03`\x07\x81\x11\x15a7?Wa7>aD\x1BV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a7pWa7oaD\x1BV[[\x14\x90P\x92\x91PPV[_`\x02`\x07\x81\x11\x15a7\x8EWa7\x8DaD\x1BV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a7\xBFWa7\xBEaD\x1BV[[\x14\x90P\x92\x91PPV[_`\x04`\x07\x81\x11\x15a7\xDDWa7\xDCaD\x1BV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a8\x0EWa8\raD\x1BV[[\x14\x90P\x92\x91PPV[a8\x1Fa\n\x86V[a8UW`@Q\x7F\x8D\xFC +\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_a8\x83\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba;~V[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[a8\xB3\x82a;\x87V[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;`@Q`@Q\x80\x91\x03\x90\xA2_\x81Q\x11\x15a9\x0FWa9\t\x82\x82a<PV[Pa9\x18V[a9\x17a<\xD0V[[PPV[a9$a=\x0CV[a9ZW`@Q\x7F\xD7\xE6\xBC\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[a9da9\x1CV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a9\xD4W_`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a9\xCB\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xFD[a9\xDD\x81a/:V[PV[a9\xE8a9\x1CV[_a9\xF1a&CV[\x90P_\x81_\x01_a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPPV[_a:\x19a2PV[\x90P_\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x82\x82_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPPV[_\x80`\x07\x81\x11\x15a:\xF5Wa:\xF4aD\x1BV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a;&Wa;%aD\x1BV[[\x14\x90P\x92\x91PPV[_`\x01`\x07\x81\x11\x15a;DWa;CaD\x1BV[[\x83_\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x07\x81\x11\x15a;uWa;taD\x1BV[[\x14\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a;\xE2W\x80`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a;\xD9\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xFD[\x80a<\x0E\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba;~V[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[``_\x80\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84`@Qa<y\x91\x90aS\x14V[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a<\xB1W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a<\xB6V[``\x91P[P\x91P\x91Pa<\xC6\x85\x83\x83a=*V[\x92PPP\x92\x91PPV[_4\x11\x15a=\nW`@Q\x7F\xB3\x98\x97\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_a=\x15a&\x8EV[_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x90V[``\x82a=?Wa=:\x82a=\xB7V[a=\xAFV[_\x82Q\x14\x80\x15a=eWP_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14[\x15a=\xA7W\x83`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a=\x9E\x91\x90aD\xB6V[`@Q\x80\x91\x03\x90\xFD[\x81\x90Pa=\xB0V[[\x93\x92PPPV[_\x81Q\x11\x15a=\xC9W\x80Q\x80\x82` \x01\xFD[`@Q\x7F\xD6\xBD\xA2u\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q\x80`\x80\x01`@R\x80``\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01``\x81RP\x90V[`@Q\x80`\x80\x01`@R\x80_\x81R` \x01_\x81R` \x01_\x81R` \x01``\x81RP\x90V[_\x81\x90P\x91\x90PV[a>\x84\x81a>rV[\x82RPPV[_` \x82\x01\x90Pa>\x9D_\x83\x01\x84a>{V[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_[\x83\x81\x10\x15a>\xDAW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa>\xBFV[_\x84\x84\x01RPPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a>\xFF\x82a>\xA3V[a?\t\x81\x85a>\xADV[\x93Pa?\x19\x81\x85` \x86\x01a>\xBDV[a?\"\x81a>\xE5V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra?E\x81\x84a>\xF5V[\x90P\x92\x91PPV[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[a?g\x81a>rV[\x81\x14a?qW_\x80\xFD[PV[_\x815\x90Pa?\x82\x81a?^V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a?\x9DWa?\x9Ca?VV[[_a?\xAA\x84\x82\x85\x01a?tV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a@\x05\x82a?\xDCV[\x90P\x91\x90PV[a@\x15\x81a?\xFBV[\x82RPPV[_a@&\x83\x83a@\x0CV[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a@H\x82a?\xB3V[a@R\x81\x85a?\xBDV[\x93Pa@]\x83a?\xCDV[\x80_[\x83\x81\x10\x15a@\x8DW\x81Qa@t\x88\x82a@\x1BV[\x97Pa@\x7F\x83a@2V[\x92PP`\x01\x81\x01\x90Pa@`V[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra@\xB2\x81\x84a@>V[\x90P\x92\x91PPV[a@\xC3\x81a?\xFBV[\x81\x14a@\xCDW_\x80\xFD[PV[_\x815\x90Pa@\xDE\x81a@\xBAV[\x92\x91PPV[_\x80\xFD[_\x80\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[aA\"\x82a>\xE5V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15aAAWaA@a@\xECV[[\x80`@RPPPV[_aASa?MV[\x90PaA_\x82\x82aA\x19V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aA~WaA}a@\xECV[[aA\x87\x82a>\xE5V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_aA\xB4aA\xAF\x84aAdV[aAJV[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15aA\xD0WaA\xCFa@\xE8V[[aA\xDB\x84\x82\x85aA\x94V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12aA\xF7WaA\xF6a@\xE4V[[\x815aB\x07\x84\x82` \x86\x01aA\xA2V[\x91PP\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aB&WaB%a?VV[[_aB3\x85\x82\x86\x01a@\xD0V[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aBTWaBSa?ZV[[aB`\x85\x82\x86\x01aA\xE3V[\x91PP\x92P\x92\x90PV[_\x81\x90P\x91\x90PV[aB|\x81aBjV[\x82RPPV[_` \x82\x01\x90PaB\x95_\x83\x01\x84aBsV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[aB\xAF\x81aB\x9BV[\x82RPPV[_` \x82\x01\x90PaB\xC8_\x83\x01\x84aB\xA6V[\x92\x91PPV[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12aB\xEBWaB\xEAa@\xE4V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aC\x08WaC\x07aB\xCEV[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15aC$WaC#aB\xD2V[[\x92P\x92\x90PV[_\x80_`@\x84\x86\x03\x12\x15aCBWaCAa?VV[[_aCO\x86\x82\x87\x01a?tV[\x93PP` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aCpWaCoa?ZV[[aC|\x86\x82\x87\x01aB\xD6V[\x92P\x92PP\x92P\x92P\x92V[_\x80\xFD[_`@\x82\x84\x03\x12\x15aC\xA1WaC\xA0aC\x88V[[\x81\x90P\x92\x91PPV[_\x80_\x80`\x80\x85\x87\x03\x12\x15aC\xC2WaC\xC1a?VV[[_aC\xCF\x87\x82\x88\x01a?tV[\x94PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aC\xF0WaC\xEFa?ZV[[aC\xFC\x87\x82\x88\x01aB\xD6V[\x93P\x93PP`@aD\x0F\x87\x82\x88\x01aC\x8CV[\x91PP\x92\x95\x91\x94P\x92PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`!`\x04R`$_\xFD[`\x08\x81\x10aDYWaDXaD\x1BV[[PV[_\x81\x90PaDi\x82aDHV[\x91\x90PV[_aDx\x82aD\\V[\x90P\x91\x90PV[aD\x88\x81aDnV[\x82RPPV[_` \x82\x01\x90PaD\xA1_\x83\x01\x84aD\x7FV[\x92\x91PPV[aD\xB0\x81a?\xFBV[\x82RPPV[_` \x82\x01\x90PaD\xC9_\x83\x01\x84aD\xA7V[\x92\x91PPV[_\x80`@\x83\x85\x03\x12\x15aD\xE5WaD\xE4a?VV[[_aD\xF2\x85\x82\x86\x01a?tV[\x92PP` aE\x03\x85\x82\x86\x01a@\xD0V[\x91PP\x92P\x92\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_aE'\x82a>\xA3V[aE1\x81\x85aE\rV[\x93PaEA\x81\x85` \x86\x01a>\xBDV[aEJ\x81a>\xE5V[\x84\x01\x91PP\x92\x91PPV[_`\x80\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01RaEo\x82\x82aE\x1DV[\x91PP` \x83\x01QaE\x84` \x86\x01\x82a@\x0CV[P`@\x83\x01QaE\x97`@\x86\x01\x82a@\x0CV[P``\x83\x01Q\x84\x82\x03``\x86\x01RaE\xAF\x82\x82aE\x1DV[\x91PP\x80\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaE\xD4\x81\x84aEUV[\x90P\x92\x91PPV[_` \x82\x84\x03\x12\x15aE\xF1WaE\xF0a?VV[[_aE\xFE\x84\x82\x85\x01a@\xD0V[\x91PP\x92\x91PPV[aF\x10\x81a>rV[\x82RPPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_`\x80\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01RaFY\x82\x82aE\x1DV[\x91PP` \x83\x01QaFn` \x86\x01\x82a@\x0CV[P`@\x83\x01QaF\x81`@\x86\x01\x82a@\x0CV[P``\x83\x01Q\x84\x82\x03``\x86\x01RaF\x99\x82\x82aE\x1DV[\x91PP\x80\x91PP\x92\x91PPV[_aF\xB1\x83\x83aF?V[\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_aF\xCF\x82aF\x16V[aF\xD9\x81\x85aF V[\x93P\x83` \x82\x02\x85\x01aF\xEB\x85aF0V[\x80_[\x85\x81\x10\x15aG&W\x84\x84\x03\x89R\x81QaG\x07\x85\x82aF\xA6V[\x94PaG\x12\x83aF\xB9V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90PaF\xEEV[P\x82\x97P\x87\x95PPPPPP\x92\x91PPV[_`\x80\x83\x01_\x83\x01QaGM_\x86\x01\x82aF\x07V[P` \x83\x01QaG`` \x86\x01\x82aF\x07V[P`@\x83\x01QaGs`@\x86\x01\x82aF\x07V[P``\x83\x01Q\x84\x82\x03``\x86\x01RaG\x8B\x82\x82aF\xC5V[\x91PP\x80\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01RaG\xB0\x81\x84aG8V[\x90P\x92\x91PPV[_\x81\x90P\x92\x91PPV[_aG\xCC\x82a>\xA3V[aG\xD6\x81\x85aG\xB8V[\x93PaG\xE6\x81\x85` \x86\x01a>\xBDV[\x80\x84\x01\x91PP\x92\x91PPV[\x7F v\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_aH&`\x02\x83aG\xB8V[\x91PaH1\x82aG\xF2V[`\x02\x82\x01\x90P\x91\x90PV[\x7F.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_aHp`\x01\x83aG\xB8V[\x91PaH{\x82aH<V[`\x01\x82\x01\x90P\x91\x90PV[_aH\x91\x82\x87aG\xC2V[\x91PaH\x9C\x82aH\x1AV[\x91PaH\xA8\x82\x86aG\xC2V[\x91PaH\xB3\x82aHdV[\x91PaH\xBF\x82\x85aG\xC2V[\x91PaH\xCA\x82aHdV[\x91PaH\xD6\x82\x84aG\xC2V[\x91P\x81\x90P\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_aI\x1B\x82a>rV[\x91PaI&\x83a>rV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15aI>WaI=aH\xE4V[[\x92\x91PPV[_`@\x82\x01\x90PaIW_\x83\x01\x85a>{V[aId` \x83\x01\x84a>{V[\x93\x92PPPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12aI\xACWaI\xABaI\x8CV[[\x83\x81\x01\x92P\x825\x91P` \x83\x01\x92Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aI\xD4WaI\xD3aI\x84V[[`\x01\x82\x026\x03\x83\x13\x15aI\xEAWaI\xE9aI\x88V[[P\x92P\x92\x90PV[_aI\xFD\x83\x85aE\rV[\x93PaJ\n\x83\x85\x84aA\x94V[aJ\x13\x83a>\xE5V[\x84\x01\x90P\x93\x92PPPV[_aJ,` \x84\x01\x84a@\xD0V[\x90P\x92\x91PPV[_`\x80\x83\x01aJE_\x84\x01\x84aI\x90V[\x85\x83\x03_\x87\x01RaJW\x83\x82\x84aI\xF2V[\x92PPPaJh` \x84\x01\x84aJ\x1EV[aJu` \x86\x01\x82a@\x0CV[PaJ\x83`@\x84\x01\x84aJ\x1EV[aJ\x90`@\x86\x01\x82a@\x0CV[PaJ\x9E``\x84\x01\x84aI\x90V[\x85\x83\x03``\x87\x01RaJ\xB1\x83\x82\x84aI\xF2V[\x92PPP\x80\x91PP\x92\x91PPV[_aJ\xCA\x83\x83aJ4V[\x90P\x92\x91PPV[_\x825`\x01`\x80\x03\x836\x03\x03\x81\x12aJ\xEDWaJ\xECaI\x8CV[[\x82\x81\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_aK\x10\x83\x85aIkV[\x93P\x83` \x84\x02\x85\x01aK\"\x84aI{V[\x80_[\x87\x81\x10\x15aKeW\x84\x84\x03\x89RaK<\x82\x84aJ\xD2V[aKF\x85\x82aJ\xBFV[\x94PaKQ\x83aJ\xF9V[\x92P` \x8A\x01\x99PP`\x01\x81\x01\x90PaK%V[P\x82\x97P\x87\x94PPPPP\x93\x92PPPV[_`@\x82\x01\x90PaK\x8A_\x83\x01\x86a>{V[\x81\x81\x03` \x83\x01RaK\x9D\x81\x84\x86aK\x05V[\x90P\x94\x93PPPPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[aK\xC3\x81aK\xA7V[\x82RPPV[_` \x82\x01\x90PaK\xDC_\x83\x01\x84aK\xBAV[\x92\x91PPV[_\x81Q\x90PaK\xF0\x81a@\xBAV[\x92\x91PPV[_` \x82\x84\x03\x12\x15aL\x0BWaL\na?VV[[_aL\x18\x84\x82\x85\x01aK\xE2V[\x91PP\x92\x91PPV[_aL/` \x84\x01\x84a?tV[\x90P\x92\x91PPV[`@\x82\x01aLG_\x83\x01\x83aL!V[aLS_\x85\x01\x82aF\x07V[PaLa` \x83\x01\x83aL!V[aLn` \x85\x01\x82aF\x07V[PPPPV[_`\x80\x82\x01\x90P\x81\x81\x03_\x83\x01RaL\x8C\x81\x86aG8V[\x90P\x81\x81\x03` \x83\x01RaL\xA0\x81\x85aG8V[\x90PaL\xAF`@\x83\x01\x84aL7V[\x94\x93PPPPV[_`@\x82\x01\x90P\x81\x81\x03_\x83\x01RaL\xCF\x81\x85aG8V[\x90PaL\xDE` \x83\x01\x84a>{V[\x93\x92PPPV[_`@\x82\x01\x90PaL\xF8_\x83\x01\x85a>{V[aM\x05` \x83\x01\x84aD\xA7V[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\"`\x04R`$_\xFD[_`\x02\x82\x04\x90P`\x01\x82\x16\x80aMPW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03aMcWaMbaM\x0CV[[P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[aM\x9F\x81aBjV[\x81\x14aM\xA9W_\x80\xFD[PV[_\x81Q\x90PaM\xBA\x81aM\x96V[\x92\x91PPV[_` \x82\x84\x03\x12\x15aM\xD5WaM\xD4a?VV[[_aM\xE2\x84\x82\x85\x01aM\xACV[\x91PP\x92\x91PPV[_aM\xF5\x82a>rV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03aN'WaN&aH\xE4V[[`\x01\x82\x01\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x825`\x01`\x80\x03\x836\x03\x03\x81\x12aN\x86WaN\x85aN_V[[\x80\x83\x01\x91PP\x92\x91PPV[_\x80\x835`\x01` \x03\x846\x03\x03\x81\x12aN\xAEWaN\xADaN_V[[\x80\x84\x01\x92P\x825\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aN\xD0WaN\xCFaNcV[[` \x83\x01\x92P`\x01\x82\x026\x03\x83\x13\x15aN\xECWaN\xEBaNgV[[P\x92P\x92\x90PV[_\x82\x90P\x92\x91PPV[_\x81\x90P\x81_R` _ \x90P\x91\x90PV[_` `\x1F\x83\x01\x04\x90P\x91\x90PV[_\x82\x82\x1B\x90P\x92\x91PPV[_`\x08\x83\x02aOZ\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82aO\x1FV[aOd\x86\x83aO\x1FV[\x95P\x80\x19\x84\x16\x93P\x80\x86\x16\x84\x17\x92PPP\x93\x92PPPV[_\x81\x90P\x91\x90PV[_aO\x9FaO\x9AaO\x95\x84a>rV[aO|V[a>rV[\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[aO\xB8\x83aO\x85V[aO\xCCaO\xC4\x82aO\xA6V[\x84\x84TaO+V[\x82UPPPPV[_\x90V[aO\xE0aO\xD4V[aO\xEB\x81\x84\x84aO\xAFV[PPPV[[\x81\x81\x10\x15aP\x0EWaP\x03_\x82aO\xD8V[`\x01\x81\x01\x90PaO\xF1V[PPV[`\x1F\x82\x11\x15aPSWaP$\x81aN\xFEV[aP-\x84aO\x10V[\x81\x01` \x85\x10\x15aP<W\x81\x90P[aPPaPH\x85aO\x10V[\x83\x01\x82aO\xF0V[PP[PPPV[_\x82\x82\x1C\x90P\x92\x91PPV[_aPs_\x19\x84`\x08\x02aPXV[\x19\x80\x83\x16\x91PP\x92\x91PPV[_aP\x8B\x83\x83aPdV[\x91P\x82`\x02\x02\x82\x17\x90P\x92\x91PPV[aP\xA5\x83\x83aN\xF4V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aP\xBEWaP\xBDa@\xECV[[aP\xC8\x82TaM9V[aP\xD3\x82\x82\x85aP\x12V[_`\x1F\x83\x11`\x01\x81\x14aQ\0W_\x84\x15aP\xEEW\x82\x87\x015\x90P[aP\xF8\x85\x82aP\x80V[\x86UPaQ_V[`\x1F\x19\x84\x16aQ\x0E\x86aN\xFEV[_[\x82\x81\x10\x15aQ5W\x84\x89\x015\x82U`\x01\x82\x01\x91P` \x85\x01\x94P` \x81\x01\x90PaQ\x10V[\x86\x83\x10\x15aQRW\x84\x89\x015aQN`\x1F\x89\x16\x82aPdV[\x83UP[`\x01`\x02\x88\x02\x01\x88UPPP[PPPPPPPV[aQs\x83\x83\x83aP\x9BV[PPPV[_\x815aQ\x84\x81a@\xBAV[\x80\x91PP\x91\x90PV[_\x81_\x1B\x90P\x91\x90PV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFaQ\xB7\x84aQ\x8DV[\x93P\x80\x19\x83\x16\x92P\x80\x84\x16\x83\x17\x91PP\x92\x91PPV[_aQ\xE7aQ\xE2aQ\xDD\x84a?\xDCV[aO|V[a?\xDCV[\x90P\x91\x90PV[_aQ\xF8\x82aQ\xCDV[\x90P\x91\x90PV[_aR\t\x82aQ\xEEV[\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[aR\"\x82aQ\xFFV[aR5aR.\x82aR\x10V[\x83TaQ\x98V[\x82UPPPV[_\x81\x01_\x83\x01aRL\x81\x85aN\x92V[aRW\x81\x83\x86aQhV[PPPP`\x01\x81\x01` \x83\x01\x80aRm\x81aQxV[\x90PaRy\x81\x84aR\x19V[PPP`\x02\x81\x01`@\x83\x01\x80aR\x8E\x81aQxV[\x90PaR\x9A\x81\x84aR\x19V[PPP`\x03\x81\x01``\x83\x01aR\xAF\x81\x85aN\x92V[aR\xBA\x81\x83\x86aQhV[PPPPPPV[aR\xCC\x82\x82aR<V[PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_aR\xEE\x82aR\xD0V[aR\xF8\x81\x85aR\xDAV[\x93PaS\x08\x81\x85` \x86\x01a>\xBDV[\x80\x84\x01\x91PP\x92\x91PPV[_aS\x1F\x82\x84aR\xE4V[\x91P\x81\x90P\x92\x91PPV",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextStatus(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<ContextStatus> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl ContextStatus {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ContextStatus {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ContextStatus {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct Coprocessor { string name; address txSenderAddress; address signerAddress; string s3BucketUrl; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Coprocessor {
        #[allow(missing_docs)]
        pub name: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub s3BucketUrl: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::String,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::String,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::String,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::String,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Coprocessor> for UnderlyingRustTuple<'_> {
            fn from(value: Coprocessor) -> Self {
                (
                    value.name,
                    value.txSenderAddress,
                    value.signerAddress,
                    value.s3BucketUrl,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Coprocessor {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    name: tuple.0,
                    txSenderAddress: tuple.1,
                    signerAddress: tuple.2,
                    s3BucketUrl: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Coprocessor {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Coprocessor {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.name,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.s3BucketUrl,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Coprocessor {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Coprocessor {
            const NAME: &'static str = "Coprocessor";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Coprocessor(string name,address txSenderAddress,address signerAddress,string s3BucketUrl)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::eip712_data_word(
                            &self.name,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.txSenderAddress,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.signerAddress,
                        )
                        .0,
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::eip712_data_word(
                            &self.s3BucketUrl,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Coprocessor {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.name,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.txSenderAddress,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.signerAddress,
                    )
                    + <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.s3BucketUrl,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.name,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.txSenderAddress,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.signerAddress,
                    out,
                );
                <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.s3BucketUrl,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct CoprocessorContext { uint256 contextId; uint256 previousContextId; uint256 featureSet; Coprocessor[] coprocessors; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub previousContextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub featureSet: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <Coprocessor as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<Coprocessor>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <Coprocessor as alloy::sol_types::SolType>::RustType,
            >,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorContext> for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorContext) -> Self {
                (
                    value.contextId,
                    value.previousContextId,
                    value.featureSet,
                    value.coprocessors,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for CoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    previousContextId: tuple.1,
                    featureSet: tuple.2,
                    coprocessors: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for CoprocessorContext {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for CoprocessorContext {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.previousContextId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.featureSet),
                    <alloy::sol_types::sol_data::Array<
                        Coprocessor,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CoprocessorContext {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for CoprocessorContext {
            const NAME: &'static str = "CoprocessorContext";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "CoprocessorContext(uint256 contextId,uint256 previousContextId,uint256 featureSet,Coprocessor[] coprocessors)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <Coprocessor as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <Coprocessor as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.contextId)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.previousContextId,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.featureSet)
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        Coprocessor,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.coprocessors)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CoprocessorContext {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.contextId,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.previousContextId,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.featureSet,
                    )
                    + <alloy::sol_types::sol_data::Array<
                        Coprocessor,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.coprocessors,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.contextId,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.previousContextId,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.featureSet,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    Coprocessor,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.coprocessors,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct CoprocessorContextTimePeriods { uint256 preActivationTimePeriod; uint256 suspendedTimePeriod; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorContextTimePeriods {
        #[allow(missing_docs)]
        pub preActivationTimePeriod: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub suspendedTimePeriod: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorContextTimePeriods>
        for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorContextTimePeriods) -> Self {
                (value.preActivationTimePeriod, value.suspendedTimePeriod)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CoprocessorContextTimePeriods {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    preActivationTimePeriod: tuple.0,
                    suspendedTimePeriod: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for CoprocessorContextTimePeriods {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self>
        for CoprocessorContextTimePeriods {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.preActivationTimePeriod,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.suspendedTimePeriod),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for CoprocessorContextTimePeriods {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for CoprocessorContextTimePeriods {
            const NAME: &'static str = "CoprocessorContextTimePeriods";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "CoprocessorContextTimePeriods(uint256 preActivationTimePeriod,uint256 suspendedTimePeriod)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.preActivationTimePeriod,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.suspendedTimePeriod,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for CoprocessorContextTimePeriods {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.preActivationTimePeriod,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.suspendedTimePeriod,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.preActivationTimePeriod,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.suspendedTimePeriod,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `AddressEmptyCode(address)` and selector `0x9996b315`.
```solidity
error AddressEmptyCode(address target);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressEmptyCode {
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressEmptyCode> for UnderlyingRustTuple<'_> {
            fn from(value: AddressEmptyCode) -> Self {
                (value.target,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressEmptyCode {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { target: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressEmptyCode {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressEmptyCode(address)";
            const SELECTOR: [u8; 4] = [153u8, 150u8, 179u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextAlreadyExists(uint256)` and selector `0x6653f6d7`.
```solidity
error ContextAlreadyExists(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextAlreadyExists {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextAlreadyExists> for UnderlyingRustTuple<'_> {
            fn from(value: ContextAlreadyExists) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextAlreadyExists {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextAlreadyExists {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextAlreadyExists(uint256)";
            const SELECTOR: [u8; 4] = [102u8, 83u8, 246u8, 215u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextDoesNotExist(uint256)` and selector `0x61544cfc`.
```solidity
error ContextDoesNotExist(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextDoesNotExist {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextDoesNotExist> for UnderlyingRustTuple<'_> {
            fn from(value: ContextDoesNotExist) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextDoesNotExist {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextDoesNotExist {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextDoesNotExist(uint256)";
            const SELECTOR: [u8; 4] = [97u8, 84u8, 76u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextIsActive(uint256)` and selector `0xcd494e49`.
```solidity
error ContextIsActive(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextIsActive {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextIsActive> for UnderlyingRustTuple<'_> {
            fn from(value: ContextIsActive) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextIsActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextIsActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextIsActive(uint256)";
            const SELECTOR: [u8; 4] = [205u8, 73u8, 78u8, 73u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextIsGenerating(uint256)` and selector `0x0ddd14ca`.
```solidity
error ContextIsGenerating(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextIsGenerating {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextIsGenerating> for UnderlyingRustTuple<'_> {
            fn from(value: ContextIsGenerating) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextIsGenerating {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextIsGenerating {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextIsGenerating(uint256)";
            const SELECTOR: [u8; 4] = [13u8, 221u8, 20u8, 202u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextNotActive(uint256)` and selector `0x331486b3`.
```solidity
error ContextNotActive(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextNotActive {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextNotActive> for UnderlyingRustTuple<'_> {
            fn from(value: ContextNotActive) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextNotActive {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextNotActive {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextNotActive(uint256)";
            const SELECTOR: [u8; 4] = [51u8, 20u8, 134u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextNotActiveOrSuspended(uint256)` and selector `0x2b3652d1`.
```solidity
error ContextNotActiveOrSuspended(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextNotActiveOrSuspended {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextNotActiveOrSuspended>
        for UnderlyingRustTuple<'_> {
            fn from(value: ContextNotActiveOrSuspended) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ContextNotActiveOrSuspended {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextNotActiveOrSuspended {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextNotActiveOrSuspended(uint256)";
            const SELECTOR: [u8; 4] = [43u8, 54u8, 82u8, 209u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextNotGenerated(uint256)` and selector `0xc0b5ee66`.
```solidity
error ContextNotGenerated(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextNotGenerated {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextNotGenerated> for UnderlyingRustTuple<'_> {
            fn from(value: ContextNotGenerated) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ContextNotGenerated {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextNotGenerated {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextNotGenerated(uint256)";
            const SELECTOR: [u8; 4] = [192u8, 181u8, 238u8, 102u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ContextNotPreActivatedOrSuspended(uint256)` and selector `0x12b49e3d`.
```solidity
error ContextNotPreActivatedOrSuspended(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ContextNotPreActivatedOrSuspended {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ContextNotPreActivatedOrSuspended>
        for UnderlyingRustTuple<'_> {
            fn from(value: ContextNotPreActivatedOrSuspended) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ContextNotPreActivatedOrSuspended {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ContextNotPreActivatedOrSuspended {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ContextNotPreActivatedOrSuspended(uint256)";
            const SELECTOR: [u8; 4] = [18u8, 180u8, 158u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `CoprocessorContextNotInitialized(uint256)` and selector `0xabf9e7b0`.
```solidity
error CoprocessorContextNotInitialized(uint256 contextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CoprocessorContextNotInitialized {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CoprocessorContextNotInitialized>
        for UnderlyingRustTuple<'_> {
            fn from(value: CoprocessorContextNotInitialized) -> Self {
                (value.contextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CoprocessorContextNotInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { contextId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CoprocessorContextNotInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CoprocessorContextNotInitialized(uint256)";
            const SELECTOR: [u8; 4] = [171u8, 249u8, 231u8, 176u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC1967InvalidImplementation(address)` and selector `0x4c9c8ce3`.
```solidity
error ERC1967InvalidImplementation(address implementation);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967InvalidImplementation {
        #[allow(missing_docs)]
        pub implementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967InvalidImplementation>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967InvalidImplementation) -> Self {
                (value.implementation,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC1967InvalidImplementation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { implementation: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967InvalidImplementation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967InvalidImplementation(address)";
            const SELECTOR: [u8; 4] = [76u8, 156u8, 140u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.implementation,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ERC1967NonPayable()` and selector `0xb398979f`.
```solidity
error ERC1967NonPayable();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967NonPayable {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967NonPayable> for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967NonPayable) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC1967NonPayable {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967NonPayable {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967NonPayable()";
            const SELECTOR: [u8; 4] = [179u8, 152u8, 151u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `EmptyCoprocessors()` and selector `0x8af082ef`.
```solidity
error EmptyCoprocessors();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EmptyCoprocessors {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EmptyCoprocessors> for UnderlyingRustTuple<'_> {
            fn from(value: EmptyCoprocessors) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EmptyCoprocessors {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EmptyCoprocessors {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EmptyCoprocessors()";
            const SELECTOR: [u8; 4] = [138u8, 240u8, 130u8, 239u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `EnforcedPause()` and selector `0xd93c0665`.
```solidity
error EnforcedPause();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EnforcedPause {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EnforcedPause> for UnderlyingRustTuple<'_> {
            fn from(value: EnforcedPause) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for EnforcedPause {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EnforcedPause {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EnforcedPause()";
            const SELECTOR: [u8; 4] = [217u8, 60u8, 6u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ExpectedPause()` and selector `0x8dfc202b`.
```solidity
error ExpectedPause();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ExpectedPause {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ExpectedPause> for UnderlyingRustTuple<'_> {
            fn from(value: ExpectedPause) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ExpectedPause {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ExpectedPause {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ExpectedPause()";
            const SELECTOR: [u8; 4] = [141u8, 252u8, 32u8, 43u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `FailedCall()` and selector `0xd6bda275`.
```solidity
error FailedCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FailedCall {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FailedCall> for UnderlyingRustTuple<'_> {
            fn from(value: FailedCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FailedCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FailedCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FailedCall()";
            const SELECTOR: [u8; 4] = [214u8, 189u8, 162u8, 117u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `InvalidNullContextId()` and selector `0xcb17b7a5`.
```solidity
error InvalidNullContextId();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidNullContextId {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidNullContextId> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidNullContextId) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidNullContextId {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidNullContextId {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidNullContextId()";
            const SELECTOR: [u8; 4] = [203u8, 23u8, 183u8, 165u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoActiveCoprocessorContext()` and selector `0x046593ea`.
```solidity
error NoActiveCoprocessorContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoActiveCoprocessorContext {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoActiveCoprocessorContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NoActiveCoprocessorContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NoActiveCoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoActiveCoprocessorContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoActiveCoprocessorContext()";
            const SELECTOR: [u8; 4] = [4u8, 101u8, 147u8, 234u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoPreActivationCoprocessorContext()` and selector `0xb9e861b2`.
```solidity
error NoPreActivationCoprocessorContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoPreActivationCoprocessorContext {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoPreActivationCoprocessorContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NoPreActivationCoprocessorContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NoPreActivationCoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoPreActivationCoprocessorContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoPreActivationCoprocessorContext()";
            const SELECTOR: [u8; 4] = [185u8, 232u8, 97u8, 178u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NoSuspendedCoprocessorContext()` and selector `0x21fb08f9`.
```solidity
error NoSuspendedCoprocessorContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NoSuspendedCoprocessorContext {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NoSuspendedCoprocessorContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NoSuspendedCoprocessorContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NoSuspendedCoprocessorContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NoSuspendedCoprocessorContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NoSuspendedCoprocessorContext()";
            const SELECTOR: [u8; 4] = [33u8, 251u8, 8u8, 249u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotCoprocessorFromContext(uint256,address)` and selector `0xc312e73e`.
```solidity
error NotCoprocessorFromContext(uint256 contextId, address coprocessorTxSenderAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotCoprocessorFromContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessorTxSenderAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotCoprocessorFromContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotCoprocessorFromContext) -> Self {
                (value.contextId, value.coprocessorTxSenderAddress)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotCoprocessorFromContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    coprocessorTxSenderAddress: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotCoprocessorFromContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotCoprocessorFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [195u8, 18u8, 231u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.coprocessorTxSenderAddress,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotCoprocessorSignerFromContext(uint256,address)` and selector `0x554f8c5f`.
```solidity
error NotCoprocessorSignerFromContext(uint256 contextId, address signerAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotCoprocessorSignerFromContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotCoprocessorSignerFromContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotCoprocessorSignerFromContext) -> Self {
                (value.contextId, value.signerAddress)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotCoprocessorSignerFromContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    signerAddress: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotCoprocessorSignerFromContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotCoprocessorSignerFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [85u8, 79u8, 140u8, 95u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotCoprocessorTxSenderFromContext(uint256,address)` and selector `0x29a993c1`.
```solidity
error NotCoprocessorTxSenderFromContext(uint256 contextId, address txSenderAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotCoprocessorTxSenderFromContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotCoprocessorTxSenderFromContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotCoprocessorTxSenderFromContext) -> Self {
                (value.contextId, value.txSenderAddress)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotCoprocessorTxSenderFromContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    txSenderAddress: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotCoprocessorTxSenderFromContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotCoprocessorTxSenderFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [41u8, 169u8, 147u8, 193u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotInitializingFromEmptyProxy()` and selector `0x6f4f731f`.
```solidity
error NotInitializingFromEmptyProxy();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializingFromEmptyProxy {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializingFromEmptyProxy>
        for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializingFromEmptyProxy) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NotInitializingFromEmptyProxy {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializingFromEmptyProxy {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializingFromEmptyProxy()";
            const SELECTOR: [u8; 4] = [111u8, 79u8, 115u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NotOwnerOrPauser(address)` and selector `0x46c0d9af`.
```solidity
error NotOwnerOrPauser(address notOwnerOrPauser);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotOwnerOrPauser {
        #[allow(missing_docs)]
        pub notOwnerOrPauser: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotOwnerOrPauser> for UnderlyingRustTuple<'_> {
            fn from(value: NotOwnerOrPauser) -> Self {
                (value.notOwnerOrPauser,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotOwnerOrPauser {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { notOwnerOrPauser: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotOwnerOrPauser {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotOwnerOrPauser(address)";
            const SELECTOR: [u8; 4] = [70u8, 192u8, 217u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.notOwnerOrPauser,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NullCoprocessorSignerAddress(uint256,uint256)` and selector `0x8a7488f4`.
```solidity
error NullCoprocessorSignerAddress(uint256 contextId, uint256 coprocessorIndex);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NullCoprocessorSignerAddress {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessorIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NullCoprocessorSignerAddress>
        for UnderlyingRustTuple<'_> {
            fn from(value: NullCoprocessorSignerAddress) -> Self {
                (value.contextId, value.coprocessorIndex)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NullCoprocessorSignerAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    coprocessorIndex: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NullCoprocessorSignerAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NullCoprocessorSignerAddress(uint256,uint256)";
            const SELECTOR: [u8; 4] = [138u8, 116u8, 136u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessorIndex),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NullCoprocessorTxSenderAddress(uint256,uint256)` and selector `0x4c1006f3`.
```solidity
error NullCoprocessorTxSenderAddress(uint256 contextId, uint256 coprocessorIndex);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NullCoprocessorTxSenderAddress {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessorIndex: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NullCoprocessorTxSenderAddress>
        for UnderlyingRustTuple<'_> {
            fn from(value: NullCoprocessorTxSenderAddress) -> Self {
                (value.contextId, value.coprocessorIndex)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for NullCoprocessorTxSenderAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    contextId: tuple.0,
                    coprocessorIndex: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NullCoprocessorTxSenderAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NullCoprocessorTxSenderAddress(uint256,uint256)";
            const SELECTOR: [u8; 4] = [76u8, 16u8, 6u8, 243u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessorIndex),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `PreActivationContextOngoing(uint256)` and selector `0xc470c022`.
```solidity
error PreActivationContextOngoing(uint256 preActivationContextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PreActivationContextOngoing {
        #[allow(missing_docs)]
        pub preActivationContextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PreActivationContextOngoing>
        for UnderlyingRustTuple<'_> {
            fn from(value: PreActivationContextOngoing) -> Self {
                (value.preActivationContextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for PreActivationContextOngoing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    preActivationContextId: tuple.0,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for PreActivationContextOngoing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PreActivationContextOngoing(uint256)";
            const SELECTOR: [u8; 4] = [196u8, 112u8, 192u8, 34u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.preActivationContextId,
                    ),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SuspendedContextOngoing(uint256)` and selector `0x7022ec41`.
```solidity
error SuspendedContextOngoing(uint256 suspendedContextId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SuspendedContextOngoing {
        #[allow(missing_docs)]
        pub suspendedContextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SuspendedContextOngoing> for UnderlyingRustTuple<'_> {
            fn from(value: SuspendedContextOngoing) -> Self {
                (value.suspendedContextId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SuspendedContextOngoing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    suspendedContextId: tuple.0,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SuspendedContextOngoing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SuspendedContextOngoing(uint256)";
            const SELECTOR: [u8; 4] = [112u8, 34u8, 236u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.suspendedContextId),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UUPSUnauthorizedCallContext()` and selector `0xe07c8dba`.
```solidity
error UUPSUnauthorizedCallContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UUPSUnauthorizedCallContext {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UUPSUnauthorizedCallContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: UUPSUnauthorizedCallContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for UUPSUnauthorizedCallContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UUPSUnauthorizedCallContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UUPSUnauthorizedCallContext()";
            const SELECTOR: [u8; 4] = [224u8, 124u8, 141u8, 186u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `UUPSUnsupportedProxiableUUID(bytes32)` and selector `0xaa1d49a4`.
```solidity
error UUPSUnsupportedProxiableUUID(bytes32 slot);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UUPSUnsupportedProxiableUUID {
        #[allow(missing_docs)]
        pub slot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UUPSUnsupportedProxiableUUID>
        for UnderlyingRustTuple<'_> {
            fn from(value: UUPSUnsupportedProxiableUUID) -> Self {
                (value.slot,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for UUPSUnsupportedProxiableUUID {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { slot: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UUPSUnsupportedProxiableUUID {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UUPSUnsupportedProxiableUUID(bytes32)";
            const SELECTOR: [u8; 4] = [170u8, 29u8, 73u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.slot),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `ActivateCoprocessorContext(uint256)` and selector `0x6c8c04c9fea337720b7dfadca365e850035114fd081b58d030afbe8b5dc3be71`.
```solidity
event ActivateCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ActivateCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ActivateCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ActivateCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                108u8, 140u8, 4u8, 201u8, 254u8, 163u8, 55u8, 114u8, 11u8, 125u8, 250u8,
                220u8, 163u8, 101u8, 232u8, 80u8, 3u8, 81u8, 20u8, 253u8, 8u8, 27u8,
                88u8, 208u8, 48u8, 175u8, 190u8, 139u8, 93u8, 195u8, 190u8, 113u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ActivateCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ActivateCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &ActivateCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `CompromiseCoprocessorContext(uint256)` and selector `0xee7ef83963417125d27430789fc6e94194381e82c3cda68260d0e7cfc31eaf21`.
```solidity
event CompromiseCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CompromiseCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CompromiseCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "CompromiseCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                238u8, 126u8, 248u8, 57u8, 99u8, 65u8, 113u8, 37u8, 210u8, 116u8, 48u8,
                120u8, 159u8, 198u8, 233u8, 65u8, 148u8, 56u8, 30u8, 130u8, 195u8, 205u8,
                166u8, 130u8, 96u8, 208u8, 231u8, 207u8, 195u8, 30u8, 175u8, 33u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CompromiseCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CompromiseCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &CompromiseCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DeactivateCoprocessorContext(uint256)` and selector `0x1baa08d8de18e8e2287691b1309748010981ebdfd12a173d8574657548a52898`.
```solidity
event DeactivateCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DeactivateCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DeactivateCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DeactivateCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                27u8, 170u8, 8u8, 216u8, 222u8, 24u8, 232u8, 226u8, 40u8, 118u8, 145u8,
                177u8, 48u8, 151u8, 72u8, 1u8, 9u8, 129u8, 235u8, 223u8, 209u8, 42u8,
                23u8, 61u8, 133u8, 116u8, 101u8, 117u8, 72u8, 165u8, 40u8, 152u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DeactivateCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DeactivateCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DeactivateCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `DestroyCoprocessorContext(uint256)` and selector `0xf20b299804c9c1d6da3b82414c7aa0a845cdbabae2d90e46e360a379a77b7be5`.
```solidity
event DestroyCoprocessorContext(uint256 contextId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DestroyCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DestroyCoprocessorContext {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DestroyCoprocessorContext(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                242u8, 11u8, 41u8, 152u8, 4u8, 201u8, 193u8, 214u8, 218u8, 59u8, 130u8,
                65u8, 76u8, 122u8, 160u8, 168u8, 69u8, 205u8, 186u8, 186u8, 226u8, 217u8,
                14u8, 70u8, 227u8, 96u8, 163u8, 121u8, 167u8, 123u8, 123u8, 229u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { contextId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DestroyCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DestroyCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &DestroyCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `InitializeCoprocessorContexts(uint256,(string,address,address,string)[])` and selector `0x13c5fd631ca031552fe9e38d911910a5980f6608eea323696e04db0fec0c9557`.
```solidity
event InitializeCoprocessorContexts(uint256 featureSet, Coprocessor[] coprocessors);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct InitializeCoprocessorContexts {
        #[allow(missing_docs)]
        pub featureSet: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <Coprocessor as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for InitializeCoprocessorContexts {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<Coprocessor>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "InitializeCoprocessorContexts(uint256,(string,address,address,string)[])";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                19u8, 197u8, 253u8, 99u8, 28u8, 160u8, 49u8, 85u8, 47u8, 233u8, 227u8,
                141u8, 145u8, 25u8, 16u8, 165u8, 152u8, 15u8, 102u8, 8u8, 238u8, 163u8,
                35u8, 105u8, 110u8, 4u8, 219u8, 15u8, 236u8, 12u8, 149u8, 87u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    featureSet: data.0,
                    coprocessors: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.featureSet),
                    <alloy::sol_types::sol_data::Array<
                        Coprocessor,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for InitializeCoprocessorContexts {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&InitializeCoprocessorContexts> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &InitializeCoprocessorContexts,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8, 245u8, 5u8, 178u8, 243u8, 113u8, 174u8, 33u8, 117u8, 238u8, 73u8,
                19u8, 244u8, 73u8, 158u8, 31u8, 38u8, 51u8, 167u8, 181u8, 147u8, 99u8,
                33u8, 238u8, 209u8, 205u8, 174u8, 182u8, 17u8, 81u8, 129u8, 210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `NewCoprocessorContext((uint256,uint256,uint256,(string,address,address,string)[]),(uint256,uint256,uint256,(string,address,address,string)[]),(uint256,uint256))` and selector `0xaf58a18a4e4159fa706c0d4e0fdab0930f97679319cddbc9c9199b0cd104b6ef`.
```solidity
event NewCoprocessorContext(CoprocessorContext activeCoprocessorContext, CoprocessorContext newCoprocessorContext, CoprocessorContextTimePeriods timePeriods);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct NewCoprocessorContext {
        #[allow(missing_docs)]
        pub activeCoprocessorContext: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub newCoprocessorContext: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub timePeriods: <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for NewCoprocessorContext {
            type DataTuple<'a> = (
                CoprocessorContext,
                CoprocessorContext,
                CoprocessorContextTimePeriods,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "NewCoprocessorContext((uint256,uint256,uint256,(string,address,address,string)[]),(uint256,uint256,uint256,(string,address,address,string)[]),(uint256,uint256))";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                175u8, 88u8, 161u8, 138u8, 78u8, 65u8, 89u8, 250u8, 112u8, 108u8, 13u8,
                78u8, 15u8, 218u8, 176u8, 147u8, 15u8, 151u8, 103u8, 147u8, 25u8, 205u8,
                219u8, 201u8, 201u8, 25u8, 155u8, 12u8, 209u8, 4u8, 182u8, 239u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    activeCoprocessorContext: data.0,
                    newCoprocessorContext: data.1,
                    timePeriods: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <CoprocessorContext as alloy_sol_types::SolType>::tokenize(
                        &self.activeCoprocessorContext,
                    ),
                    <CoprocessorContext as alloy_sol_types::SolType>::tokenize(
                        &self.newCoprocessorContext,
                    ),
                    <CoprocessorContextTimePeriods as alloy_sol_types::SolType>::tokenize(
                        &self.timePeriods,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for NewCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&NewCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &NewCoprocessorContext) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `OwnershipTransferStarted(address,address)` and selector `0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700`.
```solidity
event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferStarted {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferStarted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferStarted(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                56u8, 209u8, 107u8, 140u8, 172u8, 34u8, 217u8, 159u8, 199u8, 193u8, 36u8,
                185u8, 205u8, 13u8, 226u8, 211u8, 250u8, 31u8, 174u8, 244u8, 32u8, 191u8,
                231u8, 145u8, 216u8, 195u8, 98u8, 215u8, 101u8, 226u8, 39u8, 0u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferStarted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferStarted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &OwnershipTransferStarted,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Paused(address)` and selector `0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258`.
```solidity
event Paused(address account);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Paused {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Paused {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Paused(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                98u8, 231u8, 140u8, 234u8, 1u8, 190u8, 227u8, 32u8, 205u8, 78u8, 66u8,
                2u8, 112u8, 181u8, 234u8, 116u8, 0u8, 13u8, 17u8, 176u8, 201u8, 247u8,
                71u8, 84u8, 235u8, 219u8, 252u8, 84u8, 75u8, 5u8, 162u8, 88u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { account: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Paused {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Paused> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Paused) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PreActivateCoprocessorContext((uint256,uint256,uint256,(string,address,address,string)[]),uint256)` and selector `0x2b0188fc4bed471ee216dc6cb9650beb288892034ebee7301b32391add2a66b8`.
```solidity
event PreActivateCoprocessorContext(CoprocessorContext newCoprocessorContext, uint256 activationBlockTimestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PreActivateCoprocessorContext {
        #[allow(missing_docs)]
        pub newCoprocessorContext: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub activationBlockTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PreActivateCoprocessorContext {
            type DataTuple<'a> = (
                CoprocessorContext,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "PreActivateCoprocessorContext((uint256,uint256,uint256,(string,address,address,string)[]),uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                43u8, 1u8, 136u8, 252u8, 75u8, 237u8, 71u8, 30u8, 226u8, 22u8, 220u8,
                108u8, 185u8, 101u8, 11u8, 235u8, 40u8, 136u8, 146u8, 3u8, 78u8, 190u8,
                231u8, 48u8, 27u8, 50u8, 57u8, 26u8, 221u8, 42u8, 102u8, 184u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    newCoprocessorContext: data.0,
                    activationBlockTimestamp: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <CoprocessorContext as alloy_sol_types::SolType>::tokenize(
                        &self.newCoprocessorContext,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.activationBlockTimestamp,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PreActivateCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PreActivateCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &PreActivateCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `SuspendCoprocessorContext(uint256,uint256)` and selector `0x3080f2b80dda4748ca2926a641fa5007735058dc5f5ab2594eeca74197a3accc`.
```solidity
event SuspendCoprocessorContext(uint256 contextId, uint256 deactivatedBlockTimestamp);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SuspendCoprocessorContext {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub deactivatedBlockTimestamp: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SuspendCoprocessorContext {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "SuspendCoprocessorContext(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                48u8, 128u8, 242u8, 184u8, 13u8, 218u8, 71u8, 72u8, 202u8, 41u8, 38u8,
                166u8, 65u8, 250u8, 80u8, 7u8, 115u8, 80u8, 88u8, 220u8, 95u8, 90u8,
                178u8, 89u8, 78u8, 236u8, 167u8, 65u8, 151u8, 163u8, 172u8, 204u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    contextId: data.0,
                    deactivatedBlockTimestamp: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.deactivatedBlockTimestamp,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SuspendCoprocessorContext {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SuspendCoprocessorContext> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &SuspendCoprocessorContext,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Unpaused(address)` and selector `0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa`.
```solidity
event Unpaused(address account);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Unpaused {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Unpaused {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Unpaused(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                93u8, 185u8, 238u8, 10u8, 73u8, 91u8, 242u8, 230u8, 255u8, 156u8, 145u8,
                167u8, 131u8, 76u8, 27u8, 164u8, 253u8, 210u8, 68u8, 165u8, 232u8, 170u8,
                78u8, 83u8, 123u8, 211u8, 138u8, 234u8, 228u8, 176u8, 115u8, 170u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { account: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Unpaused {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Unpaused> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Unpaused) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Upgraded(address)` and selector `0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b`.
```solidity
event Upgraded(address indexed implementation);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Upgraded {
        #[allow(missing_docs)]
        pub implementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Upgraded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Upgraded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                188u8, 124u8, 215u8, 90u8, 32u8, 238u8, 39u8, 253u8, 154u8, 222u8, 186u8,
                179u8, 32u8, 65u8, 247u8, 85u8, 33u8, 77u8, 188u8, 107u8, 255u8, 169u8,
                12u8, 192u8, 34u8, 91u8, 57u8, 218u8, 46u8, 92u8, 45u8, 59u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { implementation: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.implementation.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.implementation,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Upgraded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Upgraded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Upgraded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `UPGRADE_INTERFACE_VERSION()` and selector `0xad3cb1cc`.
```solidity
function UPGRADE_INTERFACE_VERSION() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UPGRADE_INTERFACE_VERSIONCall {}
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`UPGRADE_INTERFACE_VERSION()`](UPGRADE_INTERFACE_VERSIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UPGRADE_INTERFACE_VERSIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UPGRADE_INTERFACE_VERSIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: UPGRADE_INTERFACE_VERSIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for UPGRADE_INTERFACE_VERSIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UPGRADE_INTERFACE_VERSIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: UPGRADE_INTERFACE_VERSIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for UPGRADE_INTERFACE_VERSIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for UPGRADE_INTERFACE_VERSIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = UPGRADE_INTERFACE_VERSIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UPGRADE_INTERFACE_VERSION()";
            const SELECTOR: [u8; 4] = [173u8, 60u8, 177u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `acceptOwnership()` and selector `0x79ba5097`.
```solidity
function acceptOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct acceptOwnershipCall {}
    ///Container type for the return parameters of the [`acceptOwnership()`](acceptOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct acceptOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<acceptOwnershipCall> for UnderlyingRustTuple<'_> {
                fn from(value: acceptOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for acceptOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<acceptOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: acceptOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for acceptOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for acceptOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = acceptOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "acceptOwnership()";
            const SELECTOR: [u8; 4] = [121u8, 186u8, 80u8, 151u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `addCoprocessorContext(uint256,(string,address,address,string)[],(uint256,uint256))` and selector `0x84cae187`.
```solidity
function addCoprocessorContext(uint256 featureSet, Coprocessor[] memory coprocessors, CoprocessorContextTimePeriods memory timePeriods) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCoprocessorContextCall {
        #[allow(missing_docs)]
        pub featureSet: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessors: alloy::sol_types::private::Vec<
            <Coprocessor as alloy::sol_types::SolType>::RustType,
        >,
        #[allow(missing_docs)]
        pub timePeriods: <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`addCoprocessorContext(uint256,(string,address,address,string)[],(uint256,uint256))`](addCoprocessorContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addCoprocessorContextReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<Coprocessor>,
                CoprocessorContextTimePeriods,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<
                    <Coprocessor as alloy::sol_types::SolType>::RustType,
                >,
                <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCoprocessorContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: addCoprocessorContextCall) -> Self {
                    (value.featureSet, value.coprocessors, value.timePeriods)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addCoprocessorContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        featureSet: tuple.0,
                        coprocessors: tuple.1,
                        timePeriods: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addCoprocessorContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: addCoprocessorContextReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for addCoprocessorContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addCoprocessorContextCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<Coprocessor>,
                CoprocessorContextTimePeriods,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addCoprocessorContextReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addCoprocessorContext(uint256,(string,address,address,string)[],(uint256,uint256))";
            const SELECTOR: [u8; 4] = [132u8, 202u8, 225u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.featureSet),
                    <alloy::sol_types::sol_data::Array<
                        Coprocessor,
                    > as alloy_sol_types::SolType>::tokenize(&self.coprocessors),
                    <CoprocessorContextTimePeriods as alloy_sol_types::SolType>::tokenize(
                        &self.timePeriods,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `checkIsCoprocessorSignerFromContext(uint256,address)` and selector `0x9efb484e`.
```solidity
function checkIsCoprocessorSignerFromContext(uint256 contextId, address signerAddress) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkIsCoprocessorSignerFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub signerAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`checkIsCoprocessorSignerFromContext(uint256,address)`](checkIsCoprocessorSignerFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkIsCoprocessorSignerFromContextReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkIsCoprocessorSignerFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: checkIsCoprocessorSignerFromContextCall) -> Self {
                    (value.contextId, value.signerAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for checkIsCoprocessorSignerFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        signerAddress: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkIsCoprocessorSignerFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: checkIsCoprocessorSignerFromContextReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for checkIsCoprocessorSignerFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for checkIsCoprocessorSignerFromContextCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = checkIsCoprocessorSignerFromContextReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "checkIsCoprocessorSignerFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [158u8, 251u8, 72u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.signerAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `checkIsCoprocessorTxSenderFromContext(uint256,address)` and selector `0xf192cf68`.
```solidity
function checkIsCoprocessorTxSenderFromContext(uint256 contextId, address txSenderAddress) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkIsCoprocessorTxSenderFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub txSenderAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`checkIsCoprocessorTxSenderFromContext(uint256,address)`](checkIsCoprocessorTxSenderFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct checkIsCoprocessorTxSenderFromContextReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkIsCoprocessorTxSenderFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: checkIsCoprocessorTxSenderFromContextCall) -> Self {
                    (value.contextId, value.txSenderAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for checkIsCoprocessorTxSenderFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        txSenderAddress: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<checkIsCoprocessorTxSenderFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: checkIsCoprocessorTxSenderFromContextReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for checkIsCoprocessorTxSenderFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for checkIsCoprocessorTxSenderFromContextCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = checkIsCoprocessorTxSenderFromContextReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "checkIsCoprocessorTxSenderFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [241u8, 146u8, 207u8, 104u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.txSenderAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `compromiseCoprocessorContext(uint256)` and selector `0xeec168fb`.
```solidity
function compromiseCoprocessorContext(uint256 contextId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct compromiseCoprocessorContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`compromiseCoprocessorContext(uint256)`](compromiseCoprocessorContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct compromiseCoprocessorContextReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<compromiseCoprocessorContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: compromiseCoprocessorContextCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for compromiseCoprocessorContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<compromiseCoprocessorContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: compromiseCoprocessorContextReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for compromiseCoprocessorContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for compromiseCoprocessorContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = compromiseCoprocessorContextReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "compromiseCoprocessorContext(uint256)";
            const SELECTOR: [u8; 4] = [238u8, 193u8, 104u8, 251u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `destroyCoprocessorContext(uint256)` and selector `0xd740e402`.
```solidity
function destroyCoprocessorContext(uint256 contextId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct destroyCoprocessorContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`destroyCoprocessorContext(uint256)`](destroyCoprocessorContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct destroyCoprocessorContextReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<destroyCoprocessorContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: destroyCoprocessorContextCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for destroyCoprocessorContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<destroyCoprocessorContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: destroyCoprocessorContextReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for destroyCoprocessorContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for destroyCoprocessorContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = destroyCoprocessorContextReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "destroyCoprocessorContext(uint256)";
            const SELECTOR: [u8; 4] = [215u8, 64u8, 228u8, 2u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getActiveCoprocessorContext()` and selector `0xfed9716b`.
```solidity
function getActiveCoprocessorContext() external view returns (CoprocessorContext memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextCall {}
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getActiveCoprocessorContext()`](getActiveCoprocessorContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextReturn {
        #[allow(missing_docs)]
        pub _0: <CoprocessorContext as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (CoprocessorContext,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <CoprocessorContext as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveCoprocessorContextCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getActiveCoprocessorContextReturn;
            type ReturnTuple<'a> = (CoprocessorContext,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveCoprocessorContext()";
            const SELECTOR: [u8; 4] = [254u8, 217u8, 113u8, 107u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getActiveCoprocessorContextId()` and selector `0x991dc36d`.
```solidity
function getActiveCoprocessorContextId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextIdCall {}
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getActiveCoprocessorContextId()`](getActiveCoprocessorContextIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getActiveCoprocessorContextIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getActiveCoprocessorContextIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getActiveCoprocessorContextIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getActiveCoprocessorContextIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getActiveCoprocessorContextIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getActiveCoprocessorContextIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getActiveCoprocessorContextId()";
            const SELECTOR: [u8; 4] = [153u8, 29u8, 195u8, 109u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorActivationBlockTimestampFromContext(uint256)` and selector `0xa94a02ad`.
```solidity
function getCoprocessorActivationBlockTimestampFromContext(uint256 contextId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorActivationBlockTimestampFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorActivationBlockTimestampFromContext(uint256)`](getCoprocessorActivationBlockTimestampFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorActivationBlockTimestampFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<
                getCoprocessorActivationBlockTimestampFromContextCall,
            > for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorActivationBlockTimestampFromContextCall,
                ) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorActivationBlockTimestampFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<
                getCoprocessorActivationBlockTimestampFromContextReturn,
            > for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorActivationBlockTimestampFromContextReturn,
                ) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorActivationBlockTimestampFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall
        for getCoprocessorActivationBlockTimestampFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCoprocessorActivationBlockTimestampFromContextReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorActivationBlockTimestampFromContext(uint256)";
            const SELECTOR: [u8; 4] = [169u8, 74u8, 2u8, 173u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorContextStatus(uint256)` and selector `0x888b99e0`.
```solidity
function getCoprocessorContextStatus(uint256 contextId) external view returns (ContextStatus);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorContextStatusCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorContextStatus(uint256)`](getCoprocessorContextStatusCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorContextStatusReturn {
        #[allow(missing_docs)]
        pub _0: <ContextStatus as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorContextStatusCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorContextStatusCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorContextStatusCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (ContextStatus,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <ContextStatus as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorContextStatusReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorContextStatusReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorContextStatusReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorContextStatusCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCoprocessorContextStatusReturn;
            type ReturnTuple<'a> = (ContextStatus,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorContextStatus(uint256)";
            const SELECTOR: [u8; 4] = [136u8, 139u8, 153u8, 224u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorDeactivatedBlockTimestampFromContext(uint256)` and selector `0x90218748`.
```solidity
function getCoprocessorDeactivatedBlockTimestampFromContext(uint256 contextId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorDeactivatedBlockTimestampFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorDeactivatedBlockTimestampFromContext(uint256)`](getCoprocessorDeactivatedBlockTimestampFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorDeactivatedBlockTimestampFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<
                getCoprocessorDeactivatedBlockTimestampFromContextCall,
            > for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorDeactivatedBlockTimestampFromContextCall,
                ) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorDeactivatedBlockTimestampFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<
                getCoprocessorDeactivatedBlockTimestampFromContextReturn,
            > for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorDeactivatedBlockTimestampFromContextReturn,
                ) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorDeactivatedBlockTimestampFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall
        for getCoprocessorDeactivatedBlockTimestampFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCoprocessorDeactivatedBlockTimestampFromContextReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorDeactivatedBlockTimestampFromContext(uint256)";
            const SELECTOR: [u8; 4] = [144u8, 33u8, 135u8, 72u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorFromContext(uint256,address)` and selector `0xd1841dd3`.
```solidity
function getCoprocessorFromContext(uint256 contextId, address coprocessorTxSenderAddress) external view returns (Coprocessor memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub coprocessorTxSenderAddress: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorFromContext(uint256,address)`](getCoprocessorFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorFromContextReturn {
        #[allow(missing_docs)]
        pub _0: <Coprocessor as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorFromContextCall) -> Self {
                    (value.contextId, value.coprocessorTxSenderAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        contextId: tuple.0,
                        coprocessorTxSenderAddress: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Coprocessor,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Coprocessor as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorFromContextReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorFromContextCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCoprocessorFromContextReturn;
            type ReturnTuple<'a> = (Coprocessor,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorFromContext(uint256,address)";
            const SELECTOR: [u8; 4] = [209u8, 132u8, 29u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.coprocessorTxSenderAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorMajorityThresholdFromContext(uint256)` and selector `0x6ba818e1`.
```solidity
function getCoprocessorMajorityThresholdFromContext(uint256 contextId) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorMajorityThresholdFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorMajorityThresholdFromContext(uint256)`](getCoprocessorMajorityThresholdFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorMajorityThresholdFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorMajorityThresholdFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorMajorityThresholdFromContextCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorMajorityThresholdFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorMajorityThresholdFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(
                    value: getCoprocessorMajorityThresholdFromContextReturn,
                ) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorMajorityThresholdFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall
        for getCoprocessorMajorityThresholdFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCoprocessorMajorityThresholdFromContextReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorMajorityThresholdFromContext(uint256)";
            const SELECTOR: [u8; 4] = [107u8, 168u8, 24u8, 225u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorSignersFromContext(uint256)` and selector `0x6b3174e5`.
```solidity
function getCoprocessorSignersFromContext(uint256 contextId) external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorSignersFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorSignersFromContext(uint256)`](getCoprocessorSignersFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorSignersFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorSignersFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorSignersFromContextCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorSignersFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorSignersFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorSignersFromContextReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorSignersFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorSignersFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCoprocessorSignersFromContextReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorSignersFromContext(uint256)";
            const SELECTOR: [u8; 4] = [107u8, 49u8, 116u8, 229u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getCoprocessorTxSendersFromContext(uint256)` and selector `0x18b7214d`.
```solidity
function getCoprocessorTxSendersFromContext(uint256 contextId) external view returns (address[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorTxSendersFromContextCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getCoprocessorTxSendersFromContext(uint256)`](getCoprocessorTxSendersFromContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCoprocessorTxSendersFromContextReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorTxSendersFromContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorTxSendersFromContextCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorTxSendersFromContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCoprocessorTxSendersFromContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCoprocessorTxSendersFromContextReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCoprocessorTxSendersFromContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCoprocessorTxSendersFromContextCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCoprocessorTxSendersFromContextReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCoprocessorTxSendersFromContext(uint256)";
            const SELECTOR: [u8; 4] = [24u8, 183u8, 33u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getPreActivationCoprocessorContextId()` and selector `0xbe91187b`.
```solidity
function getPreActivationCoprocessorContextId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPreActivationCoprocessorContextIdCall {}
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getPreActivationCoprocessorContextId()`](getPreActivationCoprocessorContextIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPreActivationCoprocessorContextIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPreActivationCoprocessorContextIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPreActivationCoprocessorContextIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPreActivationCoprocessorContextIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPreActivationCoprocessorContextIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getPreActivationCoprocessorContextIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getPreActivationCoprocessorContextIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPreActivationCoprocessorContextIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getPreActivationCoprocessorContextIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPreActivationCoprocessorContextId()";
            const SELECTOR: [u8; 4] = [190u8, 145u8, 24u8, 123u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getSuspendedCoprocessorContextId()` and selector `0x086e4e1c`.
```solidity
function getSuspendedCoprocessorContextId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSuspendedCoprocessorContextIdCall {}
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getSuspendedCoprocessorContextId()`](getSuspendedCoprocessorContextIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getSuspendedCoprocessorContextIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSuspendedCoprocessorContextIdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSuspendedCoprocessorContextIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSuspendedCoprocessorContextIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getSuspendedCoprocessorContextIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getSuspendedCoprocessorContextIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getSuspendedCoprocessorContextIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getSuspendedCoprocessorContextIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getSuspendedCoprocessorContextIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getSuspendedCoprocessorContextId()";
            const SELECTOR: [u8; 4] = [8u8, 110u8, 78u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getVersion()` and selector `0x0d8e6e2c`.
```solidity
function getVersion() external pure returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVersionCall {}
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getVersion()`](getVersionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVersionReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVersionCall> for UnderlyingRustTuple<'_> {
                fn from(value: getVersionCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVersionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVersionReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getVersionReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVersionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVersionCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getVersionReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVersion()";
            const SELECTOR: [u8; 4] = [13u8, 142u8, 110u8, 44u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `initializeFromEmptyProxy(uint256,(string,address,address,string)[])` and selector `0x703c3b2e`.
```solidity
function initializeFromEmptyProxy(uint256 initialFeatureSet, Coprocessor[] memory initialCoprocessors) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeFromEmptyProxyCall {
        #[allow(missing_docs)]
        pub initialFeatureSet: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub initialCoprocessors: alloy::sol_types::private::Vec<
            <Coprocessor as alloy::sol_types::SolType>::RustType,
        >,
    }
    ///Container type for the return parameters of the [`initializeFromEmptyProxy(uint256,(string,address,address,string)[])`](initializeFromEmptyProxyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeFromEmptyProxyReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<Coprocessor>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<
                    <Coprocessor as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeFromEmptyProxyCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: initializeFromEmptyProxyCall) -> Self {
                    (value.initialFeatureSet, value.initialCoprocessors)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for initializeFromEmptyProxyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        initialFeatureSet: tuple.0,
                        initialCoprocessors: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeFromEmptyProxyReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: initializeFromEmptyProxyReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for initializeFromEmptyProxyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeFromEmptyProxyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<Coprocessor>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeFromEmptyProxyReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initializeFromEmptyProxy(uint256,(string,address,address,string)[])";
            const SELECTOR: [u8; 4] = [112u8, 60u8, 59u8, 46u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialFeatureSet),
                    <alloy::sol_types::sol_data::Array<
                        Coprocessor,
                    > as alloy_sol_types::SolType>::tokenize(&self.initialCoprocessors),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `isCoprocessorContextActiveOrSuspended(uint256)` and selector `0x60b25465`.
```solidity
function isCoprocessorContextActiveOrSuspended(uint256 contextId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCoprocessorContextActiveOrSuspendedCall {
        #[allow(missing_docs)]
        pub contextId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`isCoprocessorContextActiveOrSuspended(uint256)`](isCoprocessorContextActiveOrSuspendedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCoprocessorContextActiveOrSuspendedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCoprocessorContextActiveOrSuspendedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCoprocessorContextActiveOrSuspendedCall) -> Self {
                    (value.contextId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCoprocessorContextActiveOrSuspendedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { contextId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCoprocessorContextActiveOrSuspendedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCoprocessorContextActiveOrSuspendedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCoprocessorContextActiveOrSuspendedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCoprocessorContextActiveOrSuspendedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isCoprocessorContextActiveOrSuspendedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCoprocessorContextActiveOrSuspended(uint256)";
            const SELECTOR: [u8; 4] = [96u8, 178u8, 84u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.contextId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `moveSuspendedCoprocessorContextToActive()` and selector `0x957b2abe`.
```solidity
function moveSuspendedCoprocessorContextToActive() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct moveSuspendedCoprocessorContextToActiveCall {}
    ///Container type for the return parameters of the [`moveSuspendedCoprocessorContextToActive()`](moveSuspendedCoprocessorContextToActiveCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct moveSuspendedCoprocessorContextToActiveReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<moveSuspendedCoprocessorContextToActiveCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: moveSuspendedCoprocessorContextToActiveCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for moveSuspendedCoprocessorContextToActiveCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<moveSuspendedCoprocessorContextToActiveReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: moveSuspendedCoprocessorContextToActiveReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for moveSuspendedCoprocessorContextToActiveReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for moveSuspendedCoprocessorContextToActiveCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = moveSuspendedCoprocessorContextToActiveReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "moveSuspendedCoprocessorContextToActive()";
            const SELECTOR: [u8; 4] = [149u8, 123u8, 42u8, 190u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pause()` and selector `0x8456cb59`.
```solidity
function pause() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauseCall {}
    ///Container type for the return parameters of the [`pause()`](pauseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pauseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauseCall> for UnderlyingRustTuple<'_> {
                fn from(value: pauseCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pauseReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pauseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pauseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pauseCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pauseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pause()";
            const SELECTOR: [u8; 4] = [132u8, 86u8, 203u8, 89u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `paused()` and selector `0x5c975abb`.
```solidity
function paused() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pausedCall {}
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`paused()`](pausedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pausedReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pausedCall> for UnderlyingRustTuple<'_> {
                fn from(value: pausedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pausedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pausedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pausedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pausedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pausedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pausedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "paused()";
            const SELECTOR: [u8; 4] = [92u8, 151u8, 90u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `pendingOwner()` and selector `0xe30c3978`.
```solidity
function pendingOwner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pendingOwnerCall {}
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`pendingOwner()`](pendingOwnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pendingOwnerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pendingOwnerCall> for UnderlyingRustTuple<'_> {
                fn from(value: pendingOwnerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pendingOwnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pendingOwnerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pendingOwnerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pendingOwnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pendingOwnerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pendingOwnerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pendingOwner()";
            const SELECTOR: [u8; 4] = [227u8, 12u8, 57u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `proxiableUUID()` and selector `0x52d1902d`.
```solidity
function proxiableUUID() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxiableUUIDCall {}
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`proxiableUUID()`](proxiableUUIDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxiableUUIDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxiableUUIDCall> for UnderlyingRustTuple<'_> {
                fn from(value: proxiableUUIDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxiableUUIDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxiableUUIDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proxiableUUIDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxiableUUIDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proxiableUUIDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proxiableUUIDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proxiableUUID()";
            const SELECTOR: [u8; 4] = [82u8, 209u8, 144u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `refreshCoprocessorContextStatuses()` and selector `0x3a5162e6`.
```solidity
function refreshCoprocessorContextStatuses() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct refreshCoprocessorContextStatusesCall {}
    ///Container type for the return parameters of the [`refreshCoprocessorContextStatuses()`](refreshCoprocessorContextStatusesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct refreshCoprocessorContextStatusesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<refreshCoprocessorContextStatusesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: refreshCoprocessorContextStatusesCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for refreshCoprocessorContextStatusesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<refreshCoprocessorContextStatusesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: refreshCoprocessorContextStatusesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for refreshCoprocessorContextStatusesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for refreshCoprocessorContextStatusesCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = refreshCoprocessorContextStatusesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "refreshCoprocessorContextStatuses()";
            const SELECTOR: [u8; 4] = [58u8, 81u8, 98u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `unpause()` and selector `0x3f4ba83a`.
```solidity
function unpause() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauseCall {}
    ///Container type for the return parameters of the [`unpause()`](unpauseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct unpauseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauseCall> for UnderlyingRustTuple<'_> {
                fn from(value: unpauseCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unpauseReturn> for UnderlyingRustTuple<'_> {
                fn from(value: unpauseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unpauseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for unpauseCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = unpauseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "unpause()";
            const SELECTOR: [u8; 4] = [63u8, 75u8, 168u8, 58u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `upgradeToAndCall(address,bytes)` and selector `0x4f1ef286`.
```solidity
function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToAndCallCall {
        #[allow(missing_docs)]
        pub newImplementation: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`upgradeToAndCall(address,bytes)`](upgradeToAndCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToAndCallReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToAndCallCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToAndCallCall) -> Self {
                    (value.newImplementation, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeToAndCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newImplementation: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToAndCallReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToAndCallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeToAndCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for upgradeToAndCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = upgradeToAndCallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "upgradeToAndCall(address,bytes)";
            const SELECTOR: [u8; 4] = [79u8, 30u8, 242u8, 134u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newImplementation,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`CoprocessorContexts`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum CoprocessorContextsCalls {
        #[allow(missing_docs)]
        UPGRADE_INTERFACE_VERSION(UPGRADE_INTERFACE_VERSIONCall),
        #[allow(missing_docs)]
        acceptOwnership(acceptOwnershipCall),
        #[allow(missing_docs)]
        addCoprocessorContext(addCoprocessorContextCall),
        #[allow(missing_docs)]
        checkIsCoprocessorSignerFromContext(checkIsCoprocessorSignerFromContextCall),
        #[allow(missing_docs)]
        checkIsCoprocessorTxSenderFromContext(checkIsCoprocessorTxSenderFromContextCall),
        #[allow(missing_docs)]
        compromiseCoprocessorContext(compromiseCoprocessorContextCall),
        #[allow(missing_docs)]
        destroyCoprocessorContext(destroyCoprocessorContextCall),
        #[allow(missing_docs)]
        getActiveCoprocessorContext(getActiveCoprocessorContextCall),
        #[allow(missing_docs)]
        getActiveCoprocessorContextId(getActiveCoprocessorContextIdCall),
        #[allow(missing_docs)]
        getCoprocessorActivationBlockTimestampFromContext(
            getCoprocessorActivationBlockTimestampFromContextCall,
        ),
        #[allow(missing_docs)]
        getCoprocessorContextStatus(getCoprocessorContextStatusCall),
        #[allow(missing_docs)]
        getCoprocessorDeactivatedBlockTimestampFromContext(
            getCoprocessorDeactivatedBlockTimestampFromContextCall,
        ),
        #[allow(missing_docs)]
        getCoprocessorFromContext(getCoprocessorFromContextCall),
        #[allow(missing_docs)]
        getCoprocessorMajorityThresholdFromContext(
            getCoprocessorMajorityThresholdFromContextCall,
        ),
        #[allow(missing_docs)]
        getCoprocessorSignersFromContext(getCoprocessorSignersFromContextCall),
        #[allow(missing_docs)]
        getCoprocessorTxSendersFromContext(getCoprocessorTxSendersFromContextCall),
        #[allow(missing_docs)]
        getPreActivationCoprocessorContextId(getPreActivationCoprocessorContextIdCall),
        #[allow(missing_docs)]
        getSuspendedCoprocessorContextId(getSuspendedCoprocessorContextIdCall),
        #[allow(missing_docs)]
        getVersion(getVersionCall),
        #[allow(missing_docs)]
        initializeFromEmptyProxy(initializeFromEmptyProxyCall),
        #[allow(missing_docs)]
        isCoprocessorContextActiveOrSuspended(isCoprocessorContextActiveOrSuspendedCall),
        #[allow(missing_docs)]
        moveSuspendedCoprocessorContextToActive(
            moveSuspendedCoprocessorContextToActiveCall,
        ),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        pause(pauseCall),
        #[allow(missing_docs)]
        paused(pausedCall),
        #[allow(missing_docs)]
        pendingOwner(pendingOwnerCall),
        #[allow(missing_docs)]
        proxiableUUID(proxiableUUIDCall),
        #[allow(missing_docs)]
        refreshCoprocessorContextStatuses(refreshCoprocessorContextStatusesCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        unpause(unpauseCall),
        #[allow(missing_docs)]
        upgradeToAndCall(upgradeToAndCallCall),
    }
    #[automatically_derived]
    impl CoprocessorContextsCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [8u8, 110u8, 78u8, 28u8],
            [13u8, 142u8, 110u8, 44u8],
            [24u8, 183u8, 33u8, 77u8],
            [58u8, 81u8, 98u8, 230u8],
            [63u8, 75u8, 168u8, 58u8],
            [79u8, 30u8, 242u8, 134u8],
            [82u8, 209u8, 144u8, 45u8],
            [92u8, 151u8, 90u8, 187u8],
            [96u8, 178u8, 84u8, 101u8],
            [107u8, 49u8, 116u8, 229u8],
            [107u8, 168u8, 24u8, 225u8],
            [112u8, 60u8, 59u8, 46u8],
            [113u8, 80u8, 24u8, 166u8],
            [121u8, 186u8, 80u8, 151u8],
            [132u8, 86u8, 203u8, 89u8],
            [132u8, 202u8, 225u8, 135u8],
            [136u8, 139u8, 153u8, 224u8],
            [141u8, 165u8, 203u8, 91u8],
            [144u8, 33u8, 135u8, 72u8],
            [149u8, 123u8, 42u8, 190u8],
            [153u8, 29u8, 195u8, 109u8],
            [158u8, 251u8, 72u8, 78u8],
            [169u8, 74u8, 2u8, 173u8],
            [173u8, 60u8, 177u8, 204u8],
            [190u8, 145u8, 24u8, 123u8],
            [209u8, 132u8, 29u8, 211u8],
            [215u8, 64u8, 228u8, 2u8],
            [227u8, 12u8, 57u8, 120u8],
            [238u8, 193u8, 104u8, 251u8],
            [241u8, 146u8, 207u8, 104u8],
            [242u8, 253u8, 227u8, 139u8],
            [254u8, 217u8, 113u8, 107u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for CoprocessorContextsCalls {
        const NAME: &'static str = "CoprocessorContextsCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 32usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(_) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::acceptOwnership(_) => {
                    <acceptOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addCoprocessorContext(_) => {
                    <addCoprocessorContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::checkIsCoprocessorSignerFromContext(_) => {
                    <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::checkIsCoprocessorTxSenderFromContext(_) => {
                    <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::compromiseCoprocessorContext(_) => {
                    <compromiseCoprocessorContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::destroyCoprocessorContext(_) => {
                    <destroyCoprocessorContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveCoprocessorContext(_) => {
                    <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getActiveCoprocessorContextId(_) => {
                    <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorActivationBlockTimestampFromContext(_) => {
                    <getCoprocessorActivationBlockTimestampFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorContextStatus(_) => {
                    <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorDeactivatedBlockTimestampFromContext(_) => {
                    <getCoprocessorDeactivatedBlockTimestampFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorFromContext(_) => {
                    <getCoprocessorFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorMajorityThresholdFromContext(_) => {
                    <getCoprocessorMajorityThresholdFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorSignersFromContext(_) => {
                    <getCoprocessorSignersFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCoprocessorTxSendersFromContext(_) => {
                    <getCoprocessorTxSendersFromContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPreActivationCoprocessorContextId(_) => {
                    <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getSuspendedCoprocessorContextId(_) => {
                    <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getVersion(_) => {
                    <getVersionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initializeFromEmptyProxy(_) => {
                    <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCoprocessorContextActiveOrSuspended(_) => {
                    <isCoprocessorContextActiveOrSuspendedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::moveSuspendedCoprocessorContextToActive(_) => {
                    <moveSuspendedCoprocessorContextToActiveCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::pause(_) => <pauseCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::paused(_) => <pausedCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::pendingOwner(_) => {
                    <pendingOwnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proxiableUUID(_) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::refreshCoprocessorContextStatuses(_) => {
                    <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::unpause(_) => <unpauseCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::upgradeToAndCall(_) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<CoprocessorContextsCalls>] = &[
                {
                    fn getSuspendedCoprocessorContextId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsCalls::getSuspendedCoprocessorContextId,
                            )
                    }
                    getSuspendedCoprocessorContextId
                },
                {
                    fn getVersion(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getVersionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::getVersion)
                    }
                    getVersion
                },
                {
                    fn getCoprocessorTxSendersFromContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorTxSendersFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorTxSendersFromContext,
                            )
                    }
                    getCoprocessorTxSendersFromContext
                },
                {
                    fn refreshCoprocessorContextStatuses(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsCalls::refreshCoprocessorContextStatuses,
                            )
                    }
                    refreshCoprocessorContextStatuses
                },
                {
                    fn unpause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <unpauseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::unpause)
                    }
                    unpause
                },
                {
                    fn upgradeToAndCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::upgradeToAndCall)
                    }
                    upgradeToAndCall
                },
                {
                    fn proxiableUUID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::proxiableUUID)
                    }
                    proxiableUUID
                },
                {
                    fn paused(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <pausedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::paused)
                    }
                    paused
                },
                {
                    fn isCoprocessorContextActiveOrSuspended(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <isCoprocessorContextActiveOrSuspendedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsCalls::isCoprocessorContextActiveOrSuspended,
                            )
                    }
                    isCoprocessorContextActiveOrSuspended
                },
                {
                    fn getCoprocessorSignersFromContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorSignersFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorSignersFromContext,
                            )
                    }
                    getCoprocessorSignersFromContext
                },
                {
                    fn getCoprocessorMajorityThresholdFromContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorMajorityThresholdFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorMajorityThresholdFromContext,
                            )
                    }
                    getCoprocessorMajorityThresholdFromContext
                },
                {
                    fn initializeFromEmptyProxy(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::initializeFromEmptyProxy)
                    }
                    initializeFromEmptyProxy
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn acceptOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <acceptOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::acceptOwnership)
                    }
                    acceptOwnership
                },
                {
                    fn pause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <pauseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::pause)
                    }
                    pause
                },
                {
                    fn addCoprocessorContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::addCoprocessorContext)
                    }
                    addCoprocessorContext
                },
                {
                    fn getCoprocessorContextStatus(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::getCoprocessorContextStatus)
                    }
                    getCoprocessorContextStatus
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::owner)
                    }
                    owner
                },
                {
                    fn getCoprocessorDeactivatedBlockTimestampFromContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorDeactivatedBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorDeactivatedBlockTimestampFromContext,
                            )
                    }
                    getCoprocessorDeactivatedBlockTimestampFromContext
                },
                {
                    fn moveSuspendedCoprocessorContextToActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <moveSuspendedCoprocessorContextToActiveCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsCalls::moveSuspendedCoprocessorContextToActive,
                            )
                    }
                    moveSuspendedCoprocessorContextToActive
                },
                {
                    fn getActiveCoprocessorContextId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::getActiveCoprocessorContextId)
                    }
                    getActiveCoprocessorContextId
                },
                {
                    fn checkIsCoprocessorSignerFromContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsCalls::checkIsCoprocessorSignerFromContext,
                            )
                    }
                    checkIsCoprocessorSignerFromContext
                },
                {
                    fn getCoprocessorActivationBlockTimestampFromContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorActivationBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsCalls::getCoprocessorActivationBlockTimestampFromContext,
                            )
                    }
                    getCoprocessorActivationBlockTimestampFromContext
                },
                {
                    fn UPGRADE_INTERFACE_VERSION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::UPGRADE_INTERFACE_VERSION)
                    }
                    UPGRADE_INTERFACE_VERSION
                },
                {
                    fn getPreActivationCoprocessorContextId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsCalls::getPreActivationCoprocessorContextId,
                            )
                    }
                    getPreActivationCoprocessorContextId
                },
                {
                    fn getCoprocessorFromContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getCoprocessorFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::getCoprocessorFromContext)
                    }
                    getCoprocessorFromContext
                },
                {
                    fn destroyCoprocessorContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <destroyCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::destroyCoprocessorContext)
                    }
                    destroyCoprocessorContext
                },
                {
                    fn pendingOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <pendingOwnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::pendingOwner)
                    }
                    pendingOwner
                },
                {
                    fn compromiseCoprocessorContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <compromiseCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::compromiseCoprocessorContext)
                    }
                    compromiseCoprocessorContext
                },
                {
                    fn checkIsCoprocessorTxSenderFromContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsCalls::checkIsCoprocessorTxSenderFromContext,
                            )
                    }
                    checkIsCoprocessorTxSenderFromContext
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::transferOwnership)
                    }
                    transferOwnership
                },
                {
                    fn getActiveCoprocessorContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsCalls> {
                        <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsCalls::getActiveCoprocessorContext)
                    }
                    getActiveCoprocessorContext
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(inner) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::acceptOwnership(inner) => {
                    <acceptOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addCoprocessorContext(inner) => {
                    <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::checkIsCoprocessorSignerFromContext(inner) => {
                    <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::checkIsCoprocessorTxSenderFromContext(inner) => {
                    <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::compromiseCoprocessorContext(inner) => {
                    <compromiseCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::destroyCoprocessorContext(inner) => {
                    <destroyCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveCoprocessorContext(inner) => {
                    <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getActiveCoprocessorContextId(inner) => {
                    <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorActivationBlockTimestampFromContext(inner) => {
                    <getCoprocessorActivationBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorContextStatus(inner) => {
                    <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorDeactivatedBlockTimestampFromContext(inner) => {
                    <getCoprocessorDeactivatedBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorFromContext(inner) => {
                    <getCoprocessorFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorMajorityThresholdFromContext(inner) => {
                    <getCoprocessorMajorityThresholdFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorSignersFromContext(inner) => {
                    <getCoprocessorSignersFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCoprocessorTxSendersFromContext(inner) => {
                    <getCoprocessorTxSendersFromContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getPreActivationCoprocessorContextId(inner) => {
                    <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getSuspendedCoprocessorContextId(inner) => {
                    <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getVersion(inner) => {
                    <getVersionCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initializeFromEmptyProxy(inner) => {
                    <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isCoprocessorContextActiveOrSuspended(inner) => {
                    <isCoprocessorContextActiveOrSuspendedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::moveSuspendedCoprocessorContextToActive(inner) => {
                    <moveSuspendedCoprocessorContextToActiveCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pause(inner) => {
                    <pauseCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::paused(inner) => {
                    <pausedCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pendingOwner(inner) => {
                    <pendingOwnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proxiableUUID(inner) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::refreshCoprocessorContextStatuses(inner) => {
                    <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::unpause(inner) => {
                    <unpauseCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::upgradeToAndCall(inner) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(inner) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::acceptOwnership(inner) => {
                    <acceptOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addCoprocessorContext(inner) => {
                    <addCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::checkIsCoprocessorSignerFromContext(inner) => {
                    <checkIsCoprocessorSignerFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::checkIsCoprocessorTxSenderFromContext(inner) => {
                    <checkIsCoprocessorTxSenderFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::compromiseCoprocessorContext(inner) => {
                    <compromiseCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::destroyCoprocessorContext(inner) => {
                    <destroyCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveCoprocessorContext(inner) => {
                    <getActiveCoprocessorContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getActiveCoprocessorContextId(inner) => {
                    <getActiveCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorActivationBlockTimestampFromContext(inner) => {
                    <getCoprocessorActivationBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorContextStatus(inner) => {
                    <getCoprocessorContextStatusCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorDeactivatedBlockTimestampFromContext(inner) => {
                    <getCoprocessorDeactivatedBlockTimestampFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorFromContext(inner) => {
                    <getCoprocessorFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorMajorityThresholdFromContext(inner) => {
                    <getCoprocessorMajorityThresholdFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorSignersFromContext(inner) => {
                    <getCoprocessorSignersFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCoprocessorTxSendersFromContext(inner) => {
                    <getCoprocessorTxSendersFromContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPreActivationCoprocessorContextId(inner) => {
                    <getPreActivationCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getSuspendedCoprocessorContextId(inner) => {
                    <getSuspendedCoprocessorContextIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVersion(inner) => {
                    <getVersionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initializeFromEmptyProxy(inner) => {
                    <initializeFromEmptyProxyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCoprocessorContextActiveOrSuspended(inner) => {
                    <isCoprocessorContextActiveOrSuspendedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::moveSuspendedCoprocessorContextToActive(inner) => {
                    <moveSuspendedCoprocessorContextToActiveCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pause(inner) => {
                    <pauseCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::paused(inner) => {
                    <pausedCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pendingOwner(inner) => {
                    <pendingOwnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proxiableUUID(inner) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::refreshCoprocessorContextStatuses(inner) => {
                    <refreshCoprocessorContextStatusesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::unpause(inner) => {
                    <unpauseCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::upgradeToAndCall(inner) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`CoprocessorContexts`](self) custom errors.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum CoprocessorContextsErrors {
        #[allow(missing_docs)]
        AddressEmptyCode(AddressEmptyCode),
        #[allow(missing_docs)]
        ContextAlreadyExists(ContextAlreadyExists),
        #[allow(missing_docs)]
        ContextDoesNotExist(ContextDoesNotExist),
        #[allow(missing_docs)]
        ContextIsActive(ContextIsActive),
        #[allow(missing_docs)]
        ContextIsGenerating(ContextIsGenerating),
        #[allow(missing_docs)]
        ContextNotActive(ContextNotActive),
        #[allow(missing_docs)]
        ContextNotActiveOrSuspended(ContextNotActiveOrSuspended),
        #[allow(missing_docs)]
        ContextNotGenerated(ContextNotGenerated),
        #[allow(missing_docs)]
        ContextNotPreActivatedOrSuspended(ContextNotPreActivatedOrSuspended),
        #[allow(missing_docs)]
        CoprocessorContextNotInitialized(CoprocessorContextNotInitialized),
        #[allow(missing_docs)]
        ERC1967InvalidImplementation(ERC1967InvalidImplementation),
        #[allow(missing_docs)]
        ERC1967NonPayable(ERC1967NonPayable),
        #[allow(missing_docs)]
        EmptyCoprocessors(EmptyCoprocessors),
        #[allow(missing_docs)]
        EnforcedPause(EnforcedPause),
        #[allow(missing_docs)]
        ExpectedPause(ExpectedPause),
        #[allow(missing_docs)]
        FailedCall(FailedCall),
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        InvalidNullContextId(InvalidNullContextId),
        #[allow(missing_docs)]
        NoActiveCoprocessorContext(NoActiveCoprocessorContext),
        #[allow(missing_docs)]
        NoPreActivationCoprocessorContext(NoPreActivationCoprocessorContext),
        #[allow(missing_docs)]
        NoSuspendedCoprocessorContext(NoSuspendedCoprocessorContext),
        #[allow(missing_docs)]
        NotCoprocessorFromContext(NotCoprocessorFromContext),
        #[allow(missing_docs)]
        NotCoprocessorSignerFromContext(NotCoprocessorSignerFromContext),
        #[allow(missing_docs)]
        NotCoprocessorTxSenderFromContext(NotCoprocessorTxSenderFromContext),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
        #[allow(missing_docs)]
        NotInitializingFromEmptyProxy(NotInitializingFromEmptyProxy),
        #[allow(missing_docs)]
        NotOwnerOrPauser(NotOwnerOrPauser),
        #[allow(missing_docs)]
        NullCoprocessorSignerAddress(NullCoprocessorSignerAddress),
        #[allow(missing_docs)]
        NullCoprocessorTxSenderAddress(NullCoprocessorTxSenderAddress),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        PreActivationContextOngoing(PreActivationContextOngoing),
        #[allow(missing_docs)]
        SuspendedContextOngoing(SuspendedContextOngoing),
        #[allow(missing_docs)]
        UUPSUnauthorizedCallContext(UUPSUnauthorizedCallContext),
        #[allow(missing_docs)]
        UUPSUnsupportedProxiableUUID(UUPSUnsupportedProxiableUUID),
    }
    #[automatically_derived]
    impl CoprocessorContextsErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [4u8, 101u8, 147u8, 234u8],
            [13u8, 221u8, 20u8, 202u8],
            [17u8, 140u8, 218u8, 167u8],
            [18u8, 180u8, 158u8, 61u8],
            [30u8, 79u8, 189u8, 247u8],
            [33u8, 251u8, 8u8, 249u8],
            [41u8, 169u8, 147u8, 193u8],
            [43u8, 54u8, 82u8, 209u8],
            [51u8, 20u8, 134u8, 179u8],
            [70u8, 192u8, 217u8, 175u8],
            [76u8, 16u8, 6u8, 243u8],
            [76u8, 156u8, 140u8, 227u8],
            [85u8, 79u8, 140u8, 95u8],
            [97u8, 84u8, 76u8, 252u8],
            [102u8, 83u8, 246u8, 215u8],
            [111u8, 79u8, 115u8, 31u8],
            [112u8, 34u8, 236u8, 65u8],
            [138u8, 116u8, 136u8, 244u8],
            [138u8, 240u8, 130u8, 239u8],
            [141u8, 252u8, 32u8, 43u8],
            [153u8, 150u8, 179u8, 21u8],
            [170u8, 29u8, 73u8, 164u8],
            [171u8, 249u8, 231u8, 176u8],
            [179u8, 152u8, 151u8, 159u8],
            [185u8, 232u8, 97u8, 178u8],
            [192u8, 181u8, 238u8, 102u8],
            [195u8, 18u8, 231u8, 62u8],
            [196u8, 112u8, 192u8, 34u8],
            [203u8, 23u8, 183u8, 165u8],
            [205u8, 73u8, 78u8, 73u8],
            [214u8, 189u8, 162u8, 117u8],
            [215u8, 230u8, 188u8, 248u8],
            [217u8, 60u8, 6u8, 101u8],
            [224u8, 124u8, 141u8, 186u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for CoprocessorContextsErrors {
        const NAME: &'static str = "CoprocessorContextsErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 35usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AddressEmptyCode(_) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextAlreadyExists(_) => {
                    <ContextAlreadyExists as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextDoesNotExist(_) => {
                    <ContextDoesNotExist as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextIsActive(_) => {
                    <ContextIsActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextIsGenerating(_) => {
                    <ContextIsGenerating as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextNotActive(_) => {
                    <ContextNotActive as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextNotActiveOrSuspended(_) => {
                    <ContextNotActiveOrSuspended as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextNotGenerated(_) => {
                    <ContextNotGenerated as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ContextNotPreActivatedOrSuspended(_) => {
                    <ContextNotPreActivatedOrSuspended as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CoprocessorContextNotInitialized(_) => {
                    <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967InvalidImplementation(_) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967NonPayable(_) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EmptyCoprocessors(_) => {
                    <EmptyCoprocessors as alloy_sol_types::SolError>::SELECTOR
                }
                Self::EnforcedPause(_) => {
                    <EnforcedPause as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ExpectedPause(_) => {
                    <ExpectedPause as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FailedCall(_) => {
                    <FailedCall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidNullContextId(_) => {
                    <InvalidNullContextId as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoActiveCoprocessorContext(_) => {
                    <NoActiveCoprocessorContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoPreActivationCoprocessorContext(_) => {
                    <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NoSuspendedCoprocessorContext(_) => {
                    <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotCoprocessorFromContext(_) => {
                    <NotCoprocessorFromContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotCoprocessorSignerFromContext(_) => {
                    <NotCoprocessorSignerFromContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotCoprocessorTxSenderFromContext(_) => {
                    <NotCoprocessorTxSenderFromContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializingFromEmptyProxy(_) => {
                    <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotOwnerOrPauser(_) => {
                    <NotOwnerOrPauser as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NullCoprocessorSignerAddress(_) => {
                    <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NullCoprocessorTxSenderAddress(_) => {
                    <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::PreActivationContextOngoing(_) => {
                    <PreActivationContextOngoing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SuspendedContextOngoing(_) => {
                    <SuspendedContextOngoing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UUPSUnauthorizedCallContext(_) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UUPSUnsupportedProxiableUUID(_) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<CoprocessorContextsErrors>] = &[
                {
                    fn NoActiveCoprocessorContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::NoActiveCoprocessorContext)
                    }
                    NoActiveCoprocessorContext
                },
                {
                    fn ContextIsGenerating(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextIsGenerating as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::ContextIsGenerating)
                    }
                    ContextIsGenerating
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn ContextNotPreActivatedOrSuspended(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotPreActivatedOrSuspended as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsErrors::ContextNotPreActivatedOrSuspended,
                            )
                    }
                    ContextNotPreActivatedOrSuspended
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn NoSuspendedCoprocessorContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsErrors::NoSuspendedCoprocessorContext,
                            )
                    }
                    NoSuspendedCoprocessorContext
                },
                {
                    fn NotCoprocessorTxSenderFromContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCoprocessorTxSenderFromContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsErrors::NotCoprocessorTxSenderFromContext,
                            )
                    }
                    NotCoprocessorTxSenderFromContext
                },
                {
                    fn ContextNotActiveOrSuspended(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotActiveOrSuspended as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::ContextNotActiveOrSuspended)
                    }
                    ContextNotActiveOrSuspended
                },
                {
                    fn ContextNotActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::ContextNotActive)
                    }
                    ContextNotActive
                },
                {
                    fn NotOwnerOrPauser(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotOwnerOrPauser as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::NotOwnerOrPauser)
                    }
                    NotOwnerOrPauser
                },
                {
                    fn NullCoprocessorTxSenderAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsErrors::NullCoprocessorTxSenderAddress,
                            )
                    }
                    NullCoprocessorTxSenderAddress
                },
                {
                    fn ERC1967InvalidImplementation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::ERC1967InvalidImplementation)
                    }
                    ERC1967InvalidImplementation
                },
                {
                    fn NotCoprocessorSignerFromContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCoprocessorSignerFromContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsErrors::NotCoprocessorSignerFromContext,
                            )
                    }
                    NotCoprocessorSignerFromContext
                },
                {
                    fn ContextDoesNotExist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextDoesNotExist as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::ContextDoesNotExist)
                    }
                    ContextDoesNotExist
                },
                {
                    fn ContextAlreadyExists(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextAlreadyExists as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::ContextAlreadyExists)
                    }
                    ContextAlreadyExists
                },
                {
                    fn NotInitializingFromEmptyProxy(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsErrors::NotInitializingFromEmptyProxy,
                            )
                    }
                    NotInitializingFromEmptyProxy
                },
                {
                    fn SuspendedContextOngoing(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <SuspendedContextOngoing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::SuspendedContextOngoing)
                    }
                    SuspendedContextOngoing
                },
                {
                    fn NullCoprocessorSignerAddress(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::NullCoprocessorSignerAddress)
                    }
                    NullCoprocessorSignerAddress
                },
                {
                    fn EmptyCoprocessors(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <EmptyCoprocessors as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::EmptyCoprocessors)
                    }
                    EmptyCoprocessors
                },
                {
                    fn ExpectedPause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ExpectedPause as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::ExpectedPause)
                    }
                    ExpectedPause
                },
                {
                    fn AddressEmptyCode(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <AddressEmptyCode as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::AddressEmptyCode)
                    }
                    AddressEmptyCode
                },
                {
                    fn UUPSUnsupportedProxiableUUID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::UUPSUnsupportedProxiableUUID)
                    }
                    UUPSUnsupportedProxiableUUID
                },
                {
                    fn CoprocessorContextNotInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsErrors::CoprocessorContextNotInitialized,
                            )
                    }
                    CoprocessorContextNotInitialized
                },
                {
                    fn ERC1967NonPayable(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ERC1967NonPayable as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::ERC1967NonPayable)
                    }
                    ERC1967NonPayable
                },
                {
                    fn NoPreActivationCoprocessorContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                CoprocessorContextsErrors::NoPreActivationCoprocessorContext,
                            )
                    }
                    NoPreActivationCoprocessorContext
                },
                {
                    fn ContextNotGenerated(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextNotGenerated as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::ContextNotGenerated)
                    }
                    ContextNotGenerated
                },
                {
                    fn NotCoprocessorFromContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::NotCoprocessorFromContext)
                    }
                    NotCoprocessorFromContext
                },
                {
                    fn PreActivationContextOngoing(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <PreActivationContextOngoing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::PreActivationContextOngoing)
                    }
                    PreActivationContextOngoing
                },
                {
                    fn InvalidNullContextId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <InvalidNullContextId as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::InvalidNullContextId)
                    }
                    InvalidNullContextId
                },
                {
                    fn ContextIsActive(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <ContextIsActive as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::ContextIsActive)
                    }
                    ContextIsActive
                },
                {
                    fn FailedCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <FailedCall as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::FailedCall)
                    }
                    FailedCall
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn EnforcedPause(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <EnforcedPause as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::EnforcedPause)
                    }
                    EnforcedPause
                },
                {
                    fn UUPSUnauthorizedCallContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::UUPSUnauthorizedCallContext)
                    }
                    UUPSUnauthorizedCallContext
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<CoprocessorContextsErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(CoprocessorContextsErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AddressEmptyCode(inner) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextAlreadyExists(inner) => {
                    <ContextAlreadyExists as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextDoesNotExist(inner) => {
                    <ContextDoesNotExist as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextIsActive(inner) => {
                    <ContextIsActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextIsGenerating(inner) => {
                    <ContextIsGenerating as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextNotActive(inner) => {
                    <ContextNotActive as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextNotActiveOrSuspended(inner) => {
                    <ContextNotActiveOrSuspended as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextNotGenerated(inner) => {
                    <ContextNotGenerated as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ContextNotPreActivatedOrSuspended(inner) => {
                    <ContextNotPreActivatedOrSuspended as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CoprocessorContextNotInitialized(inner) => {
                    <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967InvalidImplementation(inner) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967NonPayable(inner) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EmptyCoprocessors(inner) => {
                    <EmptyCoprocessors as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::EnforcedPause(inner) => {
                    <EnforcedPause as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ExpectedPause(inner) => {
                    <ExpectedPause as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::FailedCall(inner) => {
                    <FailedCall as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidNullContextId(inner) => {
                    <InvalidNullContextId as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoActiveCoprocessorContext(inner) => {
                    <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoPreActivationCoprocessorContext(inner) => {
                    <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NoSuspendedCoprocessorContext(inner) => {
                    <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotCoprocessorFromContext(inner) => {
                    <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotCoprocessorSignerFromContext(inner) => {
                    <NotCoprocessorSignerFromContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotCoprocessorTxSenderFromContext(inner) => {
                    <NotCoprocessorTxSenderFromContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializingFromEmptyProxy(inner) => {
                    <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotOwnerOrPauser(inner) => {
                    <NotOwnerOrPauser as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NullCoprocessorSignerAddress(inner) => {
                    <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NullCoprocessorTxSenderAddress(inner) => {
                    <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::PreActivationContextOngoing(inner) => {
                    <PreActivationContextOngoing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SuspendedContextOngoing(inner) => {
                    <SuspendedContextOngoing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UUPSUnauthorizedCallContext(inner) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UUPSUnsupportedProxiableUUID(inner) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AddressEmptyCode(inner) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextAlreadyExists(inner) => {
                    <ContextAlreadyExists as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextDoesNotExist(inner) => {
                    <ContextDoesNotExist as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextIsActive(inner) => {
                    <ContextIsActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextIsGenerating(inner) => {
                    <ContextIsGenerating as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextNotActive(inner) => {
                    <ContextNotActive as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextNotActiveOrSuspended(inner) => {
                    <ContextNotActiveOrSuspended as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextNotGenerated(inner) => {
                    <ContextNotGenerated as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ContextNotPreActivatedOrSuspended(inner) => {
                    <ContextNotPreActivatedOrSuspended as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CoprocessorContextNotInitialized(inner) => {
                    <CoprocessorContextNotInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967InvalidImplementation(inner) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967NonPayable(inner) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EmptyCoprocessors(inner) => {
                    <EmptyCoprocessors as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::EnforcedPause(inner) => {
                    <EnforcedPause as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ExpectedPause(inner) => {
                    <ExpectedPause as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FailedCall(inner) => {
                    <FailedCall as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidNullContextId(inner) => {
                    <InvalidNullContextId as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoActiveCoprocessorContext(inner) => {
                    <NoActiveCoprocessorContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoPreActivationCoprocessorContext(inner) => {
                    <NoPreActivationCoprocessorContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NoSuspendedCoprocessorContext(inner) => {
                    <NoSuspendedCoprocessorContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotCoprocessorFromContext(inner) => {
                    <NotCoprocessorFromContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotCoprocessorSignerFromContext(inner) => {
                    <NotCoprocessorSignerFromContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotCoprocessorTxSenderFromContext(inner) => {
                    <NotCoprocessorTxSenderFromContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializingFromEmptyProxy(inner) => {
                    <NotInitializingFromEmptyProxy as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotOwnerOrPauser(inner) => {
                    <NotOwnerOrPauser as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NullCoprocessorSignerAddress(inner) => {
                    <NullCoprocessorSignerAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NullCoprocessorTxSenderAddress(inner) => {
                    <NullCoprocessorTxSenderAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::PreActivationContextOngoing(inner) => {
                    <PreActivationContextOngoing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SuspendedContextOngoing(inner) => {
                    <SuspendedContextOngoing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UUPSUnauthorizedCallContext(inner) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UUPSUnsupportedProxiableUUID(inner) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`CoprocessorContexts`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum CoprocessorContextsEvents {
        #[allow(missing_docs)]
        ActivateCoprocessorContext(ActivateCoprocessorContext),
        #[allow(missing_docs)]
        CompromiseCoprocessorContext(CompromiseCoprocessorContext),
        #[allow(missing_docs)]
        DeactivateCoprocessorContext(DeactivateCoprocessorContext),
        #[allow(missing_docs)]
        DestroyCoprocessorContext(DestroyCoprocessorContext),
        #[allow(missing_docs)]
        InitializeCoprocessorContexts(InitializeCoprocessorContexts),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        NewCoprocessorContext(NewCoprocessorContext),
        #[allow(missing_docs)]
        OwnershipTransferStarted(OwnershipTransferStarted),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        Paused(Paused),
        #[allow(missing_docs)]
        PreActivateCoprocessorContext(PreActivateCoprocessorContext),
        #[allow(missing_docs)]
        SuspendCoprocessorContext(SuspendCoprocessorContext),
        #[allow(missing_docs)]
        Unpaused(Unpaused),
        #[allow(missing_docs)]
        Upgraded(Upgraded),
    }
    #[automatically_derived]
    impl CoprocessorContextsEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                19u8, 197u8, 253u8, 99u8, 28u8, 160u8, 49u8, 85u8, 47u8, 233u8, 227u8,
                141u8, 145u8, 25u8, 16u8, 165u8, 152u8, 15u8, 102u8, 8u8, 238u8, 163u8,
                35u8, 105u8, 110u8, 4u8, 219u8, 15u8, 236u8, 12u8, 149u8, 87u8,
            ],
            [
                27u8, 170u8, 8u8, 216u8, 222u8, 24u8, 232u8, 226u8, 40u8, 118u8, 145u8,
                177u8, 48u8, 151u8, 72u8, 1u8, 9u8, 129u8, 235u8, 223u8, 209u8, 42u8,
                23u8, 61u8, 133u8, 116u8, 101u8, 117u8, 72u8, 165u8, 40u8, 152u8,
            ],
            [
                43u8, 1u8, 136u8, 252u8, 75u8, 237u8, 71u8, 30u8, 226u8, 22u8, 220u8,
                108u8, 185u8, 101u8, 11u8, 235u8, 40u8, 136u8, 146u8, 3u8, 78u8, 190u8,
                231u8, 48u8, 27u8, 50u8, 57u8, 26u8, 221u8, 42u8, 102u8, 184u8,
            ],
            [
                48u8, 128u8, 242u8, 184u8, 13u8, 218u8, 71u8, 72u8, 202u8, 41u8, 38u8,
                166u8, 65u8, 250u8, 80u8, 7u8, 115u8, 80u8, 88u8, 220u8, 95u8, 90u8,
                178u8, 89u8, 78u8, 236u8, 167u8, 65u8, 151u8, 163u8, 172u8, 204u8,
            ],
            [
                56u8, 209u8, 107u8, 140u8, 172u8, 34u8, 217u8, 159u8, 199u8, 193u8, 36u8,
                185u8, 205u8, 13u8, 226u8, 211u8, 250u8, 31u8, 174u8, 244u8, 32u8, 191u8,
                231u8, 145u8, 216u8, 195u8, 98u8, 215u8, 101u8, 226u8, 39u8, 0u8,
            ],
            [
                93u8, 185u8, 238u8, 10u8, 73u8, 91u8, 242u8, 230u8, 255u8, 156u8, 145u8,
                167u8, 131u8, 76u8, 27u8, 164u8, 253u8, 210u8, 68u8, 165u8, 232u8, 170u8,
                78u8, 83u8, 123u8, 211u8, 138u8, 234u8, 228u8, 176u8, 115u8, 170u8,
            ],
            [
                98u8, 231u8, 140u8, 234u8, 1u8, 190u8, 227u8, 32u8, 205u8, 78u8, 66u8,
                2u8, 112u8, 181u8, 234u8, 116u8, 0u8, 13u8, 17u8, 176u8, 201u8, 247u8,
                71u8, 84u8, 235u8, 219u8, 252u8, 84u8, 75u8, 5u8, 162u8, 88u8,
            ],
            [
                108u8, 140u8, 4u8, 201u8, 254u8, 163u8, 55u8, 114u8, 11u8, 125u8, 250u8,
                220u8, 163u8, 101u8, 232u8, 80u8, 3u8, 81u8, 20u8, 253u8, 8u8, 27u8,
                88u8, 208u8, 48u8, 175u8, 190u8, 139u8, 93u8, 195u8, 190u8, 113u8,
            ],
            [
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ],
            [
                175u8, 88u8, 161u8, 138u8, 78u8, 65u8, 89u8, 250u8, 112u8, 108u8, 13u8,
                78u8, 15u8, 218u8, 176u8, 147u8, 15u8, 151u8, 103u8, 147u8, 25u8, 205u8,
                219u8, 201u8, 201u8, 25u8, 155u8, 12u8, 209u8, 4u8, 182u8, 239u8,
            ],
            [
                188u8, 124u8, 215u8, 90u8, 32u8, 238u8, 39u8, 253u8, 154u8, 222u8, 186u8,
                179u8, 32u8, 65u8, 247u8, 85u8, 33u8, 77u8, 188u8, 107u8, 255u8, 169u8,
                12u8, 192u8, 34u8, 91u8, 57u8, 218u8, 46u8, 92u8, 45u8, 59u8,
            ],
            [
                199u8, 245u8, 5u8, 178u8, 243u8, 113u8, 174u8, 33u8, 117u8, 238u8, 73u8,
                19u8, 244u8, 73u8, 158u8, 31u8, 38u8, 51u8, 167u8, 181u8, 147u8, 99u8,
                33u8, 238u8, 209u8, 205u8, 174u8, 182u8, 17u8, 81u8, 129u8, 210u8,
            ],
            [
                238u8, 126u8, 248u8, 57u8, 99u8, 65u8, 113u8, 37u8, 210u8, 116u8, 48u8,
                120u8, 159u8, 198u8, 233u8, 65u8, 148u8, 56u8, 30u8, 130u8, 195u8, 205u8,
                166u8, 130u8, 96u8, 208u8, 231u8, 207u8, 195u8, 30u8, 175u8, 33u8,
            ],
            [
                242u8, 11u8, 41u8, 152u8, 4u8, 201u8, 193u8, 214u8, 218u8, 59u8, 130u8,
                65u8, 76u8, 122u8, 160u8, 168u8, 69u8, 205u8, 186u8, 186u8, 226u8, 217u8,
                14u8, 70u8, 227u8, 96u8, 163u8, 121u8, 167u8, 123u8, 123u8, 229u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for CoprocessorContextsEvents {
        const NAME: &'static str = "CoprocessorContextsEvents";
        const COUNT: usize = 14usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <ActivateCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ActivateCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ActivateCoprocessorContext)
                }
                Some(
                    <CompromiseCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <CompromiseCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CompromiseCoprocessorContext)
                }
                Some(
                    <DeactivateCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DeactivateCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DeactivateCoprocessorContext)
                }
                Some(
                    <DestroyCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <DestroyCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DestroyCoprocessorContext)
                }
                Some(
                    <InitializeCoprocessorContexts as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <InitializeCoprocessorContexts as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::InitializeCoprocessorContexts)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(
                    <NewCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <NewCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::NewCoprocessorContext)
                }
                Some(
                    <OwnershipTransferStarted as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferStarted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferStarted)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(<Paused as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Paused as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Paused)
                }
                Some(
                    <PreActivateCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PreActivateCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::PreActivateCoprocessorContext)
                }
                Some(
                    <SuspendCoprocessorContext as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SuspendCoprocessorContext as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::SuspendCoprocessorContext)
                }
                Some(<Unpaused as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Unpaused as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Unpaused)
                }
                Some(<Upgraded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Upgraded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Upgraded)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for CoprocessorContextsEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CompromiseCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DeactivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DestroyCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::InitializeCoprocessorContexts(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::NewCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferStarted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Paused(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PreActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SuspendCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Unpaused(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Upgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CompromiseCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DeactivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DestroyCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::InitializeCoprocessorContexts(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::NewCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferStarted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Paused(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PreActivateCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SuspendCoprocessorContext(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Unpaused(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Upgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`CoprocessorContexts`](self) contract instance.

See the [wrapper's documentation](`CoprocessorContextsInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> CoprocessorContextsInstance<T, P, N> {
        CoprocessorContextsInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<CoprocessorContextsInstance<T, P, N>>,
    > {
        CoprocessorContextsInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        CoprocessorContextsInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`CoprocessorContexts`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`CoprocessorContexts`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct CoprocessorContextsInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for CoprocessorContextsInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("CoprocessorContextsInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > CoprocessorContextsInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`CoprocessorContexts`](self) contract instance.

See the [wrapper's documentation](`CoprocessorContextsInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<CoprocessorContextsInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> CoprocessorContextsInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> CoprocessorContextsInstance<T, P, N> {
            CoprocessorContextsInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > CoprocessorContextsInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`UPGRADE_INTERFACE_VERSION`] function.
        pub fn UPGRADE_INTERFACE_VERSION(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, UPGRADE_INTERFACE_VERSIONCall, N> {
            self.call_builder(&UPGRADE_INTERFACE_VERSIONCall {})
        }
        ///Creates a new call builder for the [`acceptOwnership`] function.
        pub fn acceptOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, acceptOwnershipCall, N> {
            self.call_builder(&acceptOwnershipCall {})
        }
        ///Creates a new call builder for the [`addCoprocessorContext`] function.
        pub fn addCoprocessorContext(
            &self,
            featureSet: alloy::sol_types::private::primitives::aliases::U256,
            coprocessors: alloy::sol_types::private::Vec<
                <Coprocessor as alloy::sol_types::SolType>::RustType,
            >,
            timePeriods: <CoprocessorContextTimePeriods as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, addCoprocessorContextCall, N> {
            self.call_builder(
                &addCoprocessorContextCall {
                    featureSet,
                    coprocessors,
                    timePeriods,
                },
            )
        }
        ///Creates a new call builder for the [`checkIsCoprocessorSignerFromContext`] function.
        pub fn checkIsCoprocessorSignerFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            signerAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            checkIsCoprocessorSignerFromContextCall,
            N,
        > {
            self.call_builder(
                &checkIsCoprocessorSignerFromContextCall {
                    contextId,
                    signerAddress,
                },
            )
        }
        ///Creates a new call builder for the [`checkIsCoprocessorTxSenderFromContext`] function.
        pub fn checkIsCoprocessorTxSenderFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            txSenderAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            checkIsCoprocessorTxSenderFromContextCall,
            N,
        > {
            self.call_builder(
                &checkIsCoprocessorTxSenderFromContextCall {
                    contextId,
                    txSenderAddress,
                },
            )
        }
        ///Creates a new call builder for the [`compromiseCoprocessorContext`] function.
        pub fn compromiseCoprocessorContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, compromiseCoprocessorContextCall, N> {
            self.call_builder(
                &compromiseCoprocessorContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`destroyCoprocessorContext`] function.
        pub fn destroyCoprocessorContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, destroyCoprocessorContextCall, N> {
            self.call_builder(
                &destroyCoprocessorContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getActiveCoprocessorContext`] function.
        pub fn getActiveCoprocessorContext(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getActiveCoprocessorContextCall, N> {
            self.call_builder(&getActiveCoprocessorContextCall {})
        }
        ///Creates a new call builder for the [`getActiveCoprocessorContextId`] function.
        pub fn getActiveCoprocessorContextId(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            getActiveCoprocessorContextIdCall,
            N,
        > {
            self.call_builder(
                &getActiveCoprocessorContextIdCall {
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorActivationBlockTimestampFromContext`] function.
        pub fn getCoprocessorActivationBlockTimestampFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            getCoprocessorActivationBlockTimestampFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorActivationBlockTimestampFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorContextStatus`] function.
        pub fn getCoprocessorContextStatus(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCoprocessorContextStatusCall, N> {
            self.call_builder(
                &getCoprocessorContextStatusCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorDeactivatedBlockTimestampFromContext`] function.
        pub fn getCoprocessorDeactivatedBlockTimestampFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            getCoprocessorDeactivatedBlockTimestampFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorDeactivatedBlockTimestampFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorFromContext`] function.
        pub fn getCoprocessorFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
            coprocessorTxSenderAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCoprocessorFromContextCall, N> {
            self.call_builder(
                &getCoprocessorFromContextCall {
                    contextId,
                    coprocessorTxSenderAddress,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorMajorityThresholdFromContext`] function.
        pub fn getCoprocessorMajorityThresholdFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            getCoprocessorMajorityThresholdFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorMajorityThresholdFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorSignersFromContext`] function.
        pub fn getCoprocessorSignersFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            getCoprocessorSignersFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorSignersFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getCoprocessorTxSendersFromContext`] function.
        pub fn getCoprocessorTxSendersFromContext(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            getCoprocessorTxSendersFromContextCall,
            N,
        > {
            self.call_builder(
                &getCoprocessorTxSendersFromContextCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`getPreActivationCoprocessorContextId`] function.
        pub fn getPreActivationCoprocessorContextId(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            getPreActivationCoprocessorContextIdCall,
            N,
        > {
            self.call_builder(
                &getPreActivationCoprocessorContextIdCall {
                },
            )
        }
        ///Creates a new call builder for the [`getSuspendedCoprocessorContextId`] function.
        pub fn getSuspendedCoprocessorContextId(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            getSuspendedCoprocessorContextIdCall,
            N,
        > {
            self.call_builder(
                &getSuspendedCoprocessorContextIdCall {
                },
            )
        }
        ///Creates a new call builder for the [`getVersion`] function.
        pub fn getVersion(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getVersionCall, N> {
            self.call_builder(&getVersionCall {})
        }
        ///Creates a new call builder for the [`initializeFromEmptyProxy`] function.
        pub fn initializeFromEmptyProxy(
            &self,
            initialFeatureSet: alloy::sol_types::private::primitives::aliases::U256,
            initialCoprocessors: alloy::sol_types::private::Vec<
                <Coprocessor as alloy::sol_types::SolType>::RustType,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeFromEmptyProxyCall, N> {
            self.call_builder(
                &initializeFromEmptyProxyCall {
                    initialFeatureSet,
                    initialCoprocessors,
                },
            )
        }
        ///Creates a new call builder for the [`isCoprocessorContextActiveOrSuspended`] function.
        pub fn isCoprocessorContextActiveOrSuspended(
            &self,
            contextId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            isCoprocessorContextActiveOrSuspendedCall,
            N,
        > {
            self.call_builder(
                &isCoprocessorContextActiveOrSuspendedCall {
                    contextId,
                },
            )
        }
        ///Creates a new call builder for the [`moveSuspendedCoprocessorContextToActive`] function.
        pub fn moveSuspendedCoprocessorContextToActive(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            moveSuspendedCoprocessorContextToActiveCall,
            N,
        > {
            self.call_builder(
                &moveSuspendedCoprocessorContextToActiveCall {
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`pause`] function.
        pub fn pause(&self) -> alloy_contract::SolCallBuilder<T, &P, pauseCall, N> {
            self.call_builder(&pauseCall {})
        }
        ///Creates a new call builder for the [`paused`] function.
        pub fn paused(&self) -> alloy_contract::SolCallBuilder<T, &P, pausedCall, N> {
            self.call_builder(&pausedCall {})
        }
        ///Creates a new call builder for the [`pendingOwner`] function.
        pub fn pendingOwner(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, pendingOwnerCall, N> {
            self.call_builder(&pendingOwnerCall {})
        }
        ///Creates a new call builder for the [`proxiableUUID`] function.
        pub fn proxiableUUID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, proxiableUUIDCall, N> {
            self.call_builder(&proxiableUUIDCall {})
        }
        ///Creates a new call builder for the [`refreshCoprocessorContextStatuses`] function.
        pub fn refreshCoprocessorContextStatuses(
            &self,
        ) -> alloy_contract::SolCallBuilder<
            T,
            &P,
            refreshCoprocessorContextStatusesCall,
            N,
        > {
            self.call_builder(
                &refreshCoprocessorContextStatusesCall {
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`unpause`] function.
        pub fn unpause(&self) -> alloy_contract::SolCallBuilder<T, &P, unpauseCall, N> {
            self.call_builder(&unpauseCall {})
        }
        ///Creates a new call builder for the [`upgradeToAndCall`] function.
        pub fn upgradeToAndCall(
            &self,
            newImplementation: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, upgradeToAndCallCall, N> {
            self.call_builder(
                &upgradeToAndCallCall {
                    newImplementation,
                    data,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > CoprocessorContextsInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ActivateCoprocessorContext`] event.
        pub fn ActivateCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ActivateCoprocessorContext, N> {
            self.event_filter::<ActivateCoprocessorContext>()
        }
        ///Creates a new event filter for the [`CompromiseCoprocessorContext`] event.
        pub fn CompromiseCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, CompromiseCoprocessorContext, N> {
            self.event_filter::<CompromiseCoprocessorContext>()
        }
        ///Creates a new event filter for the [`DeactivateCoprocessorContext`] event.
        pub fn DeactivateCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DeactivateCoprocessorContext, N> {
            self.event_filter::<DeactivateCoprocessorContext>()
        }
        ///Creates a new event filter for the [`DestroyCoprocessorContext`] event.
        pub fn DestroyCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DestroyCoprocessorContext, N> {
            self.event_filter::<DestroyCoprocessorContext>()
        }
        ///Creates a new event filter for the [`InitializeCoprocessorContexts`] event.
        pub fn InitializeCoprocessorContexts_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, InitializeCoprocessorContexts, N> {
            self.event_filter::<InitializeCoprocessorContexts>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`NewCoprocessorContext`] event.
        pub fn NewCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, NewCoprocessorContext, N> {
            self.event_filter::<NewCoprocessorContext>()
        }
        ///Creates a new event filter for the [`OwnershipTransferStarted`] event.
        pub fn OwnershipTransferStarted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferStarted, N> {
            self.event_filter::<OwnershipTransferStarted>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`Paused`] event.
        pub fn Paused_filter(&self) -> alloy_contract::Event<T, &P, Paused, N> {
            self.event_filter::<Paused>()
        }
        ///Creates a new event filter for the [`PreActivateCoprocessorContext`] event.
        pub fn PreActivateCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, PreActivateCoprocessorContext, N> {
            self.event_filter::<PreActivateCoprocessorContext>()
        }
        ///Creates a new event filter for the [`SuspendCoprocessorContext`] event.
        pub fn SuspendCoprocessorContext_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, SuspendCoprocessorContext, N> {
            self.event_filter::<SuspendCoprocessorContext>()
        }
        ///Creates a new event filter for the [`Unpaused`] event.
        pub fn Unpaused_filter(&self) -> alloy_contract::Event<T, &P, Unpaused, N> {
            self.event_filter::<Unpaused>()
        }
        ///Creates a new event filter for the [`Upgraded`] event.
        pub fn Upgraded_filter(&self) -> alloy_contract::Event<T, &P, Upgraded, N> {
            self.event_filter::<Upgraded>()
        }
    }
}
